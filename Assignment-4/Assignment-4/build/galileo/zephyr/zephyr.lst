
zephyr.elf:     file format elf32-i386


Disassembly of section text:

00100000 <__start>:
        mov  %eax, %esi			/* low  value */
        mov  %edx, %edi			/* high value */
#endif

	/* Enable write-back caching by clearing the NW and CD bits */
	movl	%cr0, %eax
  100000:	0f 20 c0             	mov    %cr0,%eax
	andl	$0x9fffffff, %eax
  100003:	25 ff ff ff 9f       	and    $0x9fffffff,%eax
	movl	%eax, %cr0
  100008:	0f 22 c0             	mov    %eax,%cr0
	/*
	 * Ensure interrupts are disabled.  Interrupts are enabled when
	 * the first context switch occurs.
	 */

	cli
  10000b:	fa                   	cli    
	 * Although the bootloader sets up an Interrupt Descriptor Table (IDT)
	 * and a Global Descriptor Table (GDT), the specification encourages
	 * booted operating systems to setup their own IDT and GDT.
	 */
#if CONFIG_SET_GDT
	lgdt	_gdt_rom		/* load 32-bit operand size GDT */
  10000c:	0f 01 15 78 00 10 00 	lgdtl  0x100078
#endif
	lidt	_Idt		/* load 32-bit operand size IDT */
  100013:	0f 01 1d 60 00 10 00 	lidtl  0x100060


#ifdef CONFIG_SET_GDT
	/* If we set our own GDT, update the segment registers as well.
	 */
	movw	$DATA_SEG, %ax	/* data segment selector (entry = 3) */
  10001a:	66 b8 10 00          	mov    $0x10,%ax
	movw	%ax, %ds	/* set DS */
  10001e:	8e d8                	mov    %eax,%ds
	movw	%ax, %es	/* set ES */
  100020:	8e c0                	mov    %eax,%es
	movw	%ax, %ss	/* set SS */
  100022:	8e d0                	mov    %eax,%ss
	xorw	%ax, %ax	/* AX = 0 */
  100024:	66 31 c0             	xor    %ax,%ax
	movw	%ax, %fs	/* Zero FS */
  100027:	8e e0                	mov    %eax,%fs
	movw	%ax, %gs	/* Zero GS */
  100029:	8e e8                	mov    %eax,%gs

	ljmp	$CODE_SEG, $__csSet	/* set CS = 0x08 */
  10002b:	ea 32 00 10 00 08 00 	ljmp   $0x8,$0x100032

00100032 <__csSet>:
	/*
	 * Force an #NM exception for floating point instructions
	 * since FP support hasn't been configured
	 */

	movl	%cr0, %eax		/* move CR0 to EAX */
  100032:	0f 20 c0             	mov    %cr0,%eax
	orl	$0x2e, %eax		/* CR0[NE+TS+EM+MP]=1 */
  100035:	83 c8 2e             	or     $0x2e,%eax
	movl	%eax, %cr0		/* move EAX to CR0 */
  100038:	0f 22 c0             	mov    %eax,%cr0
	stack_size_dwords = (CONFIG_ISR_STACK_SIZE / 4)
	movl $stack_size_dwords, %ecx
	rep  stosl
#endif

	movl	$_interrupt_stack, %esp
  10003b:	bc d8 ae 10 00       	mov    $0x10aed8,%esp
	/* In this configuration, all stacks, including IRQ stack, are declared
	 * with a 4K non-present guard page preceding the stack buffer
	 */
	addl	$(CONFIG_ISR_STACK_SIZE + 4096), %esp
#else
	addl	$CONFIG_ISR_STACK_SIZE, %esp
  100040:	81 c4 00 08 00 00    	add    $0x800,%esp
	 * Clear BSS: bzero (__bss_start, __bss_num_words*4)
	 *
	 * It's assumed that BSS size will be a multiple of a long (4 bytes),
	 * and aligned on a double word (32-bit) boundary
	 */
	movl	$__bss_start, %edi	/* load BSS start address */
  100046:	bf 40 90 10 00       	mov    $0x109040,%edi
	movl	$__bss_num_words, %ecx	/* number of quad bytes in .bss */
  10004b:	b9 6c 04 00 00       	mov    $0x46c,%ecx
	call	_x86_bss_zero
  100050:	e8 05 00 00 00       	call   10005a <_x86_bss_zero>
	mov $MAIN_TSS, %ax
	ltr %ax
#endif
	/* Jump to C portion of kernel initialization and never return */

	jmp	_Cstart
  100055:	e9 8c 50 00 00       	jmp    1050e6 <_Cstart>

0010005a <_x86_bss_zero>:

#else /* !CONFIG_SSE */

	/* clear out BSS double words (32-bits at a time) */

	xorl	%eax, %eax		/* fill memory with 0 */
  10005a:	31 c0                	xor    %eax,%eax
	cld
  10005c:	fc                   	cld    
	rep
  10005d:	f3 ab                	rep stos %eax,%es:(%edi)
	stosl				/* zero memory per 4 bytes */

#endif /* CONFIG_SSE */
	ret
  10005f:	c3                   	ret    

00100060 <_Idt>:
  100060:	ff 07 a8 87 10 00 66 90 02 b0 ad 1b 00 00 00 00     ......f.........
  100070:	fe 4f 52 e4 8d 74 26 00                             .OR..t&.

00100078 <_gdt>:
  100078:	17 00 78 00 10 00 00 00 ff ff 00 00 00 9b cf 00     ..x.............
  100088:	ff ff 00 00 00 93 cf 00                             ........

00100090 <__udivdi3>:
  100090:	55                   	push   %ebp
  100091:	57                   	push   %edi
  100092:	56                   	push   %esi
  100093:	53                   	push   %ebx
  100094:	83 ec 1c             	sub    $0x1c,%esp
  100097:	8b 5c 24 30          	mov    0x30(%esp),%ebx
  10009b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
  10009f:	8b 7c 24 38          	mov    0x38(%esp),%edi
  1000a3:	8b 74 24 3c          	mov    0x3c(%esp),%esi
  1000a7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1000ab:	89 ca                	mov    %ecx,%edx
  1000ad:	89 7c 24 08          	mov    %edi,0x8(%esp)
  1000b1:	85 f6                	test   %esi,%esi
  1000b3:	75 3b                	jne    1000f0 <__udivdi3+0x60>
  1000b5:	39 cf                	cmp    %ecx,%edi
  1000b7:	0f 87 c3 00 00 00    	ja     100180 <__udivdi3+0xf0>
  1000bd:	89 fd                	mov    %edi,%ebp
  1000bf:	85 ff                	test   %edi,%edi
  1000c1:	75 0b                	jne    1000ce <__udivdi3+0x3e>
  1000c3:	b8 01 00 00 00       	mov    $0x1,%eax
  1000c8:	31 d2                	xor    %edx,%edx
  1000ca:	f7 f7                	div    %edi
  1000cc:	89 c5                	mov    %eax,%ebp
  1000ce:	89 c8                	mov    %ecx,%eax
  1000d0:	31 d2                	xor    %edx,%edx
  1000d2:	f7 f5                	div    %ebp
  1000d4:	89 c1                	mov    %eax,%ecx
  1000d6:	89 d8                	mov    %ebx,%eax
  1000d8:	89 cf                	mov    %ecx,%edi
  1000da:	f7 f5                	div    %ebp
  1000dc:	89 fa                	mov    %edi,%edx
  1000de:	83 c4 1c             	add    $0x1c,%esp
  1000e1:	5b                   	pop    %ebx
  1000e2:	5e                   	pop    %esi
  1000e3:	5f                   	pop    %edi
  1000e4:	5d                   	pop    %ebp
  1000e5:	c3                   	ret    
  1000e6:	8d 76 00             	lea    0x0(%esi),%esi
  1000e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
  1000f0:	39 ce                	cmp    %ecx,%esi
  1000f2:	77 7c                	ja     100170 <__udivdi3+0xe0>
  1000f4:	0f bd fe             	bsr    %esi,%edi
  1000f7:	83 f7 1f             	xor    $0x1f,%edi
  1000fa:	0f 84 90 00 00 00    	je     100190 <__udivdi3+0x100>
  100100:	bd 20 00 00 00       	mov    $0x20,%ebp
  100105:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  100109:	29 fd                	sub    %edi,%ebp
  10010b:	89 f9                	mov    %edi,%ecx
  10010d:	d3 e6                	shl    %cl,%esi
  10010f:	89 d8                	mov    %ebx,%eax
  100111:	89 e9                	mov    %ebp,%ecx
  100113:	d3 e8                	shr    %cl,%eax
  100115:	09 f0                	or     %esi,%eax
  100117:	89 f9                	mov    %edi,%ecx
  100119:	89 44 24 08          	mov    %eax,0x8(%esp)
  10011d:	89 d8                	mov    %ebx,%eax
  10011f:	d3 e0                	shl    %cl,%eax
  100121:	89 d3                	mov    %edx,%ebx
  100123:	89 e9                	mov    %ebp,%ecx
  100125:	d3 eb                	shr    %cl,%ebx
  100127:	89 f9                	mov    %edi,%ecx
  100129:	89 de                	mov    %ebx,%esi
  10012b:	d3 e2                	shl    %cl,%edx
  10012d:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  100131:	89 e9                	mov    %ebp,%ecx
  100133:	d3 eb                	shr    %cl,%ebx
  100135:	09 da                	or     %ebx,%edx
  100137:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10013b:	89 d0                	mov    %edx,%eax
  10013d:	89 f2                	mov    %esi,%edx
  10013f:	f7 74 24 08          	divl   0x8(%esp)
  100143:	89 d6                	mov    %edx,%esi
  100145:	89 c3                	mov    %eax,%ebx
  100147:	f7 64 24 0c          	mull   0xc(%esp)
  10014b:	39 d6                	cmp    %edx,%esi
  10014d:	72 10                	jb     10015f <__udivdi3+0xcf>
  10014f:	8b 6c 24 04          	mov    0x4(%esp),%ebp
  100153:	89 f9                	mov    %edi,%ecx
  100155:	d3 e5                	shl    %cl,%ebp
  100157:	39 c5                	cmp    %eax,%ebp
  100159:	73 55                	jae    1001b0 <__udivdi3+0x120>
  10015b:	39 d6                	cmp    %edx,%esi
  10015d:	75 51                	jne    1001b0 <__udivdi3+0x120>
  10015f:	8d 43 ff             	lea    -0x1(%ebx),%eax
  100162:	31 ff                	xor    %edi,%edi
  100164:	89 fa                	mov    %edi,%edx
  100166:	83 c4 1c             	add    $0x1c,%esp
  100169:	5b                   	pop    %ebx
  10016a:	5e                   	pop    %esi
  10016b:	5f                   	pop    %edi
  10016c:	5d                   	pop    %ebp
  10016d:	c3                   	ret    
  10016e:	66 90                	xchg   %ax,%ax
  100170:	31 ff                	xor    %edi,%edi
  100172:	31 c0                	xor    %eax,%eax
  100174:	89 fa                	mov    %edi,%edx
  100176:	83 c4 1c             	add    $0x1c,%esp
  100179:	5b                   	pop    %ebx
  10017a:	5e                   	pop    %esi
  10017b:	5f                   	pop    %edi
  10017c:	5d                   	pop    %ebp
  10017d:	c3                   	ret    
  10017e:	66 90                	xchg   %ax,%ax
  100180:	89 d8                	mov    %ebx,%eax
  100182:	f7 f7                	div    %edi
  100184:	31 ff                	xor    %edi,%edi
  100186:	89 fa                	mov    %edi,%edx
  100188:	83 c4 1c             	add    $0x1c,%esp
  10018b:	5b                   	pop    %ebx
  10018c:	5e                   	pop    %esi
  10018d:	5f                   	pop    %edi
  10018e:	5d                   	pop    %ebp
  10018f:	c3                   	ret    
  100190:	39 ce                	cmp    %ecx,%esi
  100192:	72 10                	jb     1001a4 <__udivdi3+0x114>
  100194:	8b 5c 24 04          	mov    0x4(%esp),%ebx
  100198:	31 c0                	xor    %eax,%eax
  10019a:	39 5c 24 08          	cmp    %ebx,0x8(%esp)
  10019e:	0f 87 38 ff ff ff    	ja     1000dc <__udivdi3+0x4c>
  1001a4:	b8 01 00 00 00       	mov    $0x1,%eax
  1001a9:	e9 2e ff ff ff       	jmp    1000dc <__udivdi3+0x4c>
  1001ae:	66 90                	xchg   %ax,%ax
  1001b0:	89 d8                	mov    %ebx,%eax
  1001b2:	31 ff                	xor    %edi,%edi
  1001b4:	e9 23 ff ff ff       	jmp    1000dc <__udivdi3+0x4c>

001001b9 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
  1001b9:	55                   	push   %ebp
  1001ba:	89 e5                	mov    %esp,%ebp
  1001bc:	53                   	push   %ebx
  1001bd:	8b 55 08             	mov    0x8(%ebp),%edx
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
  1001c0:	0f be 0a             	movsbl (%edx),%ecx
  1001c3:	89 c8                	mov    %ecx,%eax
	return (((unsigned)c|32)-'a') < 26;
}

static inline int isspace(int c)
{
	return c == ' ' || ((unsigned)c-'\t') < 5;
  1001c5:	83 e9 09             	sub    $0x9,%ecx
  1001c8:	83 f9 04             	cmp    $0x4,%ecx
  1001cb:	77 03                	ja     1001d0 <atoi+0x17>
		s++;
  1001cd:	42                   	inc    %edx
  1001ce:	eb f0                	jmp    1001c0 <atoi+0x7>
	while (isspace(*s)) {
  1001d0:	3c 20                	cmp    $0x20,%al
  1001d2:	74 f9                	je     1001cd <atoi+0x14>
	}
	switch (*s) {
  1001d4:	3c 2b                	cmp    $0x2b,%al
  1001d6:	74 0c                	je     1001e4 <atoi+0x2b>
  1001d8:	3c 2d                	cmp    $0x2d,%al
  1001da:	75 09                	jne    1001e5 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
  1001dc:	42                   	inc    %edx
		neg = 1;
  1001dd:	bb 01 00 00 00       	mov    $0x1,%ebx
		break;	/* artifact to quiet coverity warning */
  1001e2:	eb 03                	jmp    1001e7 <atoi+0x2e>
	case '+':
		s++;
  1001e4:	42                   	inc    %edx
	int neg = 0;
  1001e5:	31 db                	xor    %ebx,%ebx
  1001e7:	31 c0                	xor    %eax,%eax
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
  1001e9:	0f be 0a             	movsbl (%edx),%ecx
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
  1001ec:	83 e9 30             	sub    $0x30,%ecx
  1001ef:	83 f9 09             	cmp    $0x9,%ecx
  1001f2:	77 08                	ja     1001fc <atoi+0x43>
		n = 10*n - (*s++ - '0');
  1001f4:	6b c0 0a             	imul   $0xa,%eax,%eax
  1001f7:	42                   	inc    %edx
  1001f8:	29 c8                	sub    %ecx,%eax
  1001fa:	eb ed                	jmp    1001e9 <atoi+0x30>
	}
	return neg ? n : -n;
  1001fc:	85 db                	test   %ebx,%ebx
  1001fe:	75 02                	jne    100202 <atoi+0x49>
  100200:	f7 d8                	neg    %eax
}
  100202:	5b                   	pop    %ebx
  100203:	5d                   	pop    %ebp
  100204:	c3                   	ret    

00100205 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
  100205:	55                   	push   %ebp
  100206:	89 e5                	mov    %esp,%ebp
  100208:	53                   	push   %ebx
  100209:	8b 45 08             	mov    0x8(%ebp),%eax
  10020c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	char *dest = d;

	while (*s != '\0') {
  10020f:	89 c2                	mov    %eax,%edx
  100211:	8a 19                	mov    (%ecx),%bl
  100213:	84 db                	test   %bl,%bl
  100215:	74 06                	je     10021d <strcpy+0x18>
		*d = *s;
  100217:	88 1a                	mov    %bl,(%edx)
		d++;
		s++;
  100219:	41                   	inc    %ecx
		d++;
  10021a:	42                   	inc    %edx
  10021b:	eb f4                	jmp    100211 <strcpy+0xc>
	}

	*d = '\0';
  10021d:	c6 02 00             	movb   $0x0,(%edx)

	return dest;
}
  100220:	5b                   	pop    %ebx
  100221:	5d                   	pop    %ebp
  100222:	c3                   	ret    

00100223 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
  100223:	55                   	push   %ebp
  100224:	89 e5                	mov    %esp,%ebp
  100226:	56                   	push   %esi
  100227:	53                   	push   %ebx
  100228:	8b 45 08             	mov    0x8(%ebp),%eax
  10022b:	8b 75 0c             	mov    0xc(%ebp),%esi
  10022e:	8b 4d 10             	mov    0x10(%ebp),%ecx
	char *dest = d;

	while ((n > 0) && *s != '\0') {
  100231:	89 c3                	mov    %eax,%ebx
  100233:	85 c9                	test   %ecx,%ecx
  100235:	74 18                	je     10024f <strncpy+0x2c>
  100237:	8a 16                	mov    (%esi),%dl
  100239:	84 d2                	test   %dl,%dl
  10023b:	74 07                	je     100244 <strncpy+0x21>
		*d = *s;
  10023d:	88 13                	mov    %dl,(%ebx)
		s++;
  10023f:	46                   	inc    %esi
		d++;
  100240:	43                   	inc    %ebx
		n--;
  100241:	49                   	dec    %ecx
  100242:	eb ef                	jmp    100233 <strncpy+0x10>
  100244:	31 d2                	xor    %edx,%edx
	}

	while (n > 0) {
		*d = '\0';
  100246:	c6 04 13 00          	movb   $0x0,(%ebx,%edx,1)
  10024a:	42                   	inc    %edx
	while (n > 0) {
  10024b:	39 d1                	cmp    %edx,%ecx
  10024d:	75 f7                	jne    100246 <strncpy+0x23>
		d++;
		n--;
	}

	return dest;
}
  10024f:	5b                   	pop    %ebx
  100250:	5e                   	pop    %esi
  100251:	5d                   	pop    %ebp
  100252:	c3                   	ret    

00100253 <strchr>:
 *
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
  100253:	55                   	push   %ebp
  100254:	89 e5                	mov    %esp,%ebp
  100256:	53                   	push   %ebx
  100257:	8b 55 0c             	mov    0xc(%ebp),%edx
  10025a:	8b 45 08             	mov    0x8(%ebp),%eax
	char tmp = (char) c;
  10025d:	88 d3                	mov    %dl,%bl

	while ((*s != tmp) && (*s != '\0'))
  10025f:	8a 08                	mov    (%eax),%cl
  100261:	38 cb                	cmp    %cl,%bl
  100263:	74 0d                	je     100272 <strchr+0x1f>
  100265:	84 c9                	test   %cl,%cl
  100267:	74 03                	je     10026c <strchr+0x19>
		s++;
  100269:	40                   	inc    %eax
  10026a:	eb f3                	jmp    10025f <strchr+0xc>

	return (*s == tmp) ? (char *) s : NULL;
  10026c:	84 d2                	test   %dl,%dl
  10026e:	74 02                	je     100272 <strchr+0x1f>
  100270:	31 c0                	xor    %eax,%eax
}
  100272:	5b                   	pop    %ebx
  100273:	5d                   	pop    %ebp
  100274:	c3                   	ret    

00100275 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
  100275:	55                   	push   %ebp
	size_t n = 0;
  100276:	31 c0                	xor    %eax,%eax
{
  100278:	89 e5                	mov    %esp,%ebp
  10027a:	8b 55 08             	mov    0x8(%ebp),%edx

	while (*s != '\0') {
  10027d:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
  100281:	74 03                	je     100286 <strlen+0x11>
		s++;
		n++;
  100283:	40                   	inc    %eax
  100284:	eb f7                	jmp    10027d <strlen+0x8>
	}

	return n;
}
  100286:	5d                   	pop    %ebp
  100287:	c3                   	ret    

00100288 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
  100288:	55                   	push   %ebp
	while ((*s1 == *s2) && (*s1 != '\0')) {
  100289:	31 c9                	xor    %ecx,%ecx
{
  10028b:	89 e5                	mov    %esp,%ebp
	while ((*s1 == *s2) && (*s1 != '\0')) {
  10028d:	8b 45 08             	mov    0x8(%ebp),%eax
  100290:	8b 55 0c             	mov    0xc(%ebp),%edx
  100293:	0f be 04 08          	movsbl (%eax,%ecx,1),%eax
  100297:	0f be 14 0a          	movsbl (%edx,%ecx,1),%edx
  10029b:	38 d0                	cmp    %dl,%al
  10029d:	75 08                	jne    1002a7 <strcmp+0x1f>
  10029f:	41                   	inc    %ecx
  1002a0:	84 c0                	test   %al,%al
  1002a2:	75 e9                	jne    10028d <strcmp+0x5>
  1002a4:	0f be d0             	movsbl %al,%edx
		s1++;
		s2++;
	}

	return *s1 - *s2;
  1002a7:	29 d0                	sub    %edx,%eax
}
  1002a9:	5d                   	pop    %ebp
  1002aa:	c3                   	ret    

001002ab <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
  1002ab:	55                   	push   %ebp
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
  1002ac:	31 d2                	xor    %edx,%edx
{
  1002ae:	89 e5                	mov    %esp,%ebp
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
  1002b0:	39 55 10             	cmp    %edx,0x10(%ebp)
  1002b3:	74 19                	je     1002ce <strncmp+0x23>
  1002b5:	8b 45 08             	mov    0x8(%ebp),%eax
  1002b8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1002bb:	0f be 04 10          	movsbl (%eax,%edx,1),%eax
  1002bf:	0f be 0c 11          	movsbl (%ecx,%edx,1),%ecx
  1002c3:	42                   	inc    %edx
  1002c4:	84 c0                	test   %al,%al
  1002c6:	74 0a                	je     1002d2 <strncmp+0x27>
  1002c8:	38 c8                	cmp    %cl,%al
  1002ca:	74 e4                	je     1002b0 <strncmp+0x5>
  1002cc:	eb 04                	jmp    1002d2 <strncmp+0x27>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
  1002ce:	31 c0                	xor    %eax,%eax
  1002d0:	eb 02                	jmp    1002d4 <strncmp+0x29>
  1002d2:	29 c8                	sub    %ecx,%eax
}
  1002d4:	5d                   	pop    %ebp
  1002d5:	c3                   	ret    

001002d6 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
  1002d6:	55                   	push   %ebp
  1002d7:	89 e5                	mov    %esp,%ebp
  1002d9:	53                   	push   %ebx
  1002da:	8b 5d 08             	mov    0x8(%ebp),%ebx
	strcpy(dest + strlen(dest), src);
  1002dd:	53                   	push   %ebx
  1002de:	e8 92 ff ff ff       	call   100275 <strlen>
  1002e3:	5a                   	pop    %edx
  1002e4:	01 d8                	add    %ebx,%eax
  1002e6:	ff 75 0c             	pushl  0xc(%ebp)
  1002e9:	50                   	push   %eax
  1002ea:	e8 16 ff ff ff       	call   100205 <strcpy>
  1002ef:	59                   	pop    %ecx
  1002f0:	58                   	pop    %eax
	return dest;
}
  1002f1:	89 d8                	mov    %ebx,%eax
  1002f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1002f6:	c9                   	leave  
  1002f7:	c3                   	ret    

001002f8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
  1002f8:	55                   	push   %ebp
  1002f9:	89 e5                	mov    %esp,%ebp
  1002fb:	57                   	push   %edi
  1002fc:	56                   	push   %esi
  1002fd:	53                   	push   %ebx
  1002fe:	8b 55 0c             	mov    0xc(%ebp),%edx
  100301:	8b 5d 10             	mov    0x10(%ebp),%ebx
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
  100304:	88 d0                	mov    %dl,%al
	unsigned char *d_byte = (unsigned char *)buf;
  100306:	8b 4d 08             	mov    0x8(%ebp),%ecx

	while (((unsigned int)d_byte) & 0x3) {
  100309:	f6 c1 03             	test   $0x3,%cl
  10030c:	74 0b                	je     100319 <memset+0x21>
		if (n == 0) {
  10030e:	85 db                	test   %ebx,%ebx
  100310:	74 41                	je     100353 <memset+0x5b>
			return buf;
		}
		*(d_byte++) = c_byte;
  100312:	41                   	inc    %ecx
		n--;
  100313:	4b                   	dec    %ebx
		*(d_byte++) = c_byte;
  100314:	88 41 ff             	mov    %al,-0x1(%ecx)
  100317:	eb f0                	jmp    100309 <memset+0x11>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
  100319:	0f b6 d2             	movzbl %dl,%edx

	c_word |= c_word << 8;
  10031c:	89 d6                	mov    %edx,%esi
  10031e:	c1 e6 08             	shl    $0x8,%esi
  100321:	09 f2                	or     %esi,%edx
	c_word |= c_word << 16;
  100323:	89 d6                	mov    %edx,%esi
  100325:	c1 e6 10             	shl    $0x10,%esi
  100328:	09 f2                	or     %esi,%edx

	while (n >= sizeof(unsigned int)) {
  10032a:	31 f6                	xor    %esi,%esi
  10032c:	89 df                	mov    %ebx,%edi
  10032e:	29 f7                	sub    %esi,%edi
  100330:	83 ff 03             	cmp    $0x3,%edi
  100333:	76 08                	jbe    10033d <memset+0x45>
		*(d_word++) = c_word;
  100335:	89 14 31             	mov    %edx,(%ecx,%esi,1)
  100338:	83 c6 04             	add    $0x4,%esi
  10033b:	eb ef                	jmp    10032c <memset+0x34>
  10033d:	89 da                	mov    %ebx,%edx
  10033f:	83 e3 fc             	and    $0xfffffffc,%ebx
  100342:	01 d9                	add    %ebx,%ecx
  100344:	83 e2 03             	and    $0x3,%edx
	while (n >= sizeof(unsigned int)) {
  100347:	31 db                	xor    %ebx,%ebx

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
  100349:	39 da                	cmp    %ebx,%edx
  10034b:	74 06                	je     100353 <memset+0x5b>
		*(d_byte++) = c_byte;
  10034d:	88 04 19             	mov    %al,(%ecx,%ebx,1)
  100350:	43                   	inc    %ebx
  100351:	eb f6                	jmp    100349 <memset+0x51>
		n--;
	}

	return buf;
}
  100353:	5b                   	pop    %ebx
  100354:	8b 45 08             	mov    0x8(%ebp),%eax
  100357:	5e                   	pop    %esi
  100358:	5f                   	pop    %edi
  100359:	5d                   	pop    %ebp
  10035a:	c3                   	ret    

0010035b <shell_enable>:




static int shell_enable(int argc, char *argv[])
{
  10035b:	55                   	push   %ebp
  10035c:	89 e5                	mov    %esp,%ebp
  10035e:	56                   	push   %esi
  10035f:	53                   	push   %ebx
  100360:	8b 75 0c             	mov    0xc(%ebp),%esi
	int num=1;
	int HCSR_selected = 0;
	if(argc != 2)
  100363:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
  100367:	74 07                	je     100370 <shell_enable+0x15>
	{
		printk("Enter one argument");
  100369:	68 e0 62 10 00       	push   $0x1062e0
  10036e:	eb 68                	jmp    1003d8 <shell_enable+0x7d>
		return 1;
	}
	HCSR_selected = atoi(argv[num]);
  100370:	ff 76 04             	pushl  0x4(%esi)
  100373:	e8 41 fe ff ff       	call   1001b9 <atoi>
  100378:	89 c3                	mov    %eax,%ebx
	printk("HCSR_selected : %d",HCSR_selected);
  10037a:	89 04 24             	mov    %eax,(%esp)
  10037d:	68 f3 62 10 00       	push   $0x1062f3
  100382:	e8 8e 09 00 00       	call   100d15 <printk>
  100387:	58                   	pop    %eax

	if(HCSR_selected == 0)
  100388:	85 db                	test   %ebx,%ebx
	printk("HCSR_selected : %d",HCSR_selected);
  10038a:	5a                   	pop    %edx
	if(HCSR_selected == 0)
  10038b:	75 0d                	jne    10039a <shell_enable+0x3f>
	printk(" No HCSR is enabled\n");
  10038d:	68 06 63 10 00       	push   $0x106306
  100392:	e8 7e 09 00 00       	call   100d15 <printk>
  100397:	59                   	pop    %ecx
  100398:	eb 4b                	jmp    1003e5 <shell_enable+0x8a>

	else if(atoi(argv[num]) == 1)
  10039a:	ff 76 04             	pushl  0x4(%esi)
  10039d:	e8 17 fe ff ff       	call   1001b9 <atoi>
  1003a2:	5a                   	pop    %edx
  1003a3:	48                   	dec    %eax
  1003a4:	74 0e                	je     1003b4 <shell_enable+0x59>
	{
		printk(" Enabling HCSR[%d]\n", HCSR_selected);
		dev_hcsr04 = device_get_binding(CONFIG_HCSR04_0_NAME);
	}
	else if(atoi(argv[num]) == 2)
  1003a6:	ff 76 04             	pushl  0x4(%esi)
  1003a9:	e8 0b fe ff ff       	call   1001b9 <atoi>
  1003ae:	59                   	pop    %ecx
  1003af:	83 f8 02             	cmp    $0x2,%eax
  1003b2:	75 1f                	jne    1003d3 <shell_enable+0x78>
	{
		printk(" Enabling HCSR[%d]\n", HCSR_selected);
  1003b4:	53                   	push   %ebx
  1003b5:	68 1b 63 10 00       	push   $0x10631b
  1003ba:	e8 56 09 00 00       	call   100d15 <printk>
  1003bf:	5b                   	pop    %ebx
  1003c0:	5e                   	pop    %esi
		dev_hcsr04 = device_get_binding(CONFIG_HCSR04_1_NAME);
  1003c1:	68 2f 63 10 00       	push   $0x10632f
  1003c6:	e8 97 4c 00 00       	call   105062 <device_get_binding>
  1003cb:	5a                   	pop    %edx
  1003cc:	a3 dc a0 10 00       	mov    %eax,0x10a0dc
  1003d1:	eb 12                	jmp    1003e5 <shell_enable+0x8a>
	}
	else
	{
		printk(" Enter 0 or 1 or 2\n");
  1003d3:	68 3a 63 10 00       	push   $0x10633a
  1003d8:	e8 38 09 00 00       	call   100d15 <printk>
		return 1;
  1003dd:	bb 01 00 00 00       	mov    $0x1,%ebx
		printk(" Enter 0 or 1 or 2\n");
  1003e2:	59                   	pop    %ecx
  1003e3:	eb 21                	jmp    100406 <shell_enable+0xab>
	}
	dev_eeprom = device_get_binding(CONFIG_EEPROM_24FC256_DRV_NAME);
  1003e5:	68 4e 63 10 00       	push   $0x10634e
  1003ea:	e8 73 4c 00 00       	call   105062 <device_get_binding>
	if(!dev_eeprom)
	{
		printk("Cannot find EEPROM device!\n");
	}
	return 0;
  1003ef:	31 db                	xor    %ebx,%ebx
	dev_eeprom = device_get_binding(CONFIG_EEPROM_24FC256_DRV_NAME);
  1003f1:	5a                   	pop    %edx
  1003f2:	a3 e4 a0 10 00       	mov    %eax,0x10a0e4
	if(!dev_eeprom)
  1003f7:	85 c0                	test   %eax,%eax
  1003f9:	75 0b                	jne    100406 <shell_enable+0xab>
		printk("Cannot find EEPROM device!\n");
  1003fb:	68 59 63 10 00       	push   $0x106359
  100400:	e8 10 09 00 00       	call   100d15 <printk>
  100405:	58                   	pop    %eax
}
  100406:	8d 65 f8             	lea    -0x8(%ebp),%esp
  100409:	89 d8                	mov    %ebx,%eax
  10040b:	5b                   	pop    %ebx
  10040c:	5e                   	pop    %esi
  10040d:	5d                   	pop    %ebp
  10040e:	c3                   	ret    

0010040f <shell_dump>:
    printk("SHELL START FINISHED\n");
	return 0;
}

static int shell_dump(int argc, char *argv[])
{
  10040f:	55                   	push   %ebp
  100410:	89 e5                	mov    %esp,%ebp
  100412:	53                   	push   %ebx
	int num=1;
	uint32_t temp_offset;
	uint32_t dist_from_eeprom, time_stamp_eerpom;
	if(argc != 3)
  100413:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
{
  100417:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	if(argc != 3)
  10041a:	74 10                	je     10042c <shell_dump+0x1d>
	{
		printk("Enter two argument");
  10041c:	68 75 63 10 00       	push   $0x106375
  100421:	e8 ef 08 00 00       	call   100d15 <printk>
  100426:	59                   	pop    %ecx
  100427:	e9 45 01 00 00       	jmp    100571 <shell_dump+0x162>
		return 1;
	}
	start_page = atoi(argv[num]);
  10042c:	ff 73 04             	pushl  0x4(%ebx)
  10042f:	e8 85 fd ff ff       	call   1001b9 <atoi>
  100434:	5a                   	pop    %edx
	end_page = atoi(argv[num+1]);
  100435:	ff 73 08             	pushl  0x8(%ebx)
	start_page = atoi(argv[num]);
  100438:	a2 41 90 10 00       	mov    %al,0x109041
	end_page = atoi(argv[num+1]);
  10043d:	e8 77 fd ff ff       	call   1001b9 <atoi>
  100442:	a2 40 90 10 00       	mov    %al,0x109040
	printk("Start Page : %d\n",start_page);
  100447:	0f b6 05 41 90 10 00 	movzbl 0x109041,%eax
  10044e:	89 04 24             	mov    %eax,(%esp)
  100451:	68 88 63 10 00       	push   $0x106388
  100456:	e8 ba 08 00 00       	call   100d15 <printk>
  10045b:	59                   	pop    %ecx
	printk("End Page   : %d\n",end_page);
  10045c:	0f b6 05 40 90 10 00 	movzbl 0x109040,%eax
	printk("Start Page : %d\n",start_page);
  100463:	5b                   	pop    %ebx
	printk("End Page   : %d\n",end_page);
  100464:	50                   	push   %eax
  100465:	68 99 63 10 00       	push   $0x106399
  10046a:	e8 a6 08 00 00       	call   100d15 <printk>
  10046f:	58                   	pop    %eax

		if(end_page < start_page)
  100470:	a0 41 90 10 00       	mov    0x109041,%al
	printk("End Page   : %d\n",end_page);
  100475:	5a                   	pop    %edx
		if(end_page < start_page)
  100476:	38 05 40 90 10 00    	cmp    %al,0x109040
  10047c:	73 0b                	jae    100489 <shell_dump+0x7a>
	    printk("No page is erased\n");
  10047e:	68 aa 63 10 00       	push   $0x1063aa
  100483:	e8 8d 08 00 00       	call   100d15 <printk>
  100488:	59                   	pop    %ecx
		{
			printk(" Enter pages <= 512\n");
			return 1;
		}

	printk("inside the EEPROM thread func\n");
  100489:	68 bd 63 10 00       	push   $0x1063bd
  10048e:	e8 82 08 00 00       	call   100d15 <printk>

	j=start_page;
  100493:	0f b6 1d 41 90 10 00 	movzbl 0x109041,%ebx
  10049a:	89 d8                	mov    %ebx,%eax
  10049c:	89 1d c4 a0 10 00    	mov    %ebx,0x10a0c4
	next_addr = 0 + start_page*64;
  1004a2:	c1 e0 06             	shl    $0x6,%eax
	temp_offset = 0 + start_page*64;
  1004a5:	c1 e3 06             	shl    $0x6,%ebx
	next_addr = 0 + start_page*64;
  1004a8:	66 a3 42 90 10 00    	mov    %ax,0x109042
	printk("NEXT ADDRESS: %d \n", next_addr);
  1004ae:	0f b7 c0             	movzwl %ax,%eax
  1004b1:	89 04 24             	mov    %eax,(%esp)
  1004b4:	68 dc 63 10 00       	push   $0x1063dc
  1004b9:	e8 57 08 00 00       	call   100d15 <printk>
  1004be:	58                   	pop    %eax
  1004bf:	5a                   	pop    %edx
	while(j<=end_page)
  1004c0:	0f b6 05 40 90 10 00 	movzbl 0x109040,%eax
  1004c7:	3b 05 c4 a0 10 00    	cmp    0x10a0c4,%eax
  1004cd:	0f 8c 9e 00 00 00    	jl     100571 <shell_dump+0x162>
	{
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  1004d3:	66 a1 42 90 10 00    	mov    0x109042,%ax
  1004d9:	89 c2                	mov    %eax,%edx
		next_page_addr[1] = (next_addr) & 0xFF;
  1004db:	a2 a1 90 10 00       	mov    %al,0x1090a1
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  1004e0:	66 c1 ea 08          	shr    $0x8,%dx
		read_addr[0] = next_page_addr[0];
		read_addr[1] = next_page_addr[1];
		//ret =flash_write(dev_eeprom, EEPROM_OFFSET, read_addr,sizeof(read_addr));         //send the address to read
		//printk("EEPROM addr write succesful\n");
		//k_sleep(1);
		ret =flash_read(dev_eeprom, temp_offset, read_buf1,sizeof(read_buf1));
  1004e4:	a1 e4 a0 10 00       	mov    0x10a0e4,%eax
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  1004e9:	88 15 a0 90 10 00    	mov    %dl,0x1090a0
static inline int _impl_flash_read(struct device *dev, off_t offset, void *data,
			     size_t len)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->read(dev, offset, data, len);
  1004ef:	8b 50 04             	mov    0x4(%eax),%edx
  1004f2:	6a 40                	push   $0x40
  1004f4:	68 60 90 10 00       	push   $0x109060
  1004f9:	53                   	push   %ebx
  1004fa:	50                   	push   %eax
  1004fb:	ff 12                	call   *(%edx)
  1004fd:	83 c4 10             	add    $0x10,%esp
		ret =flash_read(dev_eeprom, temp_offset, read_buf1,sizeof(read_buf1));
  100500:	a3 e0 a0 10 00       	mov    %eax,0x10a0e0
		for(i=0;i<64;i++)
  100505:	c7 05 d0 a0 10 00 00 	movl   $0x0,0x10a0d0
  10050c:	00 00 00 
  10050f:	a1 d0 a0 10 00       	mov    0x10a0d0,%eax
  100514:	83 f8 3f             	cmp    $0x3f,%eax
  100517:	7f 1e                	jg     100537 <shell_dump+0x128>
		{
			printk("read byte_%d: %d\n",i,read_buf1[i]);
  100519:	0f b6 90 60 90 10 00 	movzbl 0x109060(%eax),%edx
  100520:	52                   	push   %edx
  100521:	50                   	push   %eax
  100522:	68 ef 63 10 00       	push   $0x1063ef
  100527:	e8 e9 07 00 00       	call   100d15 <printk>
  10052c:	83 c4 0c             	add    $0xc,%esp
		for(i=0;i<64;i++)
  10052f:	ff 05 d0 a0 10 00    	incl   0x10a0d0
  100535:	eb d8                	jmp    10050f <shell_dump+0x100>
		// 	p++;

		// }


		temp_offset = temp_offset+0x40;
  100537:	83 c3 40             	add    $0x40,%ebx
		printk("temp_offset : %d",temp_offset);
  10053a:	53                   	push   %ebx
  10053b:	68 01 64 10 00       	push   $0x106401
  100540:	e8 d0 07 00 00       	call   100d15 <printk>
  100545:	58                   	pop    %eax
  100546:	5a                   	pop    %edx

		next_addr = next_addr+ 0x40;
		//j++;
		j++;
		printk("-------------------------\n");
  100547:	68 71 64 10 00       	push   $0x106471
		next_addr = next_addr+ 0x40;
  10054c:	66 83 05 42 90 10 00 	addw   $0x40,0x109042
  100553:	40 
		j++;
  100554:	ff 05 c4 a0 10 00    	incl   0x10a0c4
		printk("-------------------------\n");
  10055a:	e8 b6 07 00 00       	call   100d15 <printk>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
  10055f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100566:	e8 03 52 00 00       	call   10576e <_impl_k_sleep>
  10056b:	59                   	pop    %ecx
  10056c:	e9 4f ff ff ff       	jmp    1004c0 <shell_dump+0xb1>
	  k_sleep(1);
	}
}
  100571:	b8 01 00 00 00       	mov    $0x1,%eax
  100576:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100579:	c9                   	leave  
  10057a:	c3                   	ret    

0010057b <HCSR_enable>:
{
  10057b:	55                   	push   %ebp
  10057c:	89 e5                	mov    %esp,%ebp
  10057e:	53                   	push   %ebx
	printk("EEPROM about to clean\n");
  10057f:	68 12 64 10 00       	push   $0x106412
  100584:	e8 8c 07 00 00       	call   100d15 <printk>
  100589:	58                   	pop    %eax
	next_addr = 0;
  10058a:	66 c7 05 42 90 10 00 	movw   $0x0,0x109042
  100591:	00 00 
	next_page_addr[0] = 0x00;
  100593:	c6 05 a0 90 10 00 00 	movb   $0x0,0x1090a0
	next_page_addr[1] = 0x00;
  10059a:	c6 05 a1 90 10 00 00 	movb   $0x0,0x1090a1
	for(i=0;i<512;i++)
  1005a1:	c7 05 d0 a0 10 00 00 	movl   $0x0,0x10a0d0
  1005a8:	00 00 00 
  1005ab:	81 3d d0 a0 10 00 ff 	cmpl   $0x1ff,0x10a0d0
  1005b2:	01 00 00 
  1005b5:	0f 8f 80 00 00 00    	jg     10063b <HCSR_enable+0xc0>
		write_buf1[0] = next_page_addr[0];
  1005bb:	a0 a0 90 10 00       	mov    0x1090a0,%al
  1005c0:	a2 c0 90 10 00       	mov    %al,0x1090c0
		write_buf1[1] = next_page_addr[1];
  1005c5:	a0 a1 90 10 00       	mov    0x1090a1,%al
  1005ca:	a2 c1 90 10 00       	mov    %al,0x1090c1
  1005cf:	b8 02 00 00 00       	mov    $0x2,%eax
			write_buf1[j] = 0x00;
  1005d4:	c6 80 c0 90 10 00 00 	movb   $0x0,0x1090c0(%eax)
		for(j=2;j<66;j++)
  1005db:	40                   	inc    %eax
  1005dc:	83 f8 42             	cmp    $0x42,%eax
  1005df:	75 f3                	jne    1005d4 <HCSR_enable+0x59>
		ret =flash_write(dev_eeprom, EEPROM_OFFSET, write_buf1,sizeof(write_buf1));       //send the address+data to write
  1005e1:	a1 e4 a0 10 00       	mov    0x10a0e4,%eax
  1005e6:	c7 05 c4 a0 10 00 42 	movl   $0x42,0x10a0c4
  1005ed:	00 00 00 
static inline int _impl_flash_write(struct device *dev, off_t offset,
				    const void *data, size_t len)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write(dev, offset, data, len);
  1005f0:	8b 50 04             	mov    0x4(%eax),%edx
  1005f3:	6a 42                	push   $0x42
  1005f5:	68 c0 90 10 00       	push   $0x1090c0
  1005fa:	6a 00                	push   $0x0
  1005fc:	50                   	push   %eax
  1005fd:	ff 52 04             	call   *0x4(%edx)
  100600:	83 c4 10             	add    $0x10,%esp
  100603:	a3 e0 a0 10 00       	mov    %eax,0x10a0e0
  100608:	6a 01                	push   $0x1
  10060a:	e8 5f 51 00 00       	call   10576e <_impl_k_sleep>
  10060f:	58                   	pop    %eax
		next_addr = next_addr+64;
  100610:	66 a1 42 90 10 00    	mov    0x109042,%ax
  100616:	83 c0 40             	add    $0x40,%eax
	for(i=0;i<512;i++)
  100619:	ff 05 d0 a0 10 00    	incl   0x10a0d0
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  10061f:	89 c2                	mov    %eax,%edx
		next_addr = next_addr+64;
  100621:	66 a3 42 90 10 00    	mov    %ax,0x109042
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  100627:	66 c1 ea 08          	shr    $0x8,%dx
		next_page_addr[1] = (next_addr ) & 0xFF;
  10062b:	a2 a1 90 10 00       	mov    %al,0x1090a1
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  100630:	88 15 a0 90 10 00    	mov    %dl,0x1090a0
  100636:	e9 70 ff ff ff       	jmp    1005ab <HCSR_enable+0x30>
	printk("EEPROM clean succesful\n");
  10063b:	68 29 64 10 00       	push   $0x106429
  100640:	e8 d0 06 00 00       	call   100d15 <printk>
  100645:	58                   	pop    %eax
	next_addr = 0;
  100646:	66 c7 05 42 90 10 00 	movw   $0x0,0x109042
  10064d:	00 00 
	next_page_addr[0] = 0x00;
  10064f:	c6 05 a0 90 10 00 00 	movb   $0x0,0x1090a0
	next_page_addr[1] = 0x00;
  100656:	c6 05 a1 90 10 00 00 	movb   $0x0,0x1090a1
	j=0;
  10065d:	c7 05 c4 a0 10 00 00 	movl   $0x0,0x10a0c4
  100664:	00 00 00 
	while(j<pages_to_write)
  100667:	0f b6 05 20 b7 10 00 	movzbl 0x10b720,%eax
  10066e:	3b 05 c4 a0 10 00    	cmp    0x10a0c4,%eax
  100674:	0f 8e 80 01 00 00    	jle    1007fa <HCSR_enable+0x27f>
		printk("inside hcsr while\n");
  10067a:	68 41 64 10 00       	push   $0x106441
		count=2;
  10067f:	c7 05 04 91 10 00 02 	movl   $0x2,0x109104
  100686:	00 00 00 
		printk("inside hcsr while\n");
  100689:	e8 87 06 00 00       	call   100d15 <printk>
		write_buf1[0] = next_page_addr[0];
  10068e:	a0 a0 90 10 00       	mov    0x1090a0,%al
  100693:	a2 c0 90 10 00       	mov    %al,0x1090c0
		write_buf1[1] = next_page_addr[1];
  100698:	a0 a1 90 10 00       	mov    0x1090a1,%al
		printk("inside hcsr while\n");
  10069d:	5b                   	pop    %ebx
		write_buf1[1] = next_page_addr[1];
  10069e:	a2 c1 90 10 00       	mov    %al,0x1090c1
		for(i=0;i<8;i++)
  1006a3:	c7 05 d0 a0 10 00 00 	movl   $0x0,0x10a0d0
  1006aa:	00 00 00 
  1006ad:	83 3d d0 a0 10 00 07 	cmpl   $0x7,0x10a0d0
  1006b4:	0f 8f d8 00 00 00    	jg     100792 <HCSR_enable+0x217>
		};
		u64_t  value;
	}  rv;

	/* rdtsc & cpuid clobbers eax, ebx, ecx and edx registers */
	__asm__ volatile (/* serialize */
  1006ba:	31 c0                	xor    %eax,%eax
  1006bc:	0f a2                	cpuid  
		);
	/*
	 * We cannot use "=A", since this would use %rax on x86_64 and
	 * return only the lower 32bits of the TSC
	 */
	__asm__ volatile ("rdtsc" : "=a" (rv.lo), "=d" (rv.hi));
  1006be:	0f 31                	rdtsc  
			cstamp = _tsc_read();
  1006c0:	a3 08 91 10 00       	mov    %eax,0x109108
			ret = sensor_sample_fetch(dev_hcsr04);
  1006c5:	a1 dc a0 10 00       	mov    0x10a0dc,%eax

static inline int _impl_sensor_sample_fetch(struct device *dev)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
  1006ca:	8b 50 04             	mov    0x4(%eax),%edx
  1006cd:	6a 19                	push   $0x19
  1006cf:	50                   	push   %eax
  1006d0:	ff 52 08             	call   *0x8(%edx)
  1006d3:	59                   	pop    %ecx
  1006d4:	a3 e0 a0 10 00       	mov    %eax,0x10a0e0
  1006d9:	5b                   	pop    %ebx
  1006da:	6a 01                	push   $0x1
  1006dc:	e8 8d 50 00 00       	call   10576e <_impl_k_sleep>
			ret =sensor_channel_get(dev_hcsr04, SENSOR_CHAN_ALL ,&val_dist);
  1006e1:	a1 dc a0 10 00       	mov    0x10a0dc,%eax
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
  1006e6:	8b 50 04             	mov    0x4(%eax),%edx
  1006e9:	c7 04 24 c8 a0 10 00 	movl   $0x10a0c8,(%esp)
  1006f0:	6a 19                	push   $0x19
  1006f2:	50                   	push   %eax
  1006f3:	ff 52 0c             	call   *0xc(%edx)
  1006f6:	83 c4 0c             	add    $0xc,%esp
			printk("hscr dist         :%llu\n",val_dist.val1);
  1006f9:	ff 35 c8 a0 10 00    	pushl  0x10a0c8
			ret =sensor_channel_get(dev_hcsr04, SENSOR_CHAN_ALL ,&val_dist);
  1006ff:	a3 e0 a0 10 00       	mov    %eax,0x10a0e0
			printk("hscr dist         :%llu\n",val_dist.val1);
  100704:	68 54 64 10 00       	push   $0x106454
  100709:	e8 07 06 00 00       	call   100d15 <printk>
  10070e:	58                   	pop    %eax
  10070f:	5a                   	pop    %edx
			cstamp = cstamp - enable_time;			
  100710:	8b 15 08 91 10 00    	mov    0x109108,%edx
  100716:	2b 15 0c 91 10 00    	sub    0x10910c,%edx
			write_buf1[count+0] = ((cstamp) & 0xFF);
  10071c:	a1 04 91 10 00       	mov    0x109104,%eax
			write_buf1[count+1] = ((cstamp>>8) & 0xFF);
  100721:	89 d1                	mov    %edx,%ecx
			write_buf1[count+0] = ((cstamp) & 0xFF);
  100723:	88 90 c0 90 10 00    	mov    %dl,0x1090c0(%eax)
			write_buf1[count+1] = ((cstamp>>8) & 0xFF);
  100729:	c1 e9 08             	shr    $0x8,%ecx
			cstamp = cstamp - enable_time;			
  10072c:	89 15 08 91 10 00    	mov    %edx,0x109108
			write_buf1[count+1] = ((cstamp>>8) & 0xFF);
  100732:	88 88 c1 90 10 00    	mov    %cl,0x1090c1(%eax)
			write_buf1[count+2] = ((cstamp>>16) & 0xFF);
  100738:	89 d1                	mov    %edx,%ecx
			write_buf1[count+3] = ((cstamp>>24) & 0xFF);
  10073a:	c1 ea 18             	shr    $0x18,%edx
			count=count+8;
  10073d:	83 c0 08             	add    $0x8,%eax
			write_buf1[count+3] = ((cstamp>>24) & 0xFF);
  100740:	88 90 bb 90 10 00    	mov    %dl,0x1090bb(%eax)
			write_buf1[count+4] = ((val_dist.val1) & 0xFF);
  100746:	8b 15 c8 a0 10 00    	mov    0x10a0c8,%edx
			write_buf1[count+2] = ((cstamp>>16) & 0xFF);
  10074c:	c1 e9 10             	shr    $0x10,%ecx
			write_buf1[count+4] = ((val_dist.val1) & 0xFF);
  10074f:	88 90 bc 90 10 00    	mov    %dl,0x1090bc(%eax)
			write_buf1[count+2] = ((cstamp>>16) & 0xFF);
  100755:	88 88 ba 90 10 00    	mov    %cl,0x1090ba(%eax)
			write_buf1[count+5] = ((val_dist.val1 >> 8) & 0xFF);
  10075b:	89 d1                	mov    %edx,%ecx
  10075d:	c1 f9 08             	sar    $0x8,%ecx
  100760:	6a 0a                	push   $0xa
  100762:	88 88 bd 90 10 00    	mov    %cl,0x1090bd(%eax)
			write_buf1[count+6] = ((val_dist.val1 >> 16) & 0xFF);
  100768:	89 d1                	mov    %edx,%ecx
  10076a:	c1 f9 10             	sar    $0x10,%ecx
			write_buf1[count+7] = ((val_dist.val1 >> 24) & 0xFF);
  10076d:	c1 ea 18             	shr    $0x18,%edx
			write_buf1[count+6] = ((val_dist.val1 >> 16) & 0xFF);
  100770:	88 88 be 90 10 00    	mov    %cl,0x1090be(%eax)
			write_buf1[count+7] = ((val_dist.val1 >> 24) & 0xFF);
  100776:	88 90 bf 90 10 00    	mov    %dl,0x1090bf(%eax)
			count=count+8;
  10077c:	a3 04 91 10 00       	mov    %eax,0x109104
  100781:	e8 e8 4f 00 00       	call   10576e <_impl_k_sleep>
  100786:	59                   	pop    %ecx
		for(i=0;i<8;i++)
  100787:	ff 05 d0 a0 10 00    	incl   0x10a0d0
  10078d:	e9 1b ff ff ff       	jmp    1006ad <HCSR_enable+0x132>
		ret =flash_write(dev_eeprom, EEPROM_OFFSET, write_buf1,sizeof(write_buf1));       //send the address+data to write
  100792:	a1 e4 a0 10 00       	mov    0x10a0e4,%eax
  100797:	8b 50 04             	mov    0x4(%eax),%edx
  10079a:	6a 42                	push   $0x42
  10079c:	68 c0 90 10 00       	push   $0x1090c0
  1007a1:	6a 00                	push   $0x0
  1007a3:	50                   	push   %eax
  1007a4:	ff 52 04             	call   *0x4(%edx)
  1007a7:	83 c4 10             	add    $0x10,%esp
  1007aa:	a3 e0 a0 10 00       	mov    %eax,0x10a0e0
  1007af:	6a 01                	push   $0x1
  1007b1:	e8 b8 4f 00 00       	call   10576e <_impl_k_sleep>
		next_addr = next_addr+64;
  1007b6:	66 a1 42 90 10 00    	mov    0x109042,%ax
		printk("-----------------------------\n");
  1007bc:	c7 04 24 6d 64 10 00 	movl   $0x10646d,(%esp)
		next_addr = next_addr+64;
  1007c3:	83 c0 40             	add    $0x40,%eax
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  1007c6:	89 c2                	mov    %eax,%edx
		next_addr = next_addr+64;
  1007c8:	66 a3 42 90 10 00    	mov    %ax,0x109042
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  1007ce:	66 c1 ea 08          	shr    $0x8,%dx
		next_page_addr[1] = (next_addr ) & 0xFF;
  1007d2:	a2 a1 90 10 00       	mov    %al,0x1090a1
		next_page_addr[0] = (next_addr >> 8) & 0xFF;
  1007d7:	88 15 a0 90 10 00    	mov    %dl,0x1090a0
		printk("-----------------------------\n");
  1007dd:	e8 33 05 00 00       	call   100d15 <printk>
  1007e2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1007e9:	e8 80 4f 00 00       	call   10576e <_impl_k_sleep>
  1007ee:	5a                   	pop    %edx
		j++;
  1007ef:	ff 05 c4 a0 10 00    	incl   0x10a0c4
  1007f5:	e9 6d fe ff ff       	jmp    100667 <HCSR_enable+0xec>
	printk("WRITE DONE\n");
  1007fa:	68 8c 64 10 00       	push   $0x10648c
  1007ff:	e8 11 05 00 00       	call   100d15 <printk>
  100804:	58                   	pop    %eax
}
  100805:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100808:	c9                   	leave  
  100809:	c3                   	ret    

0010080a <shell_start>:
{
  10080a:	55                   	push   %ebp
  10080b:	89 e5                	mov    %esp,%ebp
  10080d:	53                   	push   %ebx
    printk("SHELL START WORKING\n");
  10080e:	68 98 64 10 00       	push   $0x106498
{
  100813:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    printk("SHELL START WORKING\n");
  100816:	e8 fa 04 00 00       	call   100d15 <printk>
  10081b:	58                   	pop    %eax
	if(argc != 2)
  10081c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
  100820:	74 07                	je     100829 <shell_start+0x1f>
		printk("Enter one argument");
  100822:	68 e0 62 10 00       	push   $0x1062e0
  100827:	eb 53                	jmp    10087c <shell_start+0x72>
	pages_to_write = atoi(argv[num]);
  100829:	ff 73 04             	pushl  0x4(%ebx)
  10082c:	e8 88 f9 ff ff       	call   1001b9 <atoi>
  100831:	5a                   	pop    %edx
	if(atoi(argv[num]) == 0)
  100832:	ff 73 04             	pushl  0x4(%ebx)
	pages_to_write = atoi(argv[num]);
  100835:	a2 20 b7 10 00       	mov    %al,0x10b720
	if(atoi(argv[num]) == 0)
  10083a:	e8 7a f9 ff ff       	call   1001b9 <atoi>
  10083f:	59                   	pop    %ecx
  100840:	85 c0                	test   %eax,%eax
  100842:	75 0d                	jne    100851 <shell_start+0x47>
	printk(" No Pages Written\n");
  100844:	68 ad 64 10 00       	push   $0x1064ad
  100849:	e8 c7 04 00 00       	call   100d15 <printk>
  10084e:	59                   	pop    %ecx
  10084f:	eb 38                	jmp    100889 <shell_start+0x7f>
	else if(atoi(argv[num]) <= 512)
  100851:	ff 73 04             	pushl  0x4(%ebx)
  100854:	e8 60 f9 ff ff       	call   1001b9 <atoi>
  100859:	5a                   	pop    %edx
  10085a:	3d 00 02 00 00       	cmp    $0x200,%eax
  10085f:	7f 16                	jg     100877 <shell_start+0x6d>
			printk(" Pages to Write: %d\n", pages_to_write);
  100861:	0f b6 05 20 b7 10 00 	movzbl 0x10b720,%eax
  100868:	50                   	push   %eax
  100869:	68 c0 64 10 00       	push   $0x1064c0
  10086e:	e8 a2 04 00 00       	call   100d15 <printk>
  100873:	59                   	pop    %ecx
  100874:	5b                   	pop    %ebx
  100875:	eb 12                	jmp    100889 <shell_start+0x7f>
		printk(" Enter pages <= 512\n");
  100877:	68 d5 64 10 00       	push   $0x1064d5
  10087c:	e8 94 04 00 00       	call   100d15 <printk>
  100881:	5a                   	pop    %edx
		return 1;
  100882:	b8 01 00 00 00       	mov    $0x1,%eax
  100887:	eb 1d                	jmp    1008a6 <shell_start+0x9c>
	__asm__ volatile (/* serialize */
  100889:	31 c0                	xor    %eax,%eax
  10088b:	0f a2                	cpuid  
	__asm__ volatile ("rdtsc" : "=a" (rv.lo), "=d" (rv.hi));
  10088d:	0f 31                	rdtsc  
	enable_time = _tsc_read();
  10088f:	a3 0c 91 10 00       	mov    %eax,0x10910c
	HCSR_enable();
  100894:	e8 e2 fc ff ff       	call   10057b <HCSR_enable>
    printk("SHELL START FINISHED\n");
  100899:	68 ea 64 10 00       	push   $0x1064ea
  10089e:	e8 72 04 00 00       	call   100d15 <printk>
  1008a3:	58                   	pop    %eax
  1008a4:	31 c0                	xor    %eax,%eax
}
  1008a6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1008a9:	c9                   	leave  
  1008aa:	c3                   	ret    

001008ab <main>:




void main()
{
  1008ab:	55                   	push   %ebp
  1008ac:	89 e5                	mov    %esp,%ebp
	   SHELL_REGISTER(MY_SHELL_MODULE, commands);
	   printk("MAIN ENDED\n");
  1008ae:	68 00 65 10 00       	push   $0x106500
  1008b3:	e8 5d 04 00 00       	call   100d15 <printk>
  1008b8:	58                   	pop    %eax
}
  1008b9:	c9                   	leave  
  1008ba:	c3                   	ret    

001008bb <_nop_char_out>:
 * @param c Character to swallow
 *
 * @return 0
 */
static int _nop_char_out(int c)
{
  1008bb:	55                   	push   %ebp
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
  1008bc:	31 c0                	xor    %eax,%eax
{
  1008be:	89 e5                	mov    %esp,%ebp
}
  1008c0:	5d                   	pop    %ebp
  1008c1:	c3                   	ret    

001008c2 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
  1008c2:	55                   	push   %ebp
  1008c3:	89 e5                	mov    %esp,%ebp
  1008c5:	8b 45 0c             	mov    0xc(%ebp),%eax
	struct out_context *ctx = ctx_p;

	ctx->count++;
  1008c8:	ff 00                	incl   (%eax)
	return _char_out(c);
}
  1008ca:	5d                   	pop    %ebp
	return _char_out(c);
  1008cb:	ff 25 24 b7 10 00    	jmp    *0x10b724

001008d1 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
  1008d1:	55                   	push   %ebp
  1008d2:	89 e5                	mov    %esp,%ebp
  1008d4:	57                   	push   %edi
  1008d5:	56                   	push   %esi
  1008d6:	53                   	push   %ebx
  1008d7:	83 ec 18             	sub    $0x18,%esp
  1008da:	89 c7                	mov    %eax,%edi
  1008dc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1008df:	89 d6                	mov    %edx,%esi
  1008e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1008e4:	85 c0                	test   %eax,%eax
  1008e6:	7f 07                	jg     1008ef <_printk_dec_ulong+0x1e>
  1008e8:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
  1008ef:	31 db                	xor    %ebx,%ebx
  1008f1:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1008f4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  1008f8:	0f 94 c3             	sete   %bl
  1008fb:	4b                   	dec    %ebx
  1008fc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
  100903:	83 e3 f0             	and    $0xfffffff0,%ebx
  100906:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%ebp)
  10090d:	83 c3 30             	add    $0x30,%ebx
  100910:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  100917:	c7 45 ec ff c9 9a 3b 	movl   $0x3b9ac9ff,-0x14(%ebp)
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
  10091e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100921:	39 55 ec             	cmp    %edx,-0x14(%ebp)
  100924:	72 06                	jb     10092c <_printk_dec_ulong+0x5b>
  100926:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  10092a:	74 22                	je     10094e <_printk_dec_ulong+0x7d>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
  10092c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10092f:	31 d2                	xor    %edx,%edx
  100931:	56                   	push   %esi
  100932:	8d 48 01             	lea    0x1(%eax),%ecx
  100935:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100938:	f7 f1                	div    %ecx
  10093a:	83 c0 30             	add    $0x30,%eax
  10093d:	50                   	push   %eax
  10093e:	ff d7                	call   *%edi
  100940:	59                   	pop    %ecx
			digits++;
  100941:	ff 45 e0             	incl   -0x20(%ebp)
			out((int)((remainder / (pos + 1)) + 48), ctx);
  100944:	58                   	pop    %eax
			found_largest_digit = 1;
  100945:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
  10094c:	eb 1e                	jmp    10096c <_printk_dec_ulong+0x9b>
		} else if (remaining <= min_width
  10094e:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100951:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
  100954:	7c 0f                	jl     100965 <_printk_dec_ulong+0x94>
  100956:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
  10095a:	77 09                	ja     100965 <_printk_dec_ulong+0x94>
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
  10095c:	56                   	push   %esi
  10095d:	53                   	push   %ebx
  10095e:	ff d7                	call   *%edi
			digits++;
  100960:	ff 45 e0             	incl   -0x20(%ebp)
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
  100963:	58                   	pop    %eax
  100964:	5a                   	pop    %edx
  100965:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		}
		remaining--;
		remainder %= (pos + 1);
  10096c:	8b 45 ec             	mov    -0x14(%ebp),%eax
		remaining--;
  10096f:	ff 4d dc             	decl   -0x24(%ebp)
		remainder %= (pos + 1);
  100972:	40                   	inc    %eax
  100973:	89 c2                	mov    %eax,%edx
  100975:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100978:	89 d1                	mov    %edx,%ecx
  10097a:	31 d2                	xor    %edx,%edx
  10097c:	f7 f1                	div    %ecx
  10097e:	89 55 f0             	mov    %edx,-0x10(%ebp)
		pos /= 10;
  100981:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100984:	31 d2                	xor    %edx,%edx
  100986:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10098b:	f7 f1                	div    %ecx
  10098d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	while (pos >= 9) {
  100990:	83 7d dc 01          	cmpl   $0x1,-0x24(%ebp)
  100994:	75 88                	jne    10091e <_printk_dec_ulong+0x4d>
	}
	out((int)(remainder + 48), ctx);
  100996:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100999:	56                   	push   %esi
  10099a:	83 c1 30             	add    $0x30,%ecx
  10099d:	51                   	push   %ecx
  10099e:	ff d7                	call   *%edi
  1009a0:	59                   	pop    %ecx
  1009a1:	5b                   	pop    %ebx

	if (padding == PAD_SPACE_AFTER) {
  1009a2:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
  1009a6:	75 14                	jne    1009bc <_printk_dec_ulong+0xeb>
		remaining = min_width - digits;
  1009a8:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  1009ab:	2b 5d e0             	sub    -0x20(%ebp),%ebx
		while (remaining-- > 0) {
  1009ae:	85 db                	test   %ebx,%ebx
  1009b0:	7e 0a                	jle    1009bc <_printk_dec_ulong+0xeb>
			out(' ', ctx);
  1009b2:	56                   	push   %esi
  1009b3:	4b                   	dec    %ebx
  1009b4:	6a 20                	push   $0x20
  1009b6:	ff d7                	call   *%edi
  1009b8:	58                   	pop    %eax
  1009b9:	5a                   	pop    %edx
  1009ba:	eb f2                	jmp    1009ae <_printk_dec_ulong+0xdd>
		}
	}
}
  1009bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1009bf:	5b                   	pop    %ebx
  1009c0:	5e                   	pop    %esi
  1009c1:	5f                   	pop    %edi
  1009c2:	5d                   	pop    %ebp
  1009c3:	c3                   	ret    

001009c4 <__printk_hook_install>:
{
  1009c4:	55                   	push   %ebp
  1009c5:	89 e5                	mov    %esp,%ebp
	_char_out = fn;
  1009c7:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1009ca:	5d                   	pop    %ebp
	_char_out = fn;
  1009cb:	a3 24 b7 10 00       	mov    %eax,0x10b724
}
  1009d0:	c3                   	ret    

001009d1 <_vprintk>:
{
  1009d1:	55                   	push   %ebp
  1009d2:	89 e5                	mov    %esp,%ebp
  1009d4:	57                   	push   %edi
  1009d5:	56                   	push   %esi
  1009d6:	53                   	push   %ebx
  1009d7:	83 ec 1c             	sub    $0x1c,%esp
	int might_format = 0; /* 1 if encountered a '%' */
  1009da:	31 ff                	xor    %edi,%edi
{
  1009dc:	8b 5d 14             	mov    0x14(%ebp),%ebx
	int long_ctr = 0;
  1009df:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int min_width = -1;
  1009e6:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
	enum pad_type padding = PAD_NONE;
  1009ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	while (*fmt) {
  1009f4:	8b 45 10             	mov    0x10(%ebp),%eax
  1009f7:	0f be 00             	movsbl (%eax),%eax
  1009fa:	84 c0                	test   %al,%al
  1009fc:	0f 84 e4 02 00 00    	je     100ce6 <_vprintk+0x315>
		if (!might_format) {
  100a02:	85 ff                	test   %edi,%edi
  100a04:	75 16                	jne    100a1c <_vprintk+0x4b>
			if (*fmt != '%') {
  100a06:	3c 25                	cmp    $0x25,%al
  100a08:	0f 84 a7 02 00 00    	je     100cb5 <_vprintk+0x2e4>
				out((int)*fmt, ctx);
  100a0e:	ff 75 0c             	pushl  0xc(%ebp)
  100a11:	50                   	push   %eax
  100a12:	ff 55 08             	call   *0x8(%ebp)
  100a15:	58                   	pop    %eax
  100a16:	5a                   	pop    %edx
  100a17:	e9 c2 02 00 00       	jmp    100cde <_vprintk+0x30d>
			switch (*fmt) {
  100a1c:	3c 64                	cmp    $0x64,%al
  100a1e:	0f 84 f5 00 00 00    	je     100b19 <_vprintk+0x148>
  100a24:	7f 50                	jg     100a76 <_vprintk+0xa5>
  100a26:	3c 39                	cmp    $0x39,%al
  100a28:	7f 2a                	jg     100a54 <_vprintk+0x83>
  100a2a:	3c 31                	cmp    $0x31,%al
  100a2c:	0f 8d b3 00 00 00    	jge    100ae5 <_vprintk+0x114>
  100a32:	3c 2d                	cmp    $0x2d,%al
  100a34:	0f 84 8d 00 00 00    	je     100ac7 <_vprintk+0xf6>
  100a3a:	3c 30                	cmp    $0x30,%al
  100a3c:	0f 84 91 00 00 00    	je     100ad3 <_vprintk+0x102>
  100a42:	3c 25                	cmp    $0x25,%al
  100a44:	0f 85 50 02 00 00    	jne    100c9a <_vprintk+0x2c9>
				out((int)'%', ctx);
  100a4a:	ff 75 0c             	pushl  0xc(%ebp)
  100a4d:	6a 25                	push   $0x25
  100a4f:	e9 5a 02 00 00       	jmp    100cae <_vprintk+0x2dd>
			switch (*fmt) {
  100a54:	3c 58                	cmp    $0x58,%al
  100a56:	0f 84 32 01 00 00    	je     100b8e <_vprintk+0x1bd>
  100a5c:	3c 63                	cmp    $0x63,%al
  100a5e:	0f 85 36 02 00 00    	jne    100c9a <_vprintk+0x2c9>
				out(c, ctx);
  100a64:	ff 75 0c             	pushl  0xc(%ebp)
  100a67:	ff 33                	pushl  (%ebx)
				int c = va_arg(ap, int);
  100a69:	8d 73 04             	lea    0x4(%ebx),%esi
				out(c, ctx);
  100a6c:	ff 55 08             	call   *0x8(%ebp)
  100a6f:	5f                   	pop    %edi
  100a70:	58                   	pop    %eax
  100a71:	e9 64 02 00 00       	jmp    100cda <_vprintk+0x309>
			switch (*fmt) {
  100a76:	3c 70                	cmp    $0x70,%al
  100a78:	0f 84 ee 00 00 00    	je     100b6c <_vprintk+0x19b>
  100a7e:	7f 14                	jg     100a94 <_vprintk+0xc3>
  100a80:	3c 69                	cmp    $0x69,%al
  100a82:	0f 84 91 00 00 00    	je     100b19 <_vprintk+0x148>
  100a88:	3c 6c                	cmp    $0x6c,%al
  100a8a:	0f 84 81 00 00 00    	je     100b11 <_vprintk+0x140>
  100a90:	3c 68                	cmp    $0x68,%al
  100a92:	eb 28                	jmp    100abc <_vprintk+0xeb>
  100a94:	3c 75                	cmp    $0x75,%al
  100a96:	0f 84 aa 00 00 00    	je     100b46 <_vprintk+0x175>
  100a9c:	7f 14                	jg     100ab2 <_vprintk+0xe1>
  100a9e:	3c 73                	cmp    $0x73,%al
  100aa0:	0f 85 f4 01 00 00    	jne    100c9a <_vprintk+0x2c9>
				char *s = va_arg(ap, char *);
  100aa6:	8b 3b                	mov    (%ebx),%edi
  100aa8:	8d 73 04             	lea    0x4(%ebx),%esi
  100aab:	89 fb                	mov    %edi,%ebx
				while (*s)
  100aad:	e9 b5 01 00 00       	jmp    100c67 <_vprintk+0x296>
			switch (*fmt) {
  100ab2:	3c 78                	cmp    $0x78,%al
  100ab4:	0f 84 d4 00 00 00    	je     100b8e <_vprintk+0x1bd>
  100aba:	3c 7a                	cmp    $0x7a,%al
  100abc:	0f 84 1c 02 00 00    	je     100cde <_vprintk+0x30d>
  100ac2:	e9 d3 01 00 00       	jmp    100c9a <_vprintk+0x2c9>
				padding = PAD_SPACE_AFTER;
  100ac7:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
  100ace:	e9 0b 02 00 00       	jmp    100cde <_vprintk+0x30d>
				if (min_width < 0 && padding == PAD_NONE) {
  100ad3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100ad6:	c1 ea 1f             	shr    $0x1f,%edx
  100ad9:	74 0a                	je     100ae5 <_vprintk+0x114>
  100adb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  100adf:	0f 84 ec 01 00 00    	je     100cd1 <_vprintk+0x300>
				if (min_width < 0) {
  100ae5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  100ae9:	79 05                	jns    100af0 <_vprintk+0x11f>
					min_width = *fmt - '0';
  100aeb:	83 e8 30             	sub    $0x30,%eax
  100aee:	eb 08                	jmp    100af8 <_vprintk+0x127>
					min_width = 10 * min_width + *fmt - '0';
  100af0:	6b 55 f0 0a          	imul   $0xa,-0x10(%ebp),%edx
  100af4:	8d 44 10 d0          	lea    -0x30(%eax,%edx,1),%eax
  100af8:	89 45 f0             	mov    %eax,-0x10(%ebp)
				if (padding == PAD_NONE) {
  100afb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  100aff:	0f 85 d9 01 00 00    	jne    100cde <_vprintk+0x30d>
					padding = PAD_SPACE_BEFORE;
  100b05:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
  100b0c:	e9 cd 01 00 00       	jmp    100cde <_vprintk+0x30d>
				long_ctr++;
  100b11:	ff 45 e8             	incl   -0x18(%ebp)
  100b14:	e9 c5 01 00 00       	jmp    100cde <_vprintk+0x30d>
					d = va_arg(ap, long);
  100b19:	8b 33                	mov    (%ebx),%esi
				if (long_ctr < 2) {
  100b1b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
  100b1f:	7f 05                	jg     100b26 <_vprintk+0x155>
					d = va_arg(ap, long);
  100b21:	83 c3 04             	add    $0x4,%ebx
  100b24:	eb 03                	jmp    100b29 <_vprintk+0x158>
					d = (long)va_arg(ap, long long);
  100b26:	83 c3 08             	add    $0x8,%ebx
				if (d < 0) {
  100b29:	85 f6                	test   %esi,%esi
  100b2b:	79 0f                	jns    100b3c <_vprintk+0x16b>
					out((int)'-', ctx);
  100b2d:	ff 75 0c             	pushl  0xc(%ebp)
  100b30:	6a 2d                	push   $0x2d
  100b32:	ff 55 08             	call   *0x8(%ebp)
					min_width--;
  100b35:	ff 4d f0             	decl   -0x10(%ebp)
					out((int)'-', ctx);
  100b38:	59                   	pop    %ecx
					d = -d;
  100b39:	f7 de                	neg    %esi
					out((int)'-', ctx);
  100b3b:	5f                   	pop    %edi
				_printk_dec_ulong(out, ctx, d, padding,
  100b3c:	ff 75 f0             	pushl  -0x10(%ebp)
  100b3f:	89 f1                	mov    %esi,%ecx
  100b41:	ff 75 ec             	pushl  -0x14(%ebp)
  100b44:	eb 16                	jmp    100b5c <_vprintk+0x18b>
					u = va_arg(ap, unsigned long);
  100b46:	8b 0b                	mov    (%ebx),%ecx
				if (long_ctr < 2) {
  100b48:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
  100b4c:	7f 05                	jg     100b53 <_vprintk+0x182>
					u = va_arg(ap, unsigned long);
  100b4e:	83 c3 04             	add    $0x4,%ebx
  100b51:	eb 03                	jmp    100b56 <_vprintk+0x185>
					u = (unsigned long)va_arg(ap,
  100b53:	83 c3 08             	add    $0x8,%ebx
				_printk_dec_ulong(out, ctx, u, padding,
  100b56:	ff 75 f0             	pushl  -0x10(%ebp)
  100b59:	ff 75 ec             	pushl  -0x14(%ebp)
  100b5c:	8b 55 0c             	mov    0xc(%ebp),%edx
  100b5f:	8b 45 08             	mov    0x8(%ebp),%eax
  100b62:	e8 6a fd ff ff       	call   1008d1 <_printk_dec_ulong>
  100b67:	e9 45 01 00 00       	jmp    100cb1 <_vprintk+0x2e0>
				  out('0', ctx);
  100b6c:	ff 75 0c             	pushl  0xc(%ebp)
  100b6f:	6a 30                	push   $0x30
  100b71:	ff 55 08             	call   *0x8(%ebp)
  100b74:	59                   	pop    %ecx
  100b75:	5e                   	pop    %esi
				  out('x', ctx);
  100b76:	ff 75 0c             	pushl  0xc(%ebp)
  100b79:	6a 78                	push   $0x78
  100b7b:	ff 55 08             	call   *0x8(%ebp)
  100b7e:	58                   	pop    %eax
				  min_width = 8;
  100b7f:	c7 45 f0 08 00 00 00 	movl   $0x8,-0x10(%ebp)
				  out('x', ctx);
  100b86:	5a                   	pop    %edx
				  padding = PAD_ZERO_BEFORE;
  100b87:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
					x = va_arg(ap, unsigned long);
  100b8e:	8b 03                	mov    (%ebx),%eax
				if (long_ctr < 2) {
  100b90:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
					x = va_arg(ap, unsigned long);
  100b94:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if (long_ctr < 2) {
  100b97:	7f 05                	jg     100b9e <_vprintk+0x1cd>
					x = va_arg(ap, unsigned long);
  100b99:	83 c3 04             	add    $0x4,%ebx
  100b9c:	eb 03                	jmp    100ba1 <_vprintk+0x1d0>
					x = (unsigned long)va_arg(ap,
  100b9e:	83 c3 08             	add    $0x8,%ebx
	int remaining = 8; /* 8 digits max */
  100ba1:	ba 08 00 00 00       	mov    $0x8,%edx
	int digits = 0;
  100ba6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	int found_largest_digit = 0;
  100bad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int size = sizeof(num) * 2;
  100bb4:	be 08 00 00 00       	mov    $0x8,%esi
		char nibble = (num >> ((size - 1) << 2) & 0xf);
  100bb9:	4e                   	dec    %esi
  100bba:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100bbd:	8d 0c b5 00 00 00 00 	lea    0x0(,%esi,4),%ecx
  100bc4:	d3 e8                	shr    %cl,%eax
		if (nibble || found_largest_digit || size == 1) {
  100bc6:	24 0f                	and    $0xf,%al
  100bc8:	75 0e                	jne    100bd8 <_vprintk+0x207>
  100bca:	f6 45 e4 01          	testb  $0x1,-0x1c(%ebp)
  100bce:	75 08                	jne    100bd8 <_vprintk+0x207>
  100bd0:	85 f6                	test   %esi,%esi
  100bd2:	75 2f                	jne    100c03 <_vprintk+0x232>
			nibble += nibble > 9 ? 87 : 48;
  100bd4:	b1 30                	mov    $0x30,%cl
  100bd6:	eb 0c                	jmp    100be4 <_vprintk+0x213>
  100bd8:	3c 09                	cmp    $0x9,%al
  100bda:	0f 9f c1             	setg   %cl
  100bdd:	49                   	dec    %ecx
  100bde:	83 e1 d9             	and    $0xffffffd9,%ecx
  100be1:	83 c1 57             	add    $0x57,%ecx
			out((int)nibble, ctx);
  100be4:	ff 75 0c             	pushl  0xc(%ebp)
			nibble += nibble > 9 ? 87 : 48;
  100be7:	01 c1                	add    %eax,%ecx
  100be9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
			out((int)nibble, ctx);
  100bec:	0f b6 c9             	movzbl %cl,%ecx
  100bef:	51                   	push   %ecx
  100bf0:	ff 55 08             	call   *0x8(%ebp)
  100bf3:	58                   	pop    %eax
  100bf4:	5a                   	pop    %edx
			digits++;
  100bf5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100bf8:	ff 45 d8             	incl   -0x28(%ebp)
  100bfb:	89 55 dc             	mov    %edx,-0x24(%ebp)
			found_largest_digit = 1;
  100bfe:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  100c01:	eb 2f                	jmp    100c32 <_vprintk+0x261>
		if (remaining-- <= min_width) {
  100c03:	8d 42 ff             	lea    -0x1(%edx),%eax
  100c06:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100c0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100c10:	39 55 f0             	cmp    %edx,-0x10(%ebp)
  100c13:	7c 1d                	jl     100c32 <_vprintk+0x261>
			if (padding == PAD_ZERO_BEFORE) {
  100c15:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
  100c19:	75 07                	jne    100c22 <_vprintk+0x251>
				out('0', ctx);
  100c1b:	ff 75 0c             	pushl  0xc(%ebp)
  100c1e:	6a 30                	push   $0x30
  100c20:	eb 0b                	jmp    100c2d <_vprintk+0x25c>
			} else if (padding == PAD_SPACE_BEFORE) {
  100c22:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
  100c26:	75 0a                	jne    100c32 <_vprintk+0x261>
				out(' ', ctx);
  100c28:	ff 75 0c             	pushl  0xc(%ebp)
  100c2b:	6a 20                	push   $0x20
  100c2d:	ff 55 08             	call   *0x8(%ebp)
  100c30:	59                   	pop    %ecx
  100c31:	58                   	pop    %eax
	for (; size; size--) {
  100c32:	85 f6                	test   %esi,%esi
  100c34:	74 08                	je     100c3e <_vprintk+0x26d>
  100c36:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100c39:	e9 7b ff ff ff       	jmp    100bb9 <_vprintk+0x1e8>
			might_format = 0;
  100c3e:	31 ff                	xor    %edi,%edi
	if (padding == PAD_SPACE_AFTER) {
  100c40:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
  100c44:	0f 85 94 00 00 00    	jne    100cde <_vprintk+0x30d>
		remaining = min_width * 2 - digits;
  100c4a:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100c4d:	01 f6                	add    %esi,%esi
  100c4f:	2b 75 d8             	sub    -0x28(%ebp),%esi
		while (remaining-- > 0) {
  100c52:	85 f6                	test   %esi,%esi
  100c54:	0f 8e 82 00 00 00    	jle    100cdc <_vprintk+0x30b>
			out(' ', ctx);
  100c5a:	ff 75 0c             	pushl  0xc(%ebp)
  100c5d:	4e                   	dec    %esi
  100c5e:	6a 20                	push   $0x20
  100c60:	ff 55 08             	call   *0x8(%ebp)
  100c63:	58                   	pop    %eax
  100c64:	5a                   	pop    %edx
  100c65:	eb eb                	jmp    100c52 <_vprintk+0x281>
				while (*s)
  100c67:	0f be 03             	movsbl (%ebx),%eax
  100c6a:	84 c0                	test   %al,%al
  100c6c:	74 0c                	je     100c7a <_vprintk+0x2a9>
					out((int)(*s++), ctx);
  100c6e:	ff 75 0c             	pushl  0xc(%ebp)
  100c71:	43                   	inc    %ebx
  100c72:	50                   	push   %eax
  100c73:	ff 55 08             	call   *0x8(%ebp)
  100c76:	59                   	pop    %ecx
  100c77:	58                   	pop    %eax
  100c78:	eb ed                	jmp    100c67 <_vprintk+0x296>
				if (padding == PAD_SPACE_AFTER) {
  100c7a:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
  100c7e:	75 5a                	jne    100cda <_vprintk+0x309>
					int remaining = min_width - (s - start);
  100c80:	29 fb                	sub    %edi,%ebx
  100c82:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100c85:	29 d8                	sub    %ebx,%eax
  100c87:	89 c3                	mov    %eax,%ebx
					while (remaining-- > 0) {
  100c89:	85 db                	test   %ebx,%ebx
  100c8b:	7e 4d                	jle    100cda <_vprintk+0x309>
						out(' ', ctx);
  100c8d:	ff 75 0c             	pushl  0xc(%ebp)
  100c90:	4b                   	dec    %ebx
  100c91:	6a 20                	push   $0x20
  100c93:	ff 55 08             	call   *0x8(%ebp)
  100c96:	58                   	pop    %eax
  100c97:	5a                   	pop    %edx
  100c98:	eb ef                	jmp    100c89 <_vprintk+0x2b8>
				out((int)'%', ctx);
  100c9a:	ff 75 0c             	pushl  0xc(%ebp)
  100c9d:	6a 25                	push   $0x25
  100c9f:	ff 55 08             	call   *0x8(%ebp)
  100ca2:	59                   	pop    %ecx
  100ca3:	5e                   	pop    %esi
				out((int)*fmt, ctx);
  100ca4:	ff 75 0c             	pushl  0xc(%ebp)
  100ca7:	8b 45 10             	mov    0x10(%ebp),%eax
  100caa:	0f be 00             	movsbl (%eax),%eax
  100cad:	50                   	push   %eax
  100cae:	ff 55 08             	call   *0x8(%ebp)
  100cb1:	58                   	pop    %eax
  100cb2:	5a                   	pop    %edx
  100cb3:	eb 27                	jmp    100cdc <_vprintk+0x30b>
				long_ctr = 0;
  100cb5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
				min_width = -1;
  100cbc:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
				padding = PAD_NONE;
  100cc3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
				might_format = 1;
  100cca:	bf 01 00 00 00       	mov    $0x1,%edi
  100ccf:	eb 0d                	jmp    100cde <_vprintk+0x30d>
					padding = PAD_ZERO_BEFORE;
  100cd1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
  100cd8:	eb 04                	jmp    100cde <_vprintk+0x30d>
				char *s = va_arg(ap, char *);
  100cda:	89 f3                	mov    %esi,%ebx
			might_format = 0;
  100cdc:	31 ff                	xor    %edi,%edi
		++fmt;
  100cde:	ff 45 10             	incl   0x10(%ebp)
  100ce1:	e9 0e fd ff ff       	jmp    1009f4 <_vprintk+0x23>
}
  100ce6:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100ce9:	5b                   	pop    %ebx
  100cea:	5e                   	pop    %esi
  100ceb:	5f                   	pop    %edi
  100cec:	5d                   	pop    %ebp
  100ced:	c3                   	ret    

00100cee <vprintk>:
{
  100cee:	55                   	push   %ebp
  100cef:	89 e5                	mov    %esp,%ebp
  100cf1:	50                   	push   %eax
	_vprintk(char_out, &ctx, fmt, ap);
  100cf2:	ff 75 0c             	pushl  0xc(%ebp)
  100cf5:	ff 75 08             	pushl  0x8(%ebp)
  100cf8:	8d 45 fc             	lea    -0x4(%ebp),%eax
	struct out_context ctx = { 0 };
  100cfb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	_vprintk(char_out, &ctx, fmt, ap);
  100d02:	50                   	push   %eax
  100d03:	68 c2 08 10 00       	push   $0x1008c2
  100d08:	e8 c4 fc ff ff       	call   1009d1 <_vprintk>
}
  100d0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
	_vprintk(char_out, &ctx, fmt, ap);
  100d10:	83 c4 10             	add    $0x10,%esp
}
  100d13:	c9                   	leave  
  100d14:	c3                   	ret    

00100d15 <printk>:
{
  100d15:	55                   	push   %ebp
  100d16:	89 e5                	mov    %esp,%ebp
	va_start(ap, fmt);
  100d18:	8d 45 0c             	lea    0xc(%ebp),%eax
	ret = vprintk(fmt, ap);
  100d1b:	50                   	push   %eax
  100d1c:	ff 75 08             	pushl  0x8(%ebp)
  100d1f:	e8 ca ff ff ff       	call   100cee <vprintk>
  100d24:	5a                   	pop    %edx
  100d25:	59                   	pop    %ecx
}
  100d26:	c9                   	leave  
  100d27:	c3                   	ret    

00100d28 <_ConfigAbsSyms>:
/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
  100d28:	55                   	push   %ebp
  100d29:	89 e5                	mov    %esp,%ebp
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SPI_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_ISA_IA32, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_PINMUX_GALILEO_EXP0_NAME, 1);

GEN_ABS_SYM_END
  100d2b:	5d                   	pop    %ebp
  100d2c:	c3                   	ret    

00100d2d <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
  100d2d:	55                   	push   %ebp
  100d2e:	89 e5                	mov    %esp,%ebp
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
  100d30:	68 68 65 10 00       	push   $0x106568
  100d35:	e8 67 06 00 00       	call   1013a1 <shell_init>
  100d3a:	58                   	pop    %eax
	return 0;
}
  100d3b:	31 c0                	xor    %eax,%eax
  100d3d:	c9                   	leave  
  100d3e:	c3                   	ret    

00100d3f <cmd_exit>:

	return set_default_module(argv[1]);
}

static int cmd_exit(int argc, char *argv[])
{
  100d3f:	55                   	push   %ebp
  100d40:	89 e5                	mov    %esp,%ebp
	if (argc == 1) {
  100d42:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  100d46:	75 0a                	jne    100d52 <cmd_exit+0x13>
		default_module = NULL;
  100d48:	c7 05 18 93 10 00 00 	movl   $0x0,0x109318
  100d4f:	00 00 00 
	}

	return 0;
}
  100d52:	31 c0                	xor    %eax,%eax
  100d54:	5d                   	pop    %ebp
  100d55:	c3                   	ret    

00100d56 <get_cmd>:
{
  100d56:	55                   	push   %ebp
  100d57:	89 e5                	mov    %esp,%ebp
  100d59:	57                   	push   %edi
  100d5a:	89 d7                	mov    %edx,%edi
  100d5c:	56                   	push   %esi
  100d5d:	53                   	push   %ebx
  100d5e:	89 c3                	mov    %eax,%ebx
	for (i = 0; cmds[i].cmd_name; i++) {
  100d60:	8b 03                	mov    (%ebx),%eax
  100d62:	89 de                	mov    %ebx,%esi
  100d64:	85 c0                	test   %eax,%eax
  100d66:	74 12                	je     100d7a <get_cmd+0x24>
		if (!strcmp(cmd_str, cmds[i].cmd_name)) {
  100d68:	50                   	push   %eax
  100d69:	57                   	push   %edi
  100d6a:	e8 19 f5 ff ff       	call   100288 <strcmp>
  100d6f:	83 c3 10             	add    $0x10,%ebx
  100d72:	5a                   	pop    %edx
  100d73:	85 c0                	test   %eax,%eax
  100d75:	59                   	pop    %ecx
  100d76:	75 e8                	jne    100d60 <get_cmd+0xa>
  100d78:	eb 02                	jmp    100d7c <get_cmd+0x26>
	return NULL;
  100d7a:	31 f6                	xor    %esi,%esi
}
  100d7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100d7f:	89 f0                	mov    %esi,%eax
  100d81:	5b                   	pop    %ebx
  100d82:	5e                   	pop    %esi
  100d83:	5f                   	pop    %edi
  100d84:	5d                   	pop    %ebp
  100d85:	c3                   	ret    

00100d86 <get_destination_module>:
{
  100d86:	55                   	push   %ebp
  100d87:	89 e5                	mov    %esp,%ebp
  100d89:	57                   	push   %edi
  100d8a:	56                   	push   %esi
  100d8b:	53                   	push   %ebx
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
  100d8c:	bb fc ba 10 00       	mov    $0x10bafc,%ebx
{
  100d91:	89 c7                	mov    %eax,%edi
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
  100d93:	81 eb f0 ba 10 00    	sub    $0x10baf0,%ebx
{
  100d99:	52                   	push   %edx
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
  100d9a:	c1 fb 02             	sar    $0x2,%ebx
  100d9d:	69 c3 ab aa aa aa    	imul   $0xaaaaaaab,%ebx,%eax
  100da3:	31 db                	xor    %ebx,%ebx
  100da5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100da8:	3b 5d f0             	cmp    -0x10(%ebp),%ebx
  100dab:	7d 23                	jge    100dd0 <get_destination_module+0x4a>
  100dad:	6b f3 0c             	imul   $0xc,%ebx,%esi
		if (!strncmp(module_str,
  100db0:	6a 14                	push   $0x14
  100db2:	ff b6 f0 ba 10 00    	pushl  0x10baf0(%esi)
  100db8:	57                   	push   %edi
  100db9:	e8 ed f4 ff ff       	call   1002ab <strncmp>
  100dbe:	83 c4 0c             	add    $0xc,%esp
  100dc1:	85 c0                	test   %eax,%eax
  100dc3:	75 08                	jne    100dcd <get_destination_module+0x47>
			return &__shell_cmd_start[i];
  100dc5:	8d 86 f0 ba 10 00    	lea    0x10baf0(%esi),%eax
  100dcb:	eb 05                	jmp    100dd2 <get_destination_module+0x4c>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
  100dcd:	43                   	inc    %ebx
  100dce:	eb d8                	jmp    100da8 <get_destination_module+0x22>
	return NULL;
  100dd0:	31 c0                	xor    %eax,%eax
}
  100dd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100dd5:	5b                   	pop    %ebx
  100dd6:	5e                   	pop    %esi
  100dd7:	5f                   	pop    %edi
  100dd8:	5d                   	pop    %ebp
  100dd9:	c3                   	ret    

00100dda <set_default_module>:
{
  100dda:	55                   	push   %ebp
  100ddb:	89 e5                	mov    %esp,%ebp
  100ddd:	53                   	push   %ebx
  100dde:	89 c3                	mov    %eax,%ebx
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
  100de0:	50                   	push   %eax
  100de1:	e8 8f f4 ff ff       	call   100275 <strlen>
  100de6:	5a                   	pop    %edx
  100de7:	83 f8 14             	cmp    $0x14,%eax
  100dea:	76 08                	jbe    100df4 <set_default_module+0x1a>
		printk("Module name %s is too long, default is not changed\n",
  100dec:	53                   	push   %ebx
  100ded:	68 70 65 10 00       	push   $0x106570
  100df2:	eb 11                	jmp    100e05 <set_default_module+0x2b>
	module = get_destination_module(name);
  100df4:	89 d8                	mov    %ebx,%eax
  100df6:	e8 8b ff ff ff       	call   100d86 <get_destination_module>
	if (!module) {
  100dfb:	85 c0                	test   %eax,%eax
  100dfd:	75 14                	jne    100e13 <set_default_module+0x39>
		printk("Illegal module %s, default is not changed\n", name);
  100dff:	53                   	push   %ebx
  100e00:	68 a4 65 10 00       	push   $0x1065a4
  100e05:	e8 0b ff ff ff       	call   100d15 <printk>
  100e0a:	59                   	pop    %ecx
		return -EINVAL;
  100e0b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
		printk("Illegal module %s, default is not changed\n", name);
  100e10:	5b                   	pop    %ebx
		return -EINVAL;
  100e11:	eb 28                	jmp    100e3b <set_default_module+0x61>
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
  100e13:	6a 14                	push   $0x14
  100e15:	53                   	push   %ebx
  100e16:	68 1c 93 10 00       	push   $0x10931c
	default_module = module;
  100e1b:	a3 18 93 10 00       	mov    %eax,0x109318
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
  100e20:	e8 fe f3 ff ff       	call   100223 <strncpy>
  100e25:	83 c4 0c             	add    $0xc,%esp
	strcat(default_module_prompt, "> ");
  100e28:	68 6d 65 10 00       	push   $0x10656d
  100e2d:	68 1c 93 10 00       	push   $0x10931c
  100e32:	e8 9f f4 ff ff       	call   1002d6 <strcat>
  100e37:	58                   	pop    %eax
	return 0;
  100e38:	31 c0                	xor    %eax,%eax
	strcat(default_module_prompt, "> ");
  100e3a:	5a                   	pop    %edx
}
  100e3b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100e3e:	c9                   	leave  
  100e3f:	c3                   	ret    

00100e40 <get_prompt>:
{
  100e40:	55                   	push   %ebp
	if (app_prompt_handler) {
  100e41:	a1 10 91 10 00       	mov    0x109110,%eax
{
  100e46:	89 e5                	mov    %esp,%ebp
	if (app_prompt_handler) {
  100e48:	85 c0                	test   %eax,%eax
  100e4a:	75 0b                	jne    100e57 <get_prompt+0x17>
	if (default_module) {
  100e4c:	a1 18 93 10 00       	mov    0x109318,%eax
  100e51:	85 c0                	test   %eax,%eax
  100e53:	75 0a                	jne    100e5f <get_prompt+0x1f>
  100e55:	eb 1e                	jmp    100e75 <get_prompt+0x35>
		str = app_prompt_handler();
  100e57:	ff d0                	call   *%eax
		if (str) {
  100e59:	85 c0                	test   %eax,%eax
  100e5b:	75 1d                	jne    100e7a <get_prompt+0x3a>
  100e5d:	eb ed                	jmp    100e4c <get_prompt+0xc>
		if (default_module->prompt) {
  100e5f:	8b 40 08             	mov    0x8(%eax),%eax
  100e62:	85 c0                	test   %eax,%eax
  100e64:	75 07                	jne    100e6d <get_prompt+0x2d>
		return default_module_prompt;
  100e66:	b8 1c 93 10 00       	mov    $0x10931c,%eax
  100e6b:	eb 0d                	jmp    100e7a <get_prompt+0x3a>
			ret = default_module->prompt();
  100e6d:	ff d0                	call   *%eax
			if (ret) {
  100e6f:	85 c0                	test   %eax,%eax
  100e71:	75 07                	jne    100e7a <get_prompt+0x3a>
  100e73:	eb f1                	jmp    100e66 <get_prompt+0x26>
	return prompt;
  100e75:	a1 34 93 10 00       	mov    0x109334,%eax
}
  100e7a:	5d                   	pop    %ebp
  100e7b:	c3                   	ret    

00100e7c <cmd_select>:
{
  100e7c:	55                   	push   %ebp
  100e7d:	89 e5                	mov    %esp,%ebp
  100e7f:	8b 45 0c             	mov    0xc(%ebp),%eax
	if (argc == 1) {
  100e82:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  100e86:	74 09                	je     100e91 <cmd_select+0x15>
	return set_default_module(argv[1]);
  100e88:	8b 40 04             	mov    0x4(%eax),%eax
}
  100e8b:	5d                   	pop    %ebp
	return set_default_module(argv[1]);
  100e8c:	e9 49 ff ff ff       	jmp    100dda <set_default_module>
}
  100e91:	31 c0                	xor    %eax,%eax
		default_module = NULL;
  100e93:	c7 05 18 93 10 00 00 	movl   $0x0,0x109318
  100e9a:	00 00 00 
}
  100e9d:	5d                   	pop    %ebp
  100e9e:	c3                   	ret    

00100e9f <completion>:
	/* only two parameters are possibles in case of no default module */
	return str ? dest : NULL;
}

static u8_t completion(char *line, u8_t len)
{
  100e9f:	55                   	push   %ebp
  100ea0:	89 e5                	mov    %esp,%ebp
  100ea2:	57                   	push   %edi
  100ea3:	56                   	push   %esi
  100ea4:	53                   	push   %ebx
  100ea5:	83 ec 2c             	sub    $0x2c,%esp
  100ea8:	8b 45 0c             	mov    0xc(%ebp),%eax
  100eab:	88 45 cf             	mov    %al,-0x31(%ebp)
	int common_chars = -1, space = 0;
	int i, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
  100eae:	3c 44                	cmp    $0x44,%al
  100eb0:	0f 87 f1 01 00 00    	ja     1010a7 <completion+0x208>

	/*
	 * line to completion is not ended by '\0' as the line that gets from
	 * k_fifo_get function
	 */
	line[len] = '\0';
  100eb6:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100eb9:	0f b6 c0             	movzbl %al,%eax
  100ebc:	89 ce                	mov    %ecx,%esi
  100ebe:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
	while (*str && *str == ' ') {
  100ec2:	8a 06                	mov    (%esi),%al
  100ec4:	3c 20                	cmp    $0x20,%al
  100ec6:	75 03                	jne    100ecb <completion+0x2c>
		str++;
  100ec8:	46                   	inc    %esi
  100ec9:	eb f7                	jmp    100ec2 <completion+0x23>
	if (!*str) {
  100ecb:	84 c0                	test   %al,%al
  100ecd:	0f 84 d4 01 00 00    	je     1010a7 <completion+0x208>
	if (default_module) {
  100ed3:	8b 1d 18 93 10 00    	mov    0x109318,%ebx
  100ed9:	85 db                	test   %ebx,%ebx
  100edb:	74 03                	je     100ee0 <completion+0x41>
  100edd:	89 75 d0             	mov    %esi,-0x30(%ebp)
	str = strchr(str, ' ');
  100ee0:	6a 20                	push   $0x20
  100ee2:	56                   	push   %esi
  100ee3:	e8 6b f3 ff ff       	call   100253 <strchr>
  100ee8:	59                   	pop    %ecx
	if (default_module) {
  100ee9:	83 3d 18 93 10 00 00 	cmpl   $0x0,0x109318
	str = strchr(str, ' ');
  100ef0:	5f                   	pop    %edi
  100ef1:	89 c7                	mov    %eax,%edi
	if (default_module) {
  100ef3:	74 0c                	je     100f01 <completion+0x62>
		return str ? dest : NULL;
  100ef5:	85 c0                	test   %eax,%eax
  100ef7:	0f 84 aa 01 00 00    	je     1010a7 <completion+0x208>
	module = get_completion_module(line, &command_prefix);
	if (!module) {
  100efd:	85 db                	test   %ebx,%ebx
  100eff:	eb 4e                	jmp    100f4f <completion+0xb0>
	if (!str) {
  100f01:	85 c0                	test   %eax,%eax
  100f03:	0f 84 9e 01 00 00    	je     1010a7 <completion+0x208>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
  100f09:	89 c3                	mov    %eax,%ebx
  100f0b:	29 f3                	sub    %esi,%ebx
  100f0d:	8d 43 01             	lea    0x1(%ebx),%eax
  100f10:	83 f8 13             	cmp    $0x13,%eax
  100f13:	0f 8f 8e 01 00 00    	jg     1010a7 <completion+0x208>
	strncpy(dest_str, start, (str - start + 1));
  100f19:	50                   	push   %eax
  100f1a:	56                   	push   %esi
  100f1b:	8d 75 e0             	lea    -0x20(%ebp),%esi
  100f1e:	56                   	push   %esi
  100f1f:	e8 ff f2 ff ff       	call   100223 <strncpy>
  100f24:	83 c4 0c             	add    $0xc,%esp
	dest = get_destination_module(dest_str);
  100f27:	89 f0                	mov    %esi,%eax
	dest_str[str - start] = '\0';
  100f29:	c6 44 1d e0 00       	movb   $0x0,-0x20(%ebp,%ebx,1)
	dest = get_destination_module(dest_str);
  100f2e:	e8 53 fe ff ff       	call   100d86 <get_destination_module>
  100f33:	89 c3                	mov    %eax,%ebx
	if (!dest) {
  100f35:	85 c0                	test   %eax,%eax
  100f37:	0f 84 6a 01 00 00    	je     1010a7 <completion+0x208>
	str++;
  100f3d:	8d 47 01             	lea    0x1(%edi),%eax
	str = strchr(str, ' ');
  100f40:	6a 20                	push   $0x20
	str++;
  100f42:	89 45 d0             	mov    %eax,-0x30(%ebp)
	str = strchr(str, ' ');
  100f45:	50                   	push   %eax
  100f46:	e8 08 f3 ff ff       	call   100253 <strchr>
  100f4b:	5f                   	pop    %edi
	return str ? dest : NULL;
  100f4c:	85 c0                	test   %eax,%eax
	str = strchr(str, ' ');
  100f4e:	5a                   	pop    %edx
	if (!module) {
  100f4f:	0f 84 52 01 00 00    	je     1010a7 <completion+0x208>
		return 0;
	}

	command_len = strlen(command_prefix);
  100f55:	ff 75 d0             	pushl  -0x30(%ebp)
  100f58:	e8 18 f3 ff ff       	call   100275 <strlen>
	const char *first_match = NULL;
  100f5d:	31 ff                	xor    %edi,%edi
	command_len = strlen(command_prefix);
  100f5f:	5e                   	pop    %esi
  100f60:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100f63:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100f66:	31 d2                	xor    %edx,%edx
	int common_chars = -1, space = 0;
  100f68:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)

	for (i = 0; module->commands[i].cmd_name; i++) {
  100f6f:	8b 43 04             	mov    0x4(%ebx),%eax
  100f72:	8b 04 10             	mov    (%eax,%edx,1),%eax
  100f75:	85 c0                	test   %eax,%eax
  100f77:	0f 84 80 00 00 00    	je     100ffd <completion+0x15e>
		int j;

		if (strncmp(command_prefix,
  100f7d:	ff 75 d4             	pushl  -0x2c(%ebp)
  100f80:	50                   	push   %eax
  100f81:	89 55 c8             	mov    %edx,-0x38(%ebp)
  100f84:	ff 75 d0             	pushl  -0x30(%ebp)
  100f87:	e8 1f f3 ff ff       	call   1002ab <strncmp>
  100f8c:	83 c4 0c             	add    $0xc,%esp
  100f8f:	89 c6                	mov    %eax,%esi
  100f91:	85 c0                	test   %eax,%eax
  100f93:	8b 55 c8             	mov    -0x38(%ebp),%edx
  100f96:	75 5d                	jne    100ff5 <completion+0x156>
			    module->commands[i].cmd_name, command_len)) {
			continue;
		}

		if (!first_match) {
  100f98:	85 ff                	test   %edi,%edi
  100f9a:	75 08                	jne    100fa4 <completion+0x105>
			first_match = module->commands[i].cmd_name;
  100f9c:	8b 43 04             	mov    0x4(%ebx),%eax
  100f9f:	8b 3c 10             	mov    (%eax,%edx,1),%edi
  100fa2:	eb 51                	jmp    100ff5 <completion+0x156>
			continue;
		}

		/* more commands match, print first match */
		if (first_match && (common_chars < 0)) {
  100fa4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  100fa8:	79 2b                	jns    100fd5 <completion+0x136>
			printk("\n%s\n", first_match);
  100faa:	57                   	push   %edi
  100fab:	89 55 c8             	mov    %edx,-0x38(%ebp)
  100fae:	68 cf 65 10 00       	push   $0x1065cf
  100fb3:	e8 5d fd ff ff       	call   100d15 <printk>
  100fb8:	58                   	pop    %eax
  100fb9:	5a                   	pop    %edx
			common_chars = strlen(first_match);
  100fba:	57                   	push   %edi
  100fbb:	e8 b5 f2 ff ff       	call   100275 <strlen>
  100fc0:	59                   	pop    %ecx
  100fc1:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100fc4:	8b 55 c8             	mov    -0x38(%ebp),%edx
  100fc7:	eb 0c                	jmp    100fd5 <completion+0x136>
		}

		/* cut common part of matching names */
		for (j = 0; j < common_chars; j++) {
			if (first_match[j] != module->commands[i].cmd_name[j]) {
  100fc9:	8b 0c 10             	mov    (%eax,%edx,1),%ecx
  100fcc:	8a 0c 31             	mov    (%ecx,%esi,1),%cl
  100fcf:	38 0c 37             	cmp    %cl,(%edi,%esi,1)
  100fd2:	75 09                	jne    100fdd <completion+0x13e>
		for (j = 0; j < common_chars; j++) {
  100fd4:	46                   	inc    %esi
  100fd5:	3b 75 dc             	cmp    -0x24(%ebp),%esi
  100fd8:	8b 43 04             	mov    0x4(%ebx),%eax
  100fdb:	7c ec                	jl     100fc9 <completion+0x12a>
			}
		}

		common_chars = j;

		printk("%s\n", module->commands[i].cmd_name);
  100fdd:	ff 34 10             	pushl  (%eax,%edx,1)
  100fe0:	89 55 c8             	mov    %edx,-0x38(%ebp)
  100fe3:	68 d0 65 10 00       	push   $0x1065d0
  100fe8:	e8 28 fd ff ff       	call   100d15 <printk>
  100fed:	59                   	pop    %ecx
  100fee:	89 75 dc             	mov    %esi,-0x24(%ebp)
  100ff1:	58                   	pop    %eax
  100ff2:	8b 55 c8             	mov    -0x38(%ebp),%edx
  100ff5:	83 c2 10             	add    $0x10,%edx
  100ff8:	e9 72 ff ff ff       	jmp    100f6f <completion+0xd0>
	}

	/* no match, do nothing */
	if (!first_match) {
  100ffd:	85 ff                	test   %edi,%edi
  100fff:	0f 84 a2 00 00 00    	je     1010a7 <completion+0x208>
		return 0;
	}

	if (common_chars >= 0) {
  101005:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  101009:	78 25                	js     101030 <completion+0x191>
		/* multiple match, restore prompt */
		printk("%s", get_prompt());
  10100b:	e8 30 fe ff ff       	call   100e40 <get_prompt>
  101010:	50                   	push   %eax
  101011:	68 d4 65 10 00       	push   $0x1065d4
  101016:	e8 fa fc ff ff       	call   100d15 <printk>
  10101b:	5e                   	pop    %esi
  10101c:	58                   	pop    %eax
	int common_chars = -1, space = 0;
  10101d:	31 f6                	xor    %esi,%esi
		printk("%s", line);
  10101f:	ff 75 08             	pushl  0x8(%ebp)
  101022:	68 d4 65 10 00       	push   $0x1065d4
  101027:	e8 e9 fc ff ff       	call   100d15 <printk>
  10102c:	58                   	pop    %eax
  10102d:	5a                   	pop    %edx
  10102e:	eb 0f                	jmp    10103f <completion+0x1a0>
	} else {
		common_chars = strlen(first_match);
  101030:	57                   	push   %edi
  101031:	e8 3f f2 ff ff       	call   100275 <strlen>
		space = 1;
  101036:	be 01 00 00 00       	mov    $0x1,%esi
		common_chars = strlen(first_match);
  10103b:	5b                   	pop    %ebx
  10103c:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10103f:	8a 45 cf             	mov    -0x31(%ebp),%al
  101042:	2b 45 d4             	sub    -0x2c(%ebp),%eax
  101045:	88 45 cf             	mov    %al,-0x31(%ebp)
  101048:	8a 45 d4             	mov    -0x2c(%ebp),%al
  10104b:	8a 5d cf             	mov    -0x31(%ebp),%bl
	}

	/* complete common part */
	for (i = command_len; i < common_chars; i++) {
  10104e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  101051:	03 5d d8             	add    -0x28(%ebp),%ebx
  101054:	88 45 d0             	mov    %al,-0x30(%ebp)
  101057:	39 4d d8             	cmp    %ecx,-0x28(%ebp)
  10105a:	7d 28                	jge    101084 <completion+0x1e5>
		printk("%c", first_match[i]);
  10105c:	8b 45 d8             	mov    -0x28(%ebp),%eax
		line[len++] = first_match[i];
  10105f:	0f b6 db             	movzbl %bl,%ebx
		printk("%c", first_match[i]);
  101062:	0f be 04 07          	movsbl (%edi,%eax,1),%eax
  101066:	50                   	push   %eax
  101067:	68 d7 65 10 00       	push   $0x1065d7
  10106c:	e8 a4 fc ff ff       	call   100d15 <printk>
		line[len++] = first_match[i];
  101071:	8b 45 d8             	mov    -0x28(%ebp),%eax
		printk("%c", first_match[i]);
  101074:	5a                   	pop    %edx
  101075:	59                   	pop    %ecx
		line[len++] = first_match[i];
  101076:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101079:	8a 04 07             	mov    (%edi,%eax,1),%al
	for (i = command_len; i < common_chars; i++) {
  10107c:	ff 45 d8             	incl   -0x28(%ebp)
		line[len++] = first_match[i];
  10107f:	88 04 19             	mov    %al,(%ecx,%ebx,1)
  101082:	eb c4                	jmp    101048 <completion+0x1a9>
	}

	/* for convenience add space after command */
	if (space) {
  101084:	85 f6                	test   %esi,%esi
  101086:	74 15                	je     10109d <completion+0x1fe>
		printk(" ");
  101088:	68 7d 69 10 00       	push   $0x10697d
  10108d:	e8 83 fc ff ff       	call   100d15 <printk>
		line[len] = ' ';
  101092:	0f b6 db             	movzbl %bl,%ebx
		printk(" ");
  101095:	58                   	pop    %eax
		line[len] = ' ';
  101096:	8b 45 08             	mov    0x8(%ebp),%eax
  101099:	c6 04 18 20          	movb   $0x20,(%eax,%ebx,1)
	}

	return common_chars - command_len + space;
  10109d:	8a 45 dc             	mov    -0x24(%ebp),%al
  1010a0:	01 f0                	add    %esi,%eax
  1010a2:	2b 45 d0             	sub    -0x30(%ebp),%eax
  1010a5:	eb 02                	jmp    1010a9 <completion+0x20a>
		return 0;
  1010a7:	31 c0                	xor    %eax,%eax
}
  1010a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1010ac:	5b                   	pop    %ebx
  1010ad:	5e                   	pop    %esi
  1010ae:	5f                   	pop    %edi
  1010af:	5d                   	pop    %ebp
  1010b0:	c3                   	ret    

001010b1 <cmd_help>:
{
  1010b1:	55                   	push   %ebp
  1010b2:	89 e5                	mov    %esp,%ebp
  1010b4:	56                   	push   %esi
  1010b5:	53                   	push   %ebx
  1010b6:	8b 75 0c             	mov    0xc(%ebp),%esi
	if (argc > 1) {
  1010b9:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  1010bd:	0f 8e 94 00 00 00    	jle    101157 <cmd_help+0xa6>
		module = get_destination_module(argv[1]);
  1010c3:	8b 46 04             	mov    0x4(%esi),%eax
  1010c6:	e8 bb fc ff ff       	call   100d86 <get_destination_module>
  1010cb:	89 c3                	mov    %eax,%ebx
		if (module) {
  1010cd:	85 c0                	test   %eax,%eax
  1010cf:	74 0f                	je     1010e0 <cmd_help+0x2f>
			if (argc == 2) {
  1010d1:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
  1010d5:	0f 84 86 00 00 00    	je     101161 <cmd_help+0xb0>
			cmd_str = argv[2];
  1010db:	8b 76 08             	mov    0x8(%esi),%esi
  1010de:	eb 15                	jmp    1010f5 <cmd_help+0x44>
			module = default_module;
  1010e0:	8b 1d 18 93 10 00    	mov    0x109318,%ebx
			cmd_str = argv[1];
  1010e6:	8b 76 04             	mov    0x4(%esi),%esi
		if (!module) {
  1010e9:	85 db                	test   %ebx,%ebx
  1010eb:	75 08                	jne    1010f5 <cmd_help+0x44>
			printk("No help found for '%s'\n", cmd_str);
  1010ed:	56                   	push   %esi
  1010ee:	68 da 65 10 00       	push   $0x1065da
  1010f3:	eb 51                	jmp    101146 <cmd_help+0x95>
	return get_cmd(module->commands, cmd_str);
  1010f5:	8b 43 04             	mov    0x4(%ebx),%eax
  1010f8:	89 f2                	mov    %esi,%edx
  1010fa:	e8 57 fc ff ff       	call   100d56 <get_cmd>
  1010ff:	89 c3                	mov    %eax,%ebx
		if (cmd) {
  101101:	85 c0                	test   %eax,%eax
  101103:	74 3b                	je     101140 <cmd_help+0x8f>
	printk("Usage: %s %s\n", cmd->cmd_name, cmd->help ? cmd->help : "");
  101105:	8b 40 08             	mov    0x8(%eax),%eax
  101108:	85 c0                	test   %eax,%eax
  10110a:	75 05                	jne    101111 <cmd_help+0x60>
  10110c:	b8 ee 63 10 00       	mov    $0x1063ee,%eax
  101111:	50                   	push   %eax
  101112:	ff 33                	pushl  (%ebx)
  101114:	68 f2 65 10 00       	push   $0x1065f2
  101119:	e8 f7 fb ff ff       	call   100d15 <printk>
	if (full && cmd->desc) {
  10111e:	8b 53 0c             	mov    0xc(%ebx),%edx
	printk("Usage: %s %s\n", cmd->cmd_name, cmd->help ? cmd->help : "");
  101121:	83 c4 0c             	add    $0xc,%esp
			return show_cmd_help(cmd, true);
  101124:	31 c0                	xor    %eax,%eax
	if (full && cmd->desc) {
  101126:	85 d2                	test   %edx,%edx
  101128:	0f 84 bc 00 00 00    	je     1011ea <cmd_help+0x139>
		printk("%s\n", cmd->desc);
  10112e:	52                   	push   %edx
  10112f:	68 d0 65 10 00       	push   $0x1065d0
  101134:	e8 dc fb ff ff       	call   100d15 <printk>
  101139:	59                   	pop    %ecx
  10113a:	5b                   	pop    %ebx
  10113b:	e9 a8 00 00 00       	jmp    1011e8 <cmd_help+0x137>
			printk("Unknown command '%s'\n", cmd_str);
  101140:	56                   	push   %esi
  101141:	68 00 66 10 00       	push   $0x106600
  101146:	e8 ca fb ff ff       	call   100d15 <printk>
  10114b:	58                   	pop    %eax
			return -EINVAL;
  10114c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
			printk("Unknown command '%s'\n", cmd_str);
  101151:	5a                   	pop    %edx
			return -EINVAL;
  101152:	e9 93 00 00 00       	jmp    1011ea <cmd_help+0x139>
	struct shell_module *module = default_module;
  101157:	8b 1d 18 93 10 00    	mov    0x109318,%ebx
	if (module) {
  10115d:	85 db                	test   %ebx,%ebx
  10115f:	74 3f                	je     1011a0 <cmd_help+0xef>
	printk("help\n");
  101161:	68 16 66 10 00       	push   $0x106616
  101166:	e8 aa fb ff ff       	call   100d15 <printk>
  10116b:	5e                   	pop    %esi
  10116c:	31 f6                	xor    %esi,%esi
	for (i = 0; module->commands[i].cmd_name; i++) {
  10116e:	8b 43 04             	mov    0x4(%ebx),%eax
  101171:	01 f0                	add    %esi,%eax
  101173:	8b 10                	mov    (%eax),%edx
  101175:	85 d2                	test   %edx,%edx
  101177:	74 20                	je     101199 <cmd_help+0xe8>
		       module->commands[i].help ?
  101179:	8b 40 08             	mov    0x8(%eax),%eax
		printk("%-28s %s\n",
  10117c:	85 c0                	test   %eax,%eax
  10117e:	75 05                	jne    101185 <cmd_help+0xd4>
  101180:	b8 ee 63 10 00       	mov    $0x1063ee,%eax
  101185:	50                   	push   %eax
  101186:	52                   	push   %edx
  101187:	68 1c 66 10 00       	push   $0x10661c
  10118c:	83 c6 10             	add    $0x10,%esi
  10118f:	e8 81 fb ff ff       	call   100d15 <printk>
  101194:	83 c4 0c             	add    $0xc,%esp
  101197:	eb d5                	jmp    10116e <cmd_help+0xbd>
		printk("\nEnter 'exit' to leave current module.\n");
  101199:	68 26 66 10 00       	push   $0x106626
  10119e:	eb 42                	jmp    1011e2 <cmd_help+0x131>
		printk("Available modules:\n");
  1011a0:	68 4e 66 10 00       	push   $0x10664e
  1011a5:	e8 6b fb ff ff       	call   100d15 <printk>
  1011aa:	5b                   	pop    %ebx
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
  1011ab:	bb fc ba 10 00       	mov    $0x10bafc,%ebx
  1011b0:	81 eb f0 ba 10 00    	sub    $0x10baf0,%ebx
  1011b6:	31 f6                	xor    %esi,%esi
  1011b8:	c1 fb 02             	sar    $0x2,%ebx
  1011bb:	69 db ab aa aa aa    	imul   $0xaaaaaaab,%ebx,%ebx
  1011c1:	39 de                	cmp    %ebx,%esi
  1011c3:	7d 18                	jge    1011dd <cmd_help+0x12c>
			printk("%s\n", __shell_cmd_start[i].module_name);
  1011c5:	6b c6 0c             	imul   $0xc,%esi,%eax
		for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
  1011c8:	46                   	inc    %esi
			printk("%s\n", __shell_cmd_start[i].module_name);
  1011c9:	ff b0 f0 ba 10 00    	pushl  0x10baf0(%eax)
  1011cf:	68 d0 65 10 00       	push   $0x1065d0
  1011d4:	e8 3c fb ff ff       	call   100d15 <printk>
  1011d9:	5a                   	pop    %edx
  1011da:	59                   	pop    %ecx
  1011db:	eb e4                	jmp    1011c1 <cmd_help+0x110>
		printk("\nTo select a module, enter 'select <module name>'.\n");
  1011dd:	68 62 66 10 00       	push   $0x106662
  1011e2:	e8 2e fb ff ff       	call   100d15 <printk>
  1011e7:	58                   	pop    %eax
	return 0;
  1011e8:	31 c0                	xor    %eax,%eax
}
  1011ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1011ed:	5b                   	pop    %ebx
  1011ee:	5e                   	pop    %esi
  1011ef:	5d                   	pop    %ebp
  1011f0:	c3                   	ret    

001011f1 <shell_exec>:
{
  1011f1:	55                   	push   %ebp
  1011f2:	89 e5                	mov    %esp,%ebp
  1011f4:	57                   	push   %edi
  1011f5:	56                   	push   %esi
  1011f6:	53                   	push   %ebx
  1011f7:	83 ec 30             	sub    $0x30,%esp
  1011fa:	8b 75 08             	mov    0x8(%ebp),%esi
	if (!strlen(str)) {
  1011fd:	56                   	push   %esi
  1011fe:	e8 72 f0 ff ff       	call   100275 <strlen>
  101203:	59                   	pop    %ecx
  101204:	89 c3                	mov    %eax,%ebx
  101206:	85 c0                	test   %eax,%eax
  101208:	74 5c                	je     101266 <shell_exec+0x75>
	while (*str && *str == ' ') {
  10120a:	8a 06                	mov    (%esi),%al
  10120c:	3c 20                	cmp    $0x20,%al
  10120e:	75 03                	jne    101213 <shell_exec+0x22>
		str++;
  101210:	46                   	inc    %esi
  101211:	eb f7                	jmp    10120a <shell_exec+0x19>
		return 0;
  101213:	31 db                	xor    %ebx,%ebx
	if (!*str) {
  101215:	84 c0                	test   %al,%al
  101217:	74 4d                	je     101266 <shell_exec+0x75>
	argv[argc++] = str;
  101219:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10121c:	bb 01 00 00 00       	mov    $0x1,%ebx
	while ((str = strchr(str, ' '))) {
  101221:	6a 20                	push   $0x20
  101223:	56                   	push   %esi
  101224:	e8 2a f0 ff ff       	call   100253 <strchr>
  101229:	5e                   	pop    %esi
  10122a:	85 c0                	test   %eax,%eax
  10122c:	5f                   	pop    %edi
  10122d:	74 13                	je     101242 <shell_exec+0x51>
		*str++ = '\0';
  10122f:	8d 70 01             	lea    0x1(%eax),%esi
  101232:	c6 00 00             	movb   $0x0,(%eax)
		while (*str && *str == ' ') {
  101235:	8a 06                	mov    (%esi),%al
  101237:	3c 20                	cmp    $0x20,%al
  101239:	75 03                	jne    10123e <shell_exec+0x4d>
			str++;
  10123b:	46                   	inc    %esi
  10123c:	eb f7                	jmp    101235 <shell_exec+0x44>
		if (!*str) {
  10123e:	84 c0                	test   %al,%al
  101240:	75 0a                	jne    10124c <shell_exec+0x5b>
	argv[argc] = NULL;
  101242:	c7 44 9d c8 00 00 00 	movl   $0x0,-0x38(%ebp,%ebx,4)
  101249:	00 
  10124a:	eb 1a                	jmp    101266 <shell_exec+0x75>
		argv[argc++] = str;
  10124c:	43                   	inc    %ebx
		if (argc == size) {
  10124d:	83 fb 0b             	cmp    $0xb,%ebx
		argv[argc++] = str;
  101250:	89 74 9d c4          	mov    %esi,-0x3c(%ebp,%ebx,4)
		if (argc == size) {
  101254:	75 cb                	jne    101221 <shell_exec+0x30>
			printk("Too many parameters (max %zu)\n", size - 1);
  101256:	6a 0a                	push   $0xa
			return 0;
  101258:	31 db                	xor    %ebx,%ebx
			printk("Too many parameters (max %zu)\n", size - 1);
  10125a:	68 96 66 10 00       	push   $0x106696
  10125f:	e8 b1 fa ff ff       	call   100d15 <printk>
  101264:	58                   	pop    %eax
  101265:	5a                   	pop    %edx
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
  101266:	89 df                	mov    %ebx,%edi
		return -EINVAL;
  101268:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	if (!argc) {
  10126d:	85 db                	test   %ebx,%ebx
  10126f:	0f 84 e2 00 00 00    	je     101357 <shell_exec+0x166>
	return get_cmd(internal_commands, command);
  101275:	8b 55 c8             	mov    -0x38(%ebp),%edx
  101278:	b8 60 67 10 00       	mov    $0x106760,%eax
  10127d:	e8 d4 fa ff ff       	call   100d56 <get_cmd>
  101282:	89 c6                	mov    %eax,%esi
	char *argv[ARGC_MAX + 1], **argv_start = argv;
  101284:	8d 45 c8             	lea    -0x38(%ebp),%eax
	if (cmd) {
  101287:	85 f6                	test   %esi,%esi
  101289:	0f 85 99 00 00 00    	jne    101328 <shell_exec+0x137>
	if (argc == 1 && !default_module) {
  10128f:	83 fb 01             	cmp    $0x1,%ebx
  101292:	75 10                	jne    1012a4 <shell_exec+0xb3>
  101294:	83 3d 18 93 10 00 00 	cmpl   $0x0,0x109318
  10129b:	75 07                	jne    1012a4 <shell_exec+0xb3>
		printk("No module selected. Use 'select' or 'help'.\n");
  10129d:	68 b5 66 10 00       	push   $0x1066b5
  1012a2:	eb 77                	jmp    10131b <shell_exec+0x12a>
	if (default_module) {
  1012a4:	a1 18 93 10 00       	mov    0x109318,%eax
  1012a9:	85 c0                	test   %eax,%eax
  1012ab:	74 0d                	je     1012ba <shell_exec+0xc9>
	return get_cmd(module->commands, cmd_str);
  1012ad:	8b 40 04             	mov    0x4(%eax),%eax
  1012b0:	8b 55 c8             	mov    -0x38(%ebp),%edx
  1012b3:	e8 9e fa ff ff       	call   100d56 <get_cmd>
  1012b8:	89 c6                	mov    %eax,%esi
	if (!cmd && argc > 1) {
  1012ba:	85 f6                	test   %esi,%esi
  1012bc:	75 40                	jne    1012fe <shell_exec+0x10d>
  1012be:	83 fb 01             	cmp    $0x1,%ebx
  1012c1:	7e 3b                	jle    1012fe <shell_exec+0x10d>
		module = get_destination_module(argv[0]);
  1012c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1012c6:	e8 bb fa ff ff       	call   100d86 <get_destination_module>
		if (module) {
  1012cb:	85 c0                	test   %eax,%eax
  1012cd:	75 16                	jne    1012e5 <shell_exec+0xf4>
		if (app_cmd_handler) {
  1012cf:	a1 14 91 10 00       	mov    0x109114,%eax
  1012d4:	85 c0                	test   %eax,%eax
  1012d6:	74 2f                	je     101307 <shell_exec+0x116>
			return app_cmd_handler(argc, argv);
  1012d8:	8d 55 c8             	lea    -0x38(%ebp),%edx
  1012db:	52                   	push   %edx
  1012dc:	53                   	push   %ebx
  1012dd:	ff d0                	call   *%eax
  1012df:	5a                   	pop    %edx
  1012e0:	89 c2                	mov    %eax,%edx
  1012e2:	59                   	pop    %ecx
  1012e3:	eb 72                	jmp    101357 <shell_exec+0x166>
	return get_cmd(module->commands, cmd_str);
  1012e5:	8b 40 04             	mov    0x4(%eax),%eax
  1012e8:	8b 55 cc             	mov    -0x34(%ebp),%edx
  1012eb:	e8 66 fa ff ff       	call   100d56 <get_cmd>
  1012f0:	89 c6                	mov    %eax,%esi
			if (cmd) {
  1012f2:	85 c0                	test   %eax,%eax
  1012f4:	74 d9                	je     1012cf <shell_exec+0xde>
				argc--;
  1012f6:	8d 7b ff             	lea    -0x1(%ebx),%edi
				argv_start++;
  1012f9:	8d 45 cc             	lea    -0x34(%ebp),%eax
  1012fc:	eb 2a                	jmp    101328 <shell_exec+0x137>
	char *argv[ARGC_MAX + 1], **argv_start = argv;
  1012fe:	8d 45 c8             	lea    -0x38(%ebp),%eax
	if (!cmd) {
  101301:	85 f6                	test   %esi,%esi
  101303:	75 23                	jne    101328 <shell_exec+0x137>
  101305:	eb c8                	jmp    1012cf <shell_exec+0xde>
		printk("Unrecognized command: %s\n", argv[0]);
  101307:	ff 75 c8             	pushl  -0x38(%ebp)
  10130a:	68 e2 66 10 00       	push   $0x1066e2
  10130f:	e8 01 fa ff ff       	call   100d15 <printk>
  101314:	5e                   	pop    %esi
  101315:	5f                   	pop    %edi
		printk("Type 'help' for list of available commands\n");
  101316:	68 fc 66 10 00       	push   $0x1066fc
  10131b:	e8 f5 f9 ff ff       	call   100d15 <printk>
  101320:	5b                   	pop    %ebx
		return -EINVAL;
  101321:	ba ea ff ff ff       	mov    $0xffffffea,%edx
  101326:	eb 2f                	jmp    101357 <shell_exec+0x166>
	err = cmd->cb(argc, argv_start);
  101328:	50                   	push   %eax
  101329:	57                   	push   %edi
  10132a:	ff 56 04             	call   *0x4(%esi)
  10132d:	5a                   	pop    %edx
	if (err < 0) {
  10132e:	85 c0                	test   %eax,%eax
	err = cmd->cb(argc, argv_start);
  101330:	59                   	pop    %ecx
  101331:	89 c2                	mov    %eax,%edx
	if (err < 0) {
  101333:	79 22                	jns    101357 <shell_exec+0x166>
	printk("Usage: %s %s\n", cmd->cmd_name, cmd->help ? cmd->help : "");
  101335:	8b 46 08             	mov    0x8(%esi),%eax
  101338:	85 c0                	test   %eax,%eax
  10133a:	75 05                	jne    101341 <shell_exec+0x150>
  10133c:	b8 ee 63 10 00       	mov    $0x1063ee,%eax
  101341:	50                   	push   %eax
  101342:	89 55 c4             	mov    %edx,-0x3c(%ebp)
  101345:	ff 36                	pushl  (%esi)
  101347:	68 f2 65 10 00       	push   $0x1065f2
  10134c:	e8 c4 f9 ff ff       	call   100d15 <printk>
  101351:	83 c4 0c             	add    $0xc,%esp
  101354:	8b 55 c4             	mov    -0x3c(%ebp),%edx
}
  101357:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10135a:	89 d0                	mov    %edx,%eax
  10135c:	5b                   	pop    %ebx
  10135d:	5e                   	pop    %esi
  10135e:	5f                   	pop    %edi
  10135f:	5d                   	pop    %ebp
  101360:	c3                   	ret    

00101361 <shell>:
{
  101361:	55                   	push   %ebp
  101362:	89 e5                	mov    %esp,%ebp
  101364:	53                   	push   %ebx
		printk("%s", get_prompt());
  101365:	e8 d6 fa ff ff       	call   100e40 <get_prompt>
  10136a:	50                   	push   %eax
  10136b:	68 d4 65 10 00       	push   $0x1065d4
  101370:	e8 a0 f9 ff ff       	call   100d15 <printk>
  101375:	58                   	pop    %eax
  101376:	5a                   	pop    %edx
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
  101377:	6a ff                	push   $0xffffffff
  101379:	68 18 91 10 00       	push   $0x109118
  10137e:	e8 14 40 00 00       	call   105397 <k_queue_get>
  101383:	59                   	pop    %ecx
  101384:	5b                   	pop    %ebx
  101385:	89 c3                	mov    %eax,%ebx
		shell_exec(cmd->line);
  101387:	83 c0 04             	add    $0x4,%eax
  10138a:	50                   	push   %eax
  10138b:	e8 61 fe ff ff       	call   1011f1 <shell_exec>
		k_fifo_put(&avail_queue, cmd);
  101390:	89 1c 24             	mov    %ebx,(%esp)
  101393:	68 28 91 10 00       	push   $0x109128
  101398:	e8 e3 3f 00 00       	call   105380 <k_queue_append>
  10139d:	58                   	pop    %eax
  10139e:	5a                   	pop    %edx
  10139f:	eb c4                	jmp    101365 <shell+0x4>

001013a1 <shell_init>:


void shell_init(const char *str)
{
  1013a1:	55                   	push   %ebp
  1013a2:	89 e5                	mov    %esp,%ebp
  1013a4:	53                   	push   %ebx
	k_fifo_init(&cmds_queue);
  1013a5:	68 18 91 10 00       	push   $0x109118
{
  1013aa:	8b 5d 08             	mov    0x8(%ebp),%ebx
	k_fifo_init(&cmds_queue);
  1013ad:	e8 1c 3f 00 00       	call   1052ce <k_queue_init>
	k_fifo_init(&avail_queue);
  1013b2:	c7 04 24 28 91 10 00 	movl   $0x109128,(%esp)
  1013b9:	e8 10 3f 00 00       	call   1052ce <k_queue_init>
		k_fifo_put(&avail_queue, &buf[i]);
  1013be:	c7 04 24 40 91 10 00 	movl   $0x109140,(%esp)
  1013c5:	68 28 91 10 00       	push   $0x109128
  1013ca:	e8 b1 3f 00 00       	call   105380 <k_queue_append>
  1013cf:	58                   	pop    %eax
  1013d0:	5a                   	pop    %edx
  1013d1:	68 c4 91 10 00       	push   $0x1091c4
  1013d6:	68 28 91 10 00       	push   $0x109128
  1013db:	e8 a0 3f 00 00       	call   105380 <k_queue_append>
  1013e0:	59                   	pop    %ecx
  1013e1:	58                   	pop    %eax
  1013e2:	68 48 92 10 00       	push   $0x109248
  1013e7:	68 28 91 10 00       	push   $0x109128
  1013ec:	e8 8f 3f 00 00       	call   105380 <k_queue_append>
  1013f1:	58                   	pop    %eax

	line_queue_init();

	prompt = str ? str : "";
  1013f2:	85 db                	test   %ebx,%ebx
		k_fifo_put(&avail_queue, &buf[i]);
  1013f4:	5a                   	pop    %edx
	prompt = str ? str : "";
  1013f5:	75 05                	jne    1013fc <shell_init+0x5b>
  1013f7:	bb ee 63 10 00       	mov    $0x1063ee,%ebx

  1013fc:	6a 00                	push   $0x0
  1013fe:	6a 00                	push   $0x0
  101400:	6a f7                	push   $0xfffffff7
  101402:	6a 00                	push   $0x0
  101404:	6a 00                	push   $0x0
  101406:	6a 00                	push   $0x0
  101408:	68 61 13 10 00       	push   $0x101361
  10140d:	68 d0 07 00 00       	push   $0x7d0
  101412:	68 f0 a1 10 00       	push   $0x10a1f0
  101417:	68 e0 92 10 00       	push   $0x1092e0
  10141c:	89 1d 34 93 10 00    	mov    %ebx,0x109334
  101422:	e8 e7 48 00 00       	call   105d0e <_impl_k_thread_create>
  101427:	83 c4 28             	add    $0x28,%esp
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
  10142a:	68 9f 0e 10 00       	push   $0x100e9f
  10142f:	68 18 91 10 00       	push   $0x109118
  101434:	68 28 91 10 00       	push   $0x109128
  101439:	e8 d9 0a 00 00       	call   101f17 <uart_register_input>
  10143e:	83 c4 0c             	add    $0xc,%esp
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
  101441:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  101444:	c9                   	leave  
  101445:	c3                   	ret    

00101446 <pci_legacy_bridge_irq_config>:
 * - GPIO;
 * - UART0, UART1;
 * - SDIO/eMMC, USB, Ethernet.
 */
static int pci_legacy_bridge_irq_config(struct device *unused)
{
  101446:	55                   	push   %ebp
	ARG_UNUSED(unused);
	struct pci_dev_info info = {
  101447:	31 c0                	xor    %eax,%eax
{
  101449:	89 e5                	mov    %esp,%ebp
	struct pci_dev_info info = {
  10144b:	b9 05 00 00 00       	mov    $0x5,%ecx
{
  101450:	57                   	push   %edi
  101451:	53                   	push   %ebx
	struct pci_dev_info info = {
  101452:	8d 7d e4             	lea    -0x1c(%ebp),%edi
{
  101455:	83 ec 14             	sub    $0x14,%esp
	struct pci_dev_info info = {
  101458:	f3 ab                	rep stos %eax,%es:(%edi)
  10145a:	c7 45 f0 00 00 01 00 	movl   $0x10000,-0x10(%ebp)
		.function = PCI_FUNCTION_ANY,
		.bar = PCI_BAR_ANY,
	};
	if (pci_legacy_bridge_detect(&info) == 0) {
  101461:	8d 5d e4             	lea    -0x1c(%ebp),%ebx
	struct pci_dev_info info = {
  101464:	8a 45 f3             	mov    -0xd(%ebp),%al
	if (pci_legacy_bridge_detect(&info) == 0) {
  101467:	53                   	push   %ebx
	struct pci_dev_info info = {
  101468:	83 e0 e3             	and    $0xffffffe3,%eax
  10146b:	83 c8 18             	or     $0x18,%eax
  10146e:	88 45 f3             	mov    %al,-0xd(%ebp)
	if (pci_legacy_bridge_detect(&info) == 0) {
  101471:	e8 b0 2a 00 00       	call   103f26 <pci_legacy_bridge_detect>
  101476:	5a                   	pop    %edx
  101477:	85 c0                	test   %eax,%eax
  101479:	75 78                	jne    1014f3 <pci_legacy_bridge_irq_config+0xad>
		pci_legacy_bridge_configure(&info, 1, PCI_INTA, 16);
  10147b:	6a 10                	push   $0x10
  10147d:	6a 01                	push   $0x1
  10147f:	6a 01                	push   $0x1
  101481:	53                   	push   %ebx
  101482:	e8 d6 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  101487:	83 c4 10             	add    $0x10,%esp
		pci_legacy_bridge_configure(&info, 1, PCI_INTB, 17);
  10148a:	6a 11                	push   $0x11
  10148c:	6a 02                	push   $0x2
  10148e:	6a 01                	push   $0x1
  101490:	53                   	push   %ebx
  101491:	e8 c7 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  101496:	83 c4 10             	add    $0x10,%esp
		pci_legacy_bridge_configure(&info, 1, PCI_INTC, 18);
  101499:	6a 12                	push   $0x12
  10149b:	6a 03                	push   $0x3
  10149d:	6a 01                	push   $0x1
  10149f:	53                   	push   %ebx
  1014a0:	e8 b8 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  1014a5:	83 c4 10             	add    $0x10,%esp
		pci_legacy_bridge_configure(&info, 1, PCI_INTD, 19);
  1014a8:	6a 13                	push   $0x13
  1014aa:	6a 04                	push   $0x4
  1014ac:	6a 01                	push   $0x1
  1014ae:	53                   	push   %ebx
  1014af:	e8 a9 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  1014b4:	83 c4 10             	add    $0x10,%esp
		pci_legacy_bridge_configure(&info, 0, PCI_INTA, 17);
  1014b7:	6a 11                	push   $0x11
  1014b9:	6a 01                	push   $0x1
  1014bb:	6a 00                	push   $0x0
  1014bd:	53                   	push   %ebx
  1014be:	e8 9a 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  1014c3:	83 c4 10             	add    $0x10,%esp
		pci_legacy_bridge_configure(&info, 0, PCI_INTB, 18);
  1014c6:	6a 12                	push   $0x12
  1014c8:	6a 02                	push   $0x2
  1014ca:	6a 00                	push   $0x0
  1014cc:	53                   	push   %ebx
  1014cd:	e8 8b 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  1014d2:	83 c4 10             	add    $0x10,%esp
		pci_legacy_bridge_configure(&info, 0, PCI_INTC, 19);
  1014d5:	6a 13                	push   $0x13
  1014d7:	6a 03                	push   $0x3
  1014d9:	6a 00                	push   $0x0
  1014db:	53                   	push   %ebx
  1014dc:	e8 7c 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  1014e1:	83 c4 10             	add    $0x10,%esp
		pci_legacy_bridge_configure(&info, 0, PCI_INTD, 16);
  1014e4:	6a 10                	push   $0x10
  1014e6:	6a 04                	push   $0x4
  1014e8:	6a 00                	push   $0x0
  1014ea:	53                   	push   %ebx
  1014eb:	e8 6d 2b 00 00       	call   10405d <pci_legacy_bridge_configure>
  1014f0:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
}
  1014f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1014f6:	31 c0                	xor    %eax,%eax
  1014f8:	5b                   	pop    %ebx
  1014f9:	5f                   	pop    %edi
  1014fa:	5d                   	pop    %ebp
  1014fb:	c3                   	ret    

001014fc <init_cache>:
#else
#define init_cache_line_size() do { } while ((0))
#endif

static int init_cache(struct device *unused)
{
  1014fc:	55                   	push   %ebp
  1014fd:	89 e5                	mov    %esp,%ebp
	sys_cache_line_size = _cache_line_size_get();
  1014ff:	e8 09 00 00 00       	call   10150d <_cache_line_size_get>

	init_cache_flush();
	init_cache_line_size();

	return 0;
}
  101504:	5d                   	pop    %ebp
	sys_cache_line_size = _cache_line_size_get();
  101505:	a3 e8 a0 10 00       	mov    %eax,0x10a0e8
}
  10150a:	31 c0                	xor    %eax,%eax
  10150c:	c3                   	ret    

0010150d <_cache_line_size_get>:
	#define CPUID_CACHE_LINE_MASK (0xff << 8)

	GTEXT(_cache_line_size_get)

SECTION_FUNC(TEXT, _cache_line_size_get)
	pushl %ebx
  10150d:	53                   	push   %ebx
	movl $1, %eax
  10150e:	b8 01 00 00 00       	mov    $0x1,%eax
	cpuid
  101513:	0f a2                	cpuid  
	movl %ebx, %eax
  101515:	89 d8                	mov    %ebx,%eax
	andl $CPUID_CACHE_LINE_MASK, %eax
  101517:	25 00 ff 00 00       	and    $0xff00,%eax
	shrl $5,%eax	/* shift right 8 to get value, then multiple by 8
  10151c:	c1 e8 05             	shr    $0x5,%eax
					 * to get cache line size */
	popl %ebx
  10151f:	5b                   	pop    %ebx
	ret
  101520:	c3                   	ret    

00101521 <k_cpu_idle>:
 * will be issued causing a low-power consumption sleep mode.
 *
 * @return N/A
 */
void k_cpu_idle(void)
{
  101521:	55                   	push   %ebp
  101522:	89 e5                	mov    %esp,%ebp
	_sys_k_event_logger_enter_sleep();
#if defined(CONFIG_BOOT_TIME_MEASUREMENT)
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	__asm__ volatile (
  101524:	fb                   	sti    
  101525:	f4                   	hlt    
	    "sti\n\t"
	    "hlt\n\t");
}
  101526:	5d                   	pop    %ebp
  101527:	c3                   	ret    

00101528 <_exception_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * exception exits.
	 */

	cld
  101528:	fc                   	cld    


	/*
	 * Swap ecx and handler function on the current stack;
	 */
	xchgl	%ecx, (%esp)
  101529:	87 0c 24             	xchg   %ecx,(%esp)

	/*
	 * Push the remaining volatile registers on the existing stack.
	 */

	pushl	%eax
  10152c:	50                   	push   %eax
	pushl	%edx
  10152d:	52                   	push   %edx
	/*
	 * Push the cooperative registers on the existing stack as they are
	 * required by debug tools.
	 */

	pushl	%edi
  10152e:	57                   	push   %edi
	pushl	%esi
  10152f:	56                   	push   %esi
	pushl	%ebx
  101530:	53                   	push   %ebx
	pushl	%ebp
  101531:	55                   	push   %ebp

	leal	44(%esp), %eax   /* Calculate ESP before interrupt occurred */
  101532:	8d 44 24 2c          	lea    0x2c(%esp),%eax
	pushl	%eax             /* Save calculated ESP */
  101536:	50                   	push   %eax
	 * Test IF bit of saved EFLAGS and re-enable interrupts if IF=1.
	 */

	/* ESP is still pointing to the ESF at this point */

	testl	$0x200, __NANO_ESF_eflags_OFFSET(%esp)
  101537:	f7 44 24 2c 00 02 00 	testl  $0x200,0x2c(%esp)
  10153e:	00 
	je	allDone
  10153f:	74 01                	je     101542 <allDone>
	sti
  101541:	fb                   	sti    

00101542 <allDone>:

allDone:
#if CONFIG_X86_IAMCU
	movl	%esp, %eax		/* NANO_ESF * parameter */
#else
	pushl	%esp			/* push NANO_ESF * parameter */
  101542:	54                   	push   %esp
#endif
	call	*%ecx			/* call exception handler */
  101543:	ff d1                	call   *%ecx

#ifndef CONFIG_X86_IAMCU
	addl	$0x4, %esp
  101545:	83 c4 04             	add    $0x4,%esp
	 * Pop the non-volatile registers from the stack.
	 * Note that debug tools may have altered the saved register values while
	 * the task was stopped, and we want to pick up the altered values.
	 */

	popl	%ebp		/* Discard saved ESP */
  101548:	5d                   	pop    %ebp
	popl	%ebp
  101549:	5d                   	pop    %ebp
	popl	%ebx
  10154a:	5b                   	pop    %ebx
	popl	%esi
  10154b:	5e                   	pop    %esi
	popl	%edi
  10154c:	5f                   	pop    %edi

	/* restore edx and ecx which are always saved on the stack */

	popl	%edx
  10154d:	5a                   	pop    %edx
	popl	%eax
  10154e:	58                   	pop    %eax
	popl	%ecx
  10154f:	59                   	pop    %ecx

	addl	$4, %esp	/* "pop" error code */
  101550:	83 c4 04             	add    $0x4,%esp

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  101553:	cf                   	iret   

00101554 <_kernel_oops_handler>:

#if CONFIG_X86_KERNEL_OOPS
SECTION_FUNC(TEXT, _kernel_oops_handler)
	push $0 /* dummy error code */
  101554:	6a 00                	push   $0x0
	push $_do_kernel_oops
  101556:	68 0e 18 10 00       	push   $0x10180e
	jmp _exception_enter
  10155b:	e9 c8 ff ff ff       	jmp    101528 <_exception_enter>

00101560 <_interrupt_enter>:
	 *
	 * Clear the direction flag.  It is automatically restored when the
	 * interrupt exits via the IRET instruction.
	 */

	cld
  101560:	fc                   	cld    

	/*
	 * Swap EAX with isr_param and EDX with isr.
	 * Push ECX onto the stack
	 */
	xchgl	%eax, 4(%esp)
  101561:	87 44 24 04          	xchg   %eax,0x4(%esp)
	xchgl	%edx, (%esp)
  101565:	87 14 24             	xchg   %edx,(%esp)
	pushl	%ecx
  101568:	51                   	push   %ecx

	/* Push EDI as we will use it for scratch space.
	 * Rest of the callee-saved regs get saved by invocation of C
	 * functions (isr handler, __swap(), etc)
	 */
	pushl	%edi
  101569:	57                   	push   %edi
	popl	%eax
#endif

	/* load %ecx with &_kernel */

	movl	$_kernel, %ecx
  10156a:	b9 a0 9f 10 00       	mov    $0x109fa0,%ecx

	/* switch to the interrupt stack for the non-nested case */

	incl	_kernel_offset_to_nested(%ecx)
  10156f:	ff 01                	incl   (%ecx)

	/* use interrupt stack if not nested */
	cmpl	$1, _kernel_offset_to_nested(%ecx)
  101571:	83 39 01             	cmpl   $0x1,(%ecx)
#ifdef CONFIG_DEBUG_INFO
	jne	nested_save_isf
#else
	jne	alreadyOnIntStack
  101574:	75 06                	jne    10157c <alreadyOnIntStack>
	/*
	 * switch to base of the interrupt stack: save esp in edi, then load
	 * irq_stack pointer
	 */

	movl	%esp, %edi
  101576:	89 e7                	mov    %esp,%edi
	movl	_kernel_offset_to_irq_stack(%ecx), %esp
  101578:	8b 61 04             	mov    0x4(%ecx),%esp


	/* save thread's stack pointer onto base of interrupt stack */

	pushl	%edi			/* Save stack pointer */
  10157b:	57                   	push   %edi

0010157c <alreadyOnIntStack>:

#ifndef CONFIG_X86_IAMCU
	/* EAX has the interrupt handler argument, needs to go on
	 * stack for sys V calling convention
	 */
	push	%eax
  10157c:	50                   	push   %eax
	pop %edx
	pop %eax
#endif

#ifdef CONFIG_NESTED_INTERRUPTS
	sti			/* re-enable interrupts */
  10157d:	fb                   	sti    
#endif
	/* Now call the interrupt handler */
	call	*%edx
  10157e:	ff d2                	call   *%edx
#ifndef CONFIG_X86_IAMCU
	/* Discard ISR argument */
	addl	$0x4, %esp
  101580:	83 c4 04             	add    $0x4,%esp
#endif
#ifdef CONFIG_NESTED_INTERRUPTS
	cli			/* disable interrupts again */
  101583:	fa                   	cli    
#endif

	/* irq_controller.h interface */
	_irq_controller_eoi_macro
  101584:	31 c0                	xor    %eax,%eax
  101586:	a3 b0 00 e0 fe       	mov    %eax,0xfee000b0
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_start
#endif

	/* determine whether exiting from a nested interrupt */
	movl	$_kernel, %ecx
  10158b:	b9 a0 9f 10 00       	mov    $0x109fa0,%ecx
#ifdef CONFIG_DEBUG_INFO
	popl	_kernel_offset_to_isf(%ecx)    /* Restore old ISF */
#endif
	decl	_kernel_offset_to_nested(%ecx)	/* dec interrupt nest count */
  101590:	ff 09                	decl   (%ecx)
	jne	nestedInterrupt                 /* 'iret' if nested case */
  101592:	75 25                	jne    1015b9 <nestedInterrupt>


#ifdef CONFIG_PREEMPT_ENABLED
	movl	_kernel_offset_to_current(%ecx), %edx
  101594:	8b 51 08             	mov    0x8(%ecx),%edx

	/*
	 * Non-preemptible thread ? Do not schedule (see explanation of
	 * preempt field in kernel_struct.h).
	 */
	cmpw	$_NON_PREEMPT_THRESHOLD, _thread_offset_to_preempt(%edx)
  101597:	66 81 7a 0a 80 00    	cmpw   $0x80,0xa(%edx)
	jae	noReschedule
  10159d:	73 19                	jae    1015b8 <noReschedule>


	/* reschedule only if the scheduler says that we must do so */
	cmpl	%edx, _kernel_offset_to_ready_q_cache(%ecx)
  10159f:	39 51 14             	cmp    %edx,0x14(%ecx)
	je	noReschedule
  1015a2:	74 14                	je     1015b8 <noReschedule>
	 * the existing __swap() primitive to save the remaining
	 * thread's registers (including floating point) and perform
	 * a switch to the new thread.
	 */

	popl	%esp	/* switch back to outgoing thread's stack */
  1015a4:	5c                   	pop    %esp
	popl	%ebx
	popl	%esi
#endif

#if defined(CONFIG_TIMESLICING)
	call	_update_time_slice_before_swap
  1015a5:	e8 67 42 00 00       	call   105811 <_update_time_slice_before_swap>
#endif
#ifdef CONFIG_STACK_SENTINEL
	call	_check_stack_sentinel
#endif
	pushfl			/* push KERNEL_LOCK_KEY argument */
  1015aa:	9c                   	pushf  
#ifdef CONFIG_X86_IAMCU
	/* IAMCU first argument goes into a register, not the stack.
	 */
	popl	%eax
#endif
	call	__swap
  1015ab:	e8 26 00 00 00       	call   1015d6 <__swap>

#ifndef CONFIG_X86_IAMCU
	addl 	$4, %esp	/* pop KERNEL_LOCK_KEY argument */
  1015b0:	83 c4 04             	add    $0x4,%esp

	/* Restore volatile registers and return to the interrupted thread */
#ifdef CONFIG_INT_LATENCY_BENCHMARK
	call	_int_latency_stop
#endif
	popl	%edi
  1015b3:	5f                   	pop    %edi
	popl	%ecx
  1015b4:	59                   	pop    %ecx
	popl	%edx
  1015b5:	5a                   	pop    %edx
	popl	%eax
  1015b6:	58                   	pop    %eax

	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  1015b7:	cf                   	iret   

001015b8 <noReschedule>:
	/*
	 * A thread reschedule is not required; switch back to the
	 * interrupted thread's stack and restore volatile registers
	 */

	popl	%esp		/* pop thread stack pointer */
  1015b8:	5c                   	pop    %esp

001015b9 <nestedInterrupt>:
	popl	%ebp        /* Discard saved ESP */
	popl	%ebp
	popl	%ebx
	popl	%esi
#endif
	popl	%edi
  1015b9:	5f                   	pop    %edi
	popl	%ecx		/* pop volatile registers in reverse order */
  1015ba:	59                   	pop    %ecx
	popl	%edx
  1015bb:	5a                   	pop    %edx
	popl	%eax
  1015bc:	58                   	pop    %eax
	/* Pop of EFLAGS will re-enable interrupts and restore direction flag */
	iret
  1015bd:	cf                   	iret   

001015be <_SpuriousIntNoErrCodeHandler>:
 * thus _SpuriousIntNoErrCodeHandler()/_SpuriousIntHandler() shall be
 * invoked with interrupts disabled.
 */
SECTION_FUNC(TEXT, _SpuriousIntNoErrCodeHandler)

	pushl	$0			/* push dummy err code onto stk */
  1015be:	6a 00                	push   $0x0

001015c0 <_SpuriousIntHandler>:
	/* fall through to _SpuriousIntHandler */


SECTION_FUNC(TEXT, _SpuriousIntHandler)

	cld				/* Clear direction flag */
  1015c0:	fc                   	cld    

	/* Create the ESF */

	pushl %eax
  1015c1:	50                   	push   %eax
	pushl %ecx
  1015c2:	51                   	push   %ecx
	pushl %edx
  1015c3:	52                   	push   %edx
	pushl %edi
  1015c4:	57                   	push   %edi
	pushl %esi
  1015c5:	56                   	push   %esi
	pushl %ebx
  1015c6:	53                   	push   %ebx
	pushl %ebp
  1015c7:	55                   	push   %ebp

	leal	44(%esp), %ecx   /* Calculate ESP before exception occurred */
  1015c8:	8d 4c 24 2c          	lea    0x2c(%esp),%ecx
	pushl	%ecx             /* Save calculated ESP */
  1015cc:	51                   	push   %ecx

#ifndef CONFIG_X86_IAMCU
	pushl	%esp			/* push cur stack pointer: pEsf arg */
  1015cd:	54                   	push   %esp
#else
	mov	%esp, %edx
#endif

	/* re-enable interrupts */
	sti
  1015ce:	fb                   	sti    

	/* push the 'unsigned int reason' parameter */
#ifndef CONFIG_X86_IAMCU
	pushl	$_NANO_ERR_SPURIOUS_INT
  1015cf:	6a 00                	push   $0x0
#else
	movl	$_NANO_ERR_SPURIOUS_INT, %eax
#endif
	/* call the fatal error handler */
	call	_NanoFatalErrorHandler
  1015d1:	e8 f6 00 00 00       	call   1016cc <_NanoFatalErrorHandler>

001015d6 <__swap>:
	 * any of these registers into the k_thread.  Only the 'esp' register
	 * after all the pushes have been performed) will be stored in the
	 * k_thread.
	 */

	pushl	%edi
  1015d6:	57                   	push   %edi

	movl	$_kernel, %edi
  1015d7:	bf a0 9f 10 00       	mov    $0x109fa0,%edi

	pushl	%esi
  1015dc:	56                   	push   %esi
	pushl	%ebx
  1015dd:	53                   	push   %ebx
	pushl	%ebp
  1015de:	55                   	push   %ebp
	 * -EAGAIN eliminates the need for the timeout code to set it.
	 * If another value is ever needed, it can be modified with
	 * _set_thread_return_value().
	 */

	pushl   _k_neg_eagain
  1015df:	ff 35 54 87 10 00    	pushl  0x108754


	/* save esp into k_thread structure */

	movl	_kernel_offset_to_current(%edi), %edx
  1015e5:	8b 57 08             	mov    0x8(%edi),%edx
	movl	%esp, _thread_offset_to_esp(%edx)
  1015e8:	89 62 28             	mov    %esp,0x28(%edx)
	/* Register the context switch */
	push %edx
	call	_sys_k_event_logger_context_switch
	pop %edx
#endif
	movl	_kernel_offset_to_ready_q_cache(%edi), %eax
  1015eb:	8b 47 14             	mov    0x14(%edi),%eax

#endif /* CONFIG_FP_SHARING */

	/* update _kernel.current to reflect incoming thread */

	movl    %eax, _kernel_offset_to_current(%edi)
  1015ee:	89 47 08             	mov    %eax,0x8(%edi)

	/* recover thread stack pointer from k_thread */

	movl	_thread_offset_to_esp(%eax), %esp
  1015f1:	8b 60 28             	mov    0x28(%eax),%esp


	/* load return value from a possible _set_thread_return_value() */

	popl	%eax
  1015f4:	58                   	pop    %eax

	/* pop the non-volatile registers from the stack */

	popl	%ebp
  1015f5:	5d                   	pop    %ebp
	popl	%ebx
  1015f6:	5b                   	pop    %ebx
	popl	%esi
  1015f7:	5e                   	pop    %esi
	popl	%edi
  1015f8:	5f                   	pop    %edi
	 * - -EINVAL
	 */

	/* Utilize the 'eflags' parameter to __swap() */

	pushl	4(%esp)
  1015f9:	ff 74 24 04          	pushl  0x4(%esp)
	/* restore __swap's %eax */
	popl	%eax

skipIntLatencyStop:
#endif
	popfl
  1015fd:	9d                   	popf   
	jne time_read_not_needed
	movw $0x2,__read_swap_end_time_value
	read_tsc __common_var_swap_end_time
time_read_not_needed:
#endif
	ret
  1015fe:	c3                   	ret    

001015ff <_SysFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN __weak void _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
  1015ff:	55                   	push   %ebp
  101600:	89 e5                	mov    %esp,%ebp
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
  101602:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
  101606:	74 54                	je     10165c <_SysFatalErrorHandler+0x5d>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
  101608:	e8 af 45 00 00       	call   105bbc <k_is_in_isr>
  10160d:	85 c0                	test   %eax,%eax
  10160f:	74 15                	je     101626 <_SysFatalErrorHandler+0x27>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
  101611:	e8 a6 45 00 00       	call   105bbc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
  101616:	ba a0 67 10 00       	mov    $0x1067a0,%edx
  10161b:	85 c0                	test   %eax,%eax
  10161d:	75 30                	jne    10164f <_SysFatalErrorHandler+0x50>
  10161f:	ba a4 67 10 00       	mov    $0x1067a4,%edx
  101624:	eb 29                	jmp    10164f <_SysFatalErrorHandler+0x50>
	if (k_is_in_isr() || _is_thread_essential()) {
  101626:	e8 a2 45 00 00       	call   105bcd <_is_thread_essential>
  10162b:	85 c0                	test   %eax,%eax
  10162d:	75 e2                	jne    101611 <_SysFatalErrorHandler+0x12>
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
  10162f:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  101635:	68 d5 67 10 00       	push   $0x1067d5
  10163a:	e8 d6 f6 ff ff       	call   100d15 <printk>
  10163f:	58                   	pop    %eax
  101640:	5a                   	pop    %edx

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
  101641:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  101647:	e8 08 48 00 00       	call   105e54 <_impl_k_thread_abort>
  10164c:	59                   	pop    %ecx
  10164d:	eb 0d                	jmp    10165c <_SysFatalErrorHandler+0x5d>
		printk("Fatal fault in %s! Spinning...\n",
  10164f:	52                   	push   %edx
  101650:	68 b5 67 10 00       	push   $0x1067b5
  101655:	e8 bb f6 ff ff       	call   100d15 <printk>
  10165a:	58                   	pop    %eax
  10165b:	5a                   	pop    %edx
	 * -device isa-debug-exit,iobase=0xf4,iosize=0x04
	 */
	sys_out32(0, 0xf4);
#else
	for (;;) {
		k_cpu_idle();
  10165c:	e8 c0 fe ff ff       	call   101521 <k_cpu_idle>
  101661:	eb f9                	jmp    10165c <_SysFatalErrorHandler+0x5d>

00101663 <_new_thread>:
 */
void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stack_size, k_thread_entry_t entry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
  101663:	55                   	push   %ebp
  101664:	89 e5                	mov    %esp,%ebp
  101666:	53                   	push   %ebx
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
  101667:	ff 75 28             	pushl  0x28(%ebp)
  10166a:	6a 04                	push   $0x4
  10166c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10166f:	ff 75 24             	pushl  0x24(%ebp)
  101672:	53                   	push   %ebx
  101673:	e8 a2 47 00 00       	call   105e1a <_init_thread_base>
#if CONFIG_X86_STACK_PROTECTION
	_x86_mmu_set_flags(stack, MMU_PAGE_SIZE, MMU_ENTRY_NOT_PRESENT,
			   MMU_PTE_P_MASK);
#endif

	stack_high = (char *)STACK_ROUND_DOWN(stack_buf + stack_size);
  101678:	8b 45 0c             	mov    0xc(%ebp),%eax

	/* Create an initial context on the stack expected by _Swap() */
	initial_frame = (struct _x86_initial_frame *)
		(stack_high - sizeof(struct _x86_initial_frame));
	/* _thread_entry() arguments */
	initial_frame->entry = entry;
  10167b:	8b 55 14             	mov    0x14(%ebp),%edx
	stack_high = (char *)STACK_ROUND_DOWN(stack_buf + stack_size);
  10167e:	03 45 10             	add    0x10(%ebp),%eax

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
  101681:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
  101688:	83 e0 fc             	and    $0xfffffffc,%eax
	thread->fn_abort = NULL;
  10168b:	c7 43 30 00 00 00 00 	movl   $0x0,0x30(%ebx)
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
  101692:	83 c4 10             	add    $0x10,%esp
	initial_frame->entry = entry;
  101695:	89 50 f0             	mov    %edx,-0x10(%eax)
	initial_frame->p1 = parameter1;
  101698:	8b 55 18             	mov    0x18(%ebp),%edx
  10169b:	89 50 f4             	mov    %edx,-0xc(%eax)
	initial_frame->p2 = parameter2;
  10169e:	8b 55 1c             	mov    0x1c(%ebp),%edx
  1016a1:	89 50 f8             	mov    %edx,-0x8(%eax)
	initial_frame->p3 = parameter3;
  1016a4:	8b 55 20             	mov    0x20(%ebp),%edx
  1016a7:	89 50 fc             	mov    %edx,-0x4(%eax)
 */
static inline unsigned int EflagsGet(void)
{
	unsigned int eflags; /* EFLAGS register contents */

	__asm__ volatile(
  1016aa:	9c                   	pushf  
  1016ab:	5a                   	pop    %edx
	/* initial EFLAGS; only modify IF and IOPL bits */
	initial_frame->eflags = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
  1016ac:	80 e6 cd             	and    $0xcd,%dh
	{
#ifdef WRAPPER_REQUIRED
		initial_frame->edi = (u32_t)_thread_entry;
		initial_frame->_thread_entry = _x86_thread_entry_wrapper;
#else
		initial_frame->_thread_entry = _thread_entry;
  1016af:	c7 40 e8 dd 5b 10 00 	movl   $0x105bdd,-0x18(%eax)
	initial_frame->eflags = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
  1016b6:	80 ce 02             	or     $0x2,%dh
	initial_frame = (struct _x86_initial_frame *)
  1016b9:	83 e8 2c             	sub    $0x2c,%eax
	initial_frame->eflags = (EflagsGet() & ~EFLAGS_MASK) | EFLAGS_INITIAL;
  1016bc:	89 50 18             	mov    %edx,0x18(%eax)
	initial_frame = (struct _x86_initial_frame *)
  1016bf:	89 43 28             	mov    %eax,0x28(%ebx)
#endif /* CONFIG_FP_SHARING || CONFIG_GDB_INFO */
#ifdef CONFIG_THREAD_MONITOR
	thread->entry = (struct __thread_entry *)&initial_frame->entry;
	thread_monitor_init(thread);
#endif
}
  1016c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1016c5:	c9                   	leave  
  1016c6:	c3                   	ret    

001016c7 <_debug_fatal_hook>:
#include <arch/x86/irq_controller.h>
#include <arch/x86/segmentation.h>
#include <exception.h>
#include <inttypes.h>

__weak void _debug_fatal_hook(const NANO_ESF *esf) { ARG_UNUSED(esf); }
  1016c7:	55                   	push   %ebp
  1016c8:	89 e5                	mov    %esp,%ebp
  1016ca:	5d                   	pop    %ebp
  1016cb:	c3                   	ret    

001016cc <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
  1016cc:	55                   	push   %ebp
  1016cd:	89 e5                	mov    %esp,%ebp
  1016cf:	57                   	push   %edi
  1016d0:	56                   	push   %esi
  1016d1:	53                   	push   %ebx
  1016d2:	83 ec 28             	sub    $0x28,%esp
  1016d5:	8b 75 08             	mov    0x8(%ebp),%esi
  1016d8:	8b 7d 0c             	mov    0xc(%ebp),%edi
	_debug_fatal_hook(pEsf);
  1016db:	57                   	push   %edi
  1016dc:	e8 e6 ff ff ff       	call   1016c7 <_debug_fatal_hook>
  1016e1:	58                   	pop    %eax

#ifdef CONFIG_PRINTK

	/* Display diagnostic information about the error */

	switch (reason) {
  1016e2:	83 fe 08             	cmp    $0x8,%esi
  1016e5:	77 4c                	ja     101733 <_NanoFatalErrorHandler+0x67>
  1016e7:	ff 24 b5 54 69 10 00 	jmp    *0x106954(,%esi,4)
 * @return the vector of the interrupt that is currently being processed, or
 * -1 if this can't be determined
 */
static inline int _irq_controller_isr_vector_get(void)
{
	return __irq_controller_isr_vector_get();
  1016ee:	e8 d7 0a 00 00       	call   1021ca <__irq_controller_isr_vector_get>
		break;

	case _NANO_ERR_SPURIOUS_INT: {
		int vector = _irq_controller_isr_vector_get();

		printk("***** Unhandled interrupt vector ");
  1016f3:	68 fa 67 10 00       	push   $0x1067fa
  1016f8:	89 c3                	mov    %eax,%ebx
  1016fa:	e8 16 f6 ff ff       	call   100d15 <printk>
  1016ff:	58                   	pop    %eax
		if (vector >= 0) {
  101700:	85 db                	test   %ebx,%ebx
  101702:	78 0d                	js     101711 <_NanoFatalErrorHandler+0x45>
			printk("%d ", vector);
  101704:	53                   	push   %ebx
  101705:	68 1c 68 10 00       	push   $0x10681c
  10170a:	e8 06 f6 ff ff       	call   100d15 <printk>
  10170f:	5b                   	pop    %ebx
  101710:	58                   	pop    %eax
		}
		printk("*****\n");
  101711:	68 33 68 10 00       	push   $0x106833
  101716:	eb 05                	jmp    10171d <_NanoFatalErrorHandler+0x51>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
  101718:	68 20 68 10 00       	push   $0x106820
  10171d:	e8 f3 f5 ff ff       	call   100d15 <printk>
  101722:	59                   	pop    %ecx
		break;
  101723:	eb 1b                	jmp    101740 <_NanoFatalErrorHandler+0x74>

	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
  101725:	68 3a 68 10 00       	push   $0x10683a
  10172a:	eb f1                	jmp    10171d <_NanoFatalErrorHandler+0x51>
		break;

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
  10172c:	68 55 68 10 00       	push   $0x106855
  101731:	eb ea                	jmp    10171d <_NanoFatalErrorHandler+0x51>
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
  101733:	56                   	push   %esi
  101734:	68 7b 68 10 00       	push   $0x10687b
  101739:	e8 d7 f5 ff ff       	call   100d15 <printk>
  10173e:	58                   	pop    %eax
  10173f:	5a                   	pop    %edx
		break;
	}

	printk("Current thread ID = %p\n"
  101740:	8b 47 04             	mov    0x4(%edi),%eax
  101743:	8b 4f 2c             	mov    0x2c(%edi),%ecx
  101746:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101749:	8b 47 10             	mov    0x10(%edi),%eax
  10174c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10174f:	8b 47 0c             	mov    0xc(%edi),%eax
  101752:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101755:	8b 47 14             	mov    0x14(%edi),%eax
  101758:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10175b:	8b 47 1c             	mov    0x1c(%edi),%eax
  10175e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101761:	8b 47 08             	mov    0x8(%edi),%eax
  101764:	89 45 dc             	mov    %eax,-0x24(%ebp)
  101767:	8b 47 18             	mov    0x18(%edi),%eax
  10176a:	8b 17                	mov    (%edi),%edx
  10176c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10176f:	8b 47 24             	mov    0x24(%edi),%eax
  101772:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101775:	89 55 d0             	mov    %edx,-0x30(%ebp)
  101778:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10177b:	0f b7 5f 28          	movzwl 0x28(%edi),%ebx
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
  10177f:	e8 48 40 00 00       	call   1057cc <_impl_k_current_get>
  101784:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  101787:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10178a:	51                   	push   %ecx
  10178b:	52                   	push   %edx
  10178c:	ff 75 f0             	pushl  -0x10(%ebp)
  10178f:	ff 75 ec             	pushl  -0x14(%ebp)
  101792:	ff 75 e8             	pushl  -0x18(%ebp)
  101795:	ff 75 e4             	pushl  -0x1c(%ebp)
  101798:	ff 75 e0             	pushl  -0x20(%ebp)
  10179b:	ff 75 dc             	pushl  -0x24(%ebp)
  10179e:	ff 75 d8             	pushl  -0x28(%ebp)
  1017a1:	ff 75 d4             	pushl  -0x2c(%ebp)
  1017a4:	53                   	push   %ebx
  1017a5:	50                   	push   %eax
  1017a6:	68 9e 68 10 00       	push   $0x10689e
  1017ab:	e8 65 f5 ff ff       	call   100d15 <printk>
  1017b0:	83 c4 34             	add    $0x34,%esp
	/*
	 * Error was fatal to a kernel task or a thread; invoke the system
	 * fatal error handling policy defined for the platform.
	 */

	_SysFatalErrorHandler(reason, pEsf);
  1017b3:	57                   	push   %edi
  1017b4:	56                   	push   %esi
  1017b5:	e8 45 fe ff ff       	call   1015ff <_SysFatalErrorHandler>

001017ba <generic_exc_handle>:

#if CONFIG_EXCEPTION_DEBUG

static FUNC_NORETURN void generic_exc_handle(unsigned int vector,
					     const NANO_ESF *pEsf)
{
  1017ba:	55                   	push   %ebp
  1017bb:	89 e5                	mov    %esp,%ebp
  1017bd:	56                   	push   %esi
  1017be:	53                   	push   %ebx
  1017bf:	89 c3                	mov    %eax,%ebx
	printk("***** ");
  1017c1:	68 78 69 10 00       	push   $0x106978
{
  1017c6:	89 d6                	mov    %edx,%esi
	printk("***** ");
  1017c8:	e8 48 f5 ff ff       	call   100d15 <printk>
  1017cd:	58                   	pop    %eax
	if (vector == 13) {
  1017ce:	83 fb 0d             	cmp    $0xd,%ebx
  1017d1:	75 0d                	jne    1017e0 <generic_exc_handle+0x26>
		printk("General Protection Fault\n");
  1017d3:	68 7f 69 10 00       	push   $0x10697f
  1017d8:	e8 38 f5 ff ff       	call   100d15 <printk>
  1017dd:	58                   	pop    %eax
  1017de:	eb 0d                	jmp    1017ed <generic_exc_handle+0x33>
	} else {
		printk("CPU exception %d\n", vector);
  1017e0:	53                   	push   %ebx
  1017e1:	68 99 69 10 00       	push   $0x106999
  1017e6:	e8 2a f5 ff ff       	call   100d15 <printk>
  1017eb:	59                   	pop    %ecx
  1017ec:	58                   	pop    %eax
	}
	if ((1 << vector) & _EXC_ERROR_CODE_FAULTS) {
  1017ed:	b8 00 7d 02 00       	mov    $0x27d00,%eax
  1017f2:	0f a3 d8             	bt     %ebx,%eax
  1017f5:	73 0f                	jae    101806 <generic_exc_handle+0x4c>
		printk("***** Exception code: 0x%x\n", pEsf->errorCode);
  1017f7:	ff 76 20             	pushl  0x20(%esi)
  1017fa:	68 ab 69 10 00       	push   $0x1069ab
  1017ff:	e8 11 f5 ff ff       	call   100d15 <printk>
  101804:	58                   	pop    %eax
  101805:	5a                   	pop    %edx
	}
	_NanoFatalErrorHandler(_NANO_ERR_CPU_EXCEPTION, pEsf);
  101806:	56                   	push   %esi
  101807:	6a 06                	push   $0x6
  101809:	e8 be fe ff ff       	call   1016cc <_NanoFatalErrorHandler>

0010180e <_do_kernel_oops>:
{
  10180e:	55                   	push   %ebp
  10180f:	89 e5                	mov    %esp,%ebp
  101811:	8b 45 08             	mov    0x8(%ebp),%eax
	_NanoFatalErrorHandler(esf->reason, &esf->nano_esf);
  101814:	50                   	push   %eax
  101815:	ff 70 30             	pushl  0x30(%eax)
  101818:	e8 af fe ff ff       	call   1016cc <_NanoFatalErrorHandler>

0010181d <handle_exc_0>:
	_EXC_FUNC_NOCODE(vector)

#define EXC_FUNC_CODE(vector) \
	_EXC_FUNC_CODE(vector)

EXC_FUNC_NOCODE(IV_DIVIDE_ERROR);
  10181d:	55                   	push   %ebp
  10181e:	31 c0                	xor    %eax,%eax
  101820:	89 e5                	mov    %esp,%ebp
  101822:	8b 55 08             	mov    0x8(%ebp),%edx
  101825:	e8 90 ff ff ff       	call   1017ba <generic_exc_handle>

0010182a <handle_exc_2>:
EXC_FUNC_NOCODE(IV_NON_MASKABLE_INTERRUPT);
  10182a:	55                   	push   %ebp
  10182b:	b8 02 00 00 00       	mov    $0x2,%eax
  101830:	89 e5                	mov    %esp,%ebp
  101832:	8b 55 08             	mov    0x8(%ebp),%edx
  101835:	e8 80 ff ff ff       	call   1017ba <generic_exc_handle>

0010183a <handle_exc_4>:
EXC_FUNC_NOCODE(IV_OVERFLOW);
  10183a:	55                   	push   %ebp
  10183b:	b8 04 00 00 00       	mov    $0x4,%eax
  101840:	89 e5                	mov    %esp,%ebp
  101842:	8b 55 08             	mov    0x8(%ebp),%edx
  101845:	e8 70 ff ff ff       	call   1017ba <generic_exc_handle>

0010184a <handle_exc_5>:
EXC_FUNC_NOCODE(IV_BOUND_RANGE);
  10184a:	55                   	push   %ebp
  10184b:	b8 05 00 00 00       	mov    $0x5,%eax
  101850:	89 e5                	mov    %esp,%ebp
  101852:	8b 55 08             	mov    0x8(%ebp),%edx
  101855:	e8 60 ff ff ff       	call   1017ba <generic_exc_handle>

0010185a <handle_exc_6>:
EXC_FUNC_NOCODE(IV_INVALID_OPCODE);
  10185a:	55                   	push   %ebp
  10185b:	b8 06 00 00 00       	mov    $0x6,%eax
  101860:	89 e5                	mov    %esp,%ebp
  101862:	8b 55 08             	mov    0x8(%ebp),%edx
  101865:	e8 50 ff ff ff       	call   1017ba <generic_exc_handle>

0010186a <handle_exc_7>:
EXC_FUNC_NOCODE(IV_DEVICE_NOT_AVAILABLE);
  10186a:	55                   	push   %ebp
  10186b:	b8 07 00 00 00       	mov    $0x7,%eax
  101870:	89 e5                	mov    %esp,%ebp
  101872:	8b 55 08             	mov    0x8(%ebp),%edx
  101875:	e8 40 ff ff ff       	call   1017ba <generic_exc_handle>

0010187a <handle_exc_8>:
#ifndef CONFIG_X86_ENABLE_TSS
EXC_FUNC_NOCODE(IV_DOUBLE_FAULT);
  10187a:	55                   	push   %ebp
  10187b:	b8 08 00 00 00       	mov    $0x8,%eax
  101880:	89 e5                	mov    %esp,%ebp
  101882:	8b 55 08             	mov    0x8(%ebp),%edx
  101885:	e8 30 ff ff ff       	call   1017ba <generic_exc_handle>

0010188a <handle_exc_10>:
#endif
EXC_FUNC_CODE(IV_INVALID_TSS);
  10188a:	55                   	push   %ebp
  10188b:	b8 0a 00 00 00       	mov    $0xa,%eax
  101890:	89 e5                	mov    %esp,%ebp
  101892:	8b 55 08             	mov    0x8(%ebp),%edx
  101895:	e8 20 ff ff ff       	call   1017ba <generic_exc_handle>

0010189a <handle_exc_11>:
EXC_FUNC_CODE(IV_SEGMENT_NOT_PRESENT);
  10189a:	55                   	push   %ebp
  10189b:	b8 0b 00 00 00       	mov    $0xb,%eax
  1018a0:	89 e5                	mov    %esp,%ebp
  1018a2:	8b 55 08             	mov    0x8(%ebp),%edx
  1018a5:	e8 10 ff ff ff       	call   1017ba <generic_exc_handle>

001018aa <handle_exc_12>:
EXC_FUNC_CODE(IV_STACK_FAULT);
  1018aa:	55                   	push   %ebp
  1018ab:	b8 0c 00 00 00       	mov    $0xc,%eax
  1018b0:	89 e5                	mov    %esp,%ebp
  1018b2:	8b 55 08             	mov    0x8(%ebp),%edx
  1018b5:	e8 00 ff ff ff       	call   1017ba <generic_exc_handle>

001018ba <handle_exc_13>:
EXC_FUNC_CODE(IV_GENERAL_PROTECTION);
  1018ba:	55                   	push   %ebp
  1018bb:	b8 0d 00 00 00       	mov    $0xd,%eax
  1018c0:	89 e5                	mov    %esp,%ebp
  1018c2:	8b 55 08             	mov    0x8(%ebp),%edx
  1018c5:	e8 f0 fe ff ff       	call   1017ba <generic_exc_handle>

001018ca <handle_exc_16>:
EXC_FUNC_NOCODE(IV_X87_FPU_FP_ERROR);
  1018ca:	55                   	push   %ebp
  1018cb:	b8 10 00 00 00       	mov    $0x10,%eax
  1018d0:	89 e5                	mov    %esp,%ebp
  1018d2:	8b 55 08             	mov    0x8(%ebp),%edx
  1018d5:	e8 e0 fe ff ff       	call   1017ba <generic_exc_handle>

001018da <handle_exc_17>:
EXC_FUNC_CODE(IV_ALIGNMENT_CHECK);
  1018da:	55                   	push   %ebp
  1018db:	b8 11 00 00 00       	mov    $0x11,%eax
  1018e0:	89 e5                	mov    %esp,%ebp
  1018e2:	8b 55 08             	mov    0x8(%ebp),%edx
  1018e5:	e8 d0 fe ff ff       	call   1017ba <generic_exc_handle>

001018ea <handle_exc_18>:
EXC_FUNC_NOCODE(IV_MACHINE_CHECK);
  1018ea:	55                   	push   %ebp
  1018eb:	b8 12 00 00 00       	mov    $0x12,%eax
  1018f0:	89 e5                	mov    %esp,%ebp
  1018f2:	8b 55 08             	mov    0x8(%ebp),%edx
  1018f5:	e8 c0 fe ff ff       	call   1017ba <generic_exc_handle>

001018fa <page_fault_handler>:
	dump_entry_flags(pte_flags);
}
#endif

FUNC_NORETURN void page_fault_handler(const NANO_ESF *pEsf)
{
  1018fa:	55                   	push   %ebp
  1018fb:	89 e5                	mov    %esp,%ebp
  1018fd:	57                   	push   %edi
  1018fe:	56                   	push   %esi
  1018ff:	53                   	push   %ebx
  101900:	8b 75 08             	mov    0x8(%ebp),%esi
	u32_t err, cr2;

	/* See Section 6.15 of the IA32 Software Developer's Manual vol 3 */
	__asm__ ("mov %%cr2, %0" : "=r" (cr2));
  101903:	0f 20 d7             	mov    %cr2,%edi

	err = pEsf->errorCode;
  101906:	8b 5e 20             	mov    0x20(%esi),%ebx
	printk("***** CPU Page Fault (error code 0x%08x)\n", err);
  101909:	53                   	push   %ebx
  10190a:	68 e6 69 10 00       	push   $0x1069e6
  10190f:	e8 01 f4 ff ff       	call   100d15 <printk>
  101914:	58                   	pop    %eax

	printk("%s thread %s address 0x%08x\n",
  101915:	f6 c3 10             	test   $0x10,%bl
	printk("***** CPU Page Fault (error code 0x%08x)\n", err);
  101918:	5a                   	pop    %edx
	printk("%s thread %s address 0x%08x\n",
  101919:	b8 c7 69 10 00       	mov    $0x1069c7,%eax
  10191e:	75 0f                	jne    10192f <page_fault_handler+0x35>
	       err & US ? "User" : "Supervisor",
	       err & ID ? "executed" : (err & WR ? "wrote" : "read"),
  101920:	b8 d0 69 10 00       	mov    $0x1069d0,%eax
  101925:	f6 c3 02             	test   $0x2,%bl
  101928:	75 05                	jne    10192f <page_fault_handler+0x35>
  10192a:	b8 b0 67 10 00       	mov    $0x1067b0,%eax
	printk("%s thread %s address 0x%08x\n",
  10192f:	ba d6 69 10 00       	mov    $0x1069d6,%edx
  101934:	80 e3 04             	and    $0x4,%bl
  101937:	75 05                	jne    10193e <page_fault_handler+0x44>
  101939:	ba db 69 10 00       	mov    $0x1069db,%edx
  10193e:	57                   	push   %edi
  10193f:	50                   	push   %eax
  101940:	52                   	push   %edx
  101941:	68 10 6a 10 00       	push   $0x106a10
  101946:	e8 ca f3 ff ff       	call   100d15 <printk>
  10194b:	83 c4 10             	add    $0x10,%esp

#ifdef CONFIG_X86_MMU
	dump_mmu_flags((void *)cr2);
#endif

	_NanoFatalErrorHandler(_NANO_ERR_CPU_EXCEPTION, pEsf);
  10194e:	56                   	push   %esi
  10194f:	6a 06                	push   $0x6
  101951:	e8 76 fd ff ff       	call   1016cc <_NanoFatalErrorHandler>

00101956 <_impl_uart_irq_rx_disable>:

static inline void _impl_uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_rx_disable) {
  101956:	8b 50 04             	mov    0x4(%eax),%edx
  101959:	8b 52 24             	mov    0x24(%edx),%edx
  10195c:	85 d2                	test   %edx,%edx
  10195e:	74 08                	je     101968 <_impl_uart_irq_rx_disable+0x12>
{
  101960:	55                   	push   %ebp
  101961:	89 e5                	mov    %esp,%ebp
		api->irq_rx_disable(dev);
  101963:	50                   	push   %eax
  101964:	ff d2                	call   *%edx
  101966:	58                   	pop    %eax
	}
}
  101967:	c9                   	leave  
  101968:	c3                   	ret    

00101969 <uart_poll_out>:

K_SYSCALL_DECLARE1(K_SYSCALL_UART_ERR_CHECK, uart_err_check, int, struct device *, dev);

K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_IN, uart_poll_in, int, struct device *, dev, unsigned char *, p_char);

K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_OUT, uart_poll_out, unsigned char, struct device *, dev, unsigned char, out_char);
  101969:	55                   	push   %ebp
	return api->poll_out(dev, out_char);
  10196a:	8b 48 04             	mov    0x4(%eax),%ecx
  10196d:	89 e5                	mov    %esp,%ebp
  10196f:	0f b6 d2             	movzbl %dl,%edx
  101972:	52                   	push   %edx
  101973:	50                   	push   %eax
  101974:	ff 51 04             	call   *0x4(%ecx)
  101977:	5a                   	pop    %edx
  101978:	59                   	pop    %ecx
  101979:	c9                   	leave  
  10197a:	c3                   	ret    

0010197b <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
  10197b:	55                   	push   %ebp
  10197c:	89 e5                	mov    %esp,%ebp
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
  10197e:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
  101982:	75 0f                	jne    101993 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
  101984:	ba 0d 00 00 00       	mov    $0xd,%edx
  101989:	a1 58 93 10 00       	mov    0x109358,%eax
  10198e:	e8 d6 ff ff ff       	call   101969 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
  101993:	0f b6 55 08          	movzbl 0x8(%ebp),%edx
  101997:	a1 58 93 10 00       	mov    0x109358,%eax
  10199c:	e8 c8 ff ff ff       	call   101969 <uart_poll_out>

	return c;
}
  1019a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1019a4:	5d                   	pop    %ebp
  1019a5:	c3                   	ret    

001019a6 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
  1019a6:	55                   	push   %ebp
  1019a7:	89 c1                	mov    %eax,%ecx
  1019a9:	89 e5                	mov    %esp,%ebp
  1019ab:	56                   	push   %esi
  1019ac:	53                   	push   %ebx
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
  1019ad:	8b 00                	mov    (%eax),%eax
  1019af:	89 c6                	mov    %eax,%esi
  1019b1:	89 c3                	mov    %eax,%ebx
  1019b3:	09 d6                	or     %edx,%esi
  1019b5:	f0 0f b1 31          	lock cmpxchg %esi,(%ecx)
  1019b9:	75 f4                	jne    1019af <atomic_or+0x9>
}
  1019bb:	89 d8                	mov    %ebx,%eax
  1019bd:	5b                   	pop    %ebx
  1019be:	5e                   	pop    %esi
  1019bf:	5d                   	pop    %ebp
  1019c0:	c3                   	ret    

001019c1 <del_char>:
	/* Move cursor back to right place */
	cursor_restore();
}

static void del_char(char *pos, u8_t end)
{
  1019c1:	55                   	push   %ebp
  1019c2:	89 e5                	mov    %esp,%ebp
  1019c4:	57                   	push   %edi
  1019c5:	89 d7                	mov    %edx,%edi
  1019c7:	56                   	push   %esi
  1019c8:	89 d6                	mov    %edx,%esi
  1019ca:	53                   	push   %ebx
	uart_poll_out(uart_console_dev, '\b');
  1019cb:	ba 08 00 00 00       	mov    $0x8,%edx
{
  1019d0:	89 c3                	mov    %eax,%ebx
	uart_poll_out(uart_console_dev, '\b');
  1019d2:	a1 58 93 10 00       	mov    0x109358,%eax
  1019d7:	e8 8d ff ff ff       	call   101969 <uart_poll_out>

	if (end == 0) {
  1019dc:	89 f0                	mov    %esi,%eax
  1019de:	84 c0                	test   %al,%al
  1019e0:	75 25                	jne    101a07 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
  1019e2:	ba 20 00 00 00       	mov    $0x20,%edx
  1019e7:	a1 58 93 10 00       	mov    0x109358,%eax
  1019ec:	e8 78 ff ff ff       	call   101969 <uart_poll_out>
		uart_poll_out(uart_console_dev, '\b');
  1019f1:	a1 58 93 10 00       	mov    0x109358,%eax

	uart_poll_out(uart_console_dev, ' ');

	/* Move cursor back to right place */
	cursor_restore();
}
  1019f6:	8d 65 f4             	lea    -0xc(%ebp),%esp
		uart_poll_out(uart_console_dev, '\b');
  1019f9:	ba 08 00 00 00       	mov    $0x8,%edx
}
  1019fe:	5b                   	pop    %ebx
  1019ff:	5e                   	pop    %esi
  101a00:	5f                   	pop    %edi
  101a01:	5d                   	pop    %ebp
		uart_poll_out(uart_console_dev, '\b');
  101a02:	e9 62 ff ff ff       	jmp    101969 <uart_poll_out>
	printk("\x1b[s");
  101a07:	68 2d 6a 10 00       	push   $0x106a2d
  101a0c:	e8 04 f3 ff ff       	call   100d15 <printk>
  101a11:	5a                   	pop    %edx
		*pos = *(pos + 1);
  101a12:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
		uart_poll_out(uart_console_dev, *(pos++));
  101a16:	a1 58 93 10 00       	mov    0x109358,%eax
		*pos = *(pos + 1);
  101a1b:	88 13                	mov    %dl,(%ebx)
		uart_poll_out(uart_console_dev, *(pos++));
  101a1d:	e8 47 ff ff ff       	call   101969 <uart_poll_out>
	while (end-- > 0) {
  101a22:	89 f8                	mov    %edi,%eax
		uart_poll_out(uart_console_dev, *(pos++));
  101a24:	43                   	inc    %ebx
	while (end-- > 0) {
  101a25:	fe c8                	dec    %al
  101a27:	89 c7                	mov    %eax,%edi
  101a29:	75 e7                	jne    101a12 <del_char+0x51>
	uart_poll_out(uart_console_dev, ' ');
  101a2b:	ba 20 00 00 00       	mov    $0x20,%edx
  101a30:	a1 58 93 10 00       	mov    0x109358,%eax
  101a35:	e8 2f ff ff ff       	call   101969 <uart_poll_out>
	printk("\x1b[u");
  101a3a:	68 31 6a 10 00       	push   $0x106a31
  101a3f:	e8 d1 f2 ff ff       	call   100d15 <printk>
  101a44:	58                   	pop    %eax
}
  101a45:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101a48:	5b                   	pop    %ebx
  101a49:	5e                   	pop    %esi
  101a4a:	5f                   	pop    %edi
  101a4b:	5d                   	pop    %ebp
  101a4c:	c3                   	ret    

00101a4d <uart_console_isr>:

void uart_console_isr(struct device *unused)
{
	ARG_UNUSED(unused);

	while (uart_irq_update(uart_console_dev) &&
  101a4d:	8b 15 58 93 10 00    	mov    0x109358,%edx

static inline int _impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_update) {
  101a53:	8b 42 04             	mov    0x4(%edx),%eax
  101a56:	8b 40 3c             	mov    0x3c(%eax),%eax
  101a59:	85 c0                	test   %eax,%eax
  101a5b:	0f 85 9b 00 00 00    	jne    101afc <uart_console_isr+0xaf>
  101a61:	e9 95 00 00 00       	jmp    101afb <uart_console_isr+0xae>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
  101a66:	ba 08 00 00 00       	mov    $0x8,%edx
  101a6b:	b8 48 93 10 00       	mov    $0x109348,%eax
  101a70:	e8 31 ff ff ff       	call   1019a6 <atomic_or>
		ansi_val = byte - '0';
  101a75:	89 3d 44 93 10 00    	mov    %edi,0x109344
		ansi_val_2 = 0;
  101a7b:	c7 05 40 93 10 00 00 	movl   $0x0,0x109340
  101a82:	00 00 00 
	while (uart_irq_update(uart_console_dev) &&
  101a85:	8b 15 58 93 10 00    	mov    0x109358,%edx
  101a8b:	8b 42 04             	mov    0x4(%edx),%eax
  101a8e:	8b 40 3c             	mov    0x3c(%eax),%eax
  101a91:	85 c0                	test   %eax,%eax
  101a93:	74 5f                	je     101af4 <uart_console_isr+0xa7>
		return api->irq_update(dev);
  101a95:	52                   	push   %edx
  101a96:	ff d0                	call   *%eax
  101a98:	59                   	pop    %ecx
  101a99:	85 c0                	test   %eax,%eax
  101a9b:	74 57                	je     101af4 <uart_console_isr+0xa7>
	       uart_irq_is_pending(uart_console_dev)) {
  101a9d:	8b 15 58 93 10 00    	mov    0x109358,%edx
	if (api->irq_is_pending)	{
  101aa3:	8b 42 04             	mov    0x4(%edx),%eax
  101aa6:	8b 40 38             	mov    0x38(%eax),%eax
  101aa9:	85 c0                	test   %eax,%eax
  101aab:	74 47                	je     101af4 <uart_console_isr+0xa7>
		return api->irq_is_pending(dev);
  101aad:	52                   	push   %edx
  101aae:	ff d0                	call   *%eax
  101ab0:	5a                   	pop    %edx
	while (uart_irq_update(uart_console_dev) &&
  101ab1:	85 c0                	test   %eax,%eax
  101ab3:	74 3f                	je     101af4 <uart_console_isr+0xa7>
		static struct console_input *cmd;
		u8_t byte;
		int rx;

		if (!uart_irq_rx_ready(uart_console_dev)) {
  101ab5:	8b 15 58 93 10 00    	mov    0x109358,%edx
	if (api->irq_rx_ready) {
  101abb:	8b 42 04             	mov    0x4(%edx),%eax
  101abe:	8b 40 2c             	mov    0x2c(%eax),%eax
  101ac1:	85 c0                	test   %eax,%eax
  101ac3:	74 c0                	je     101a85 <uart_console_isr+0x38>
		return api->irq_rx_ready(dev);
  101ac5:	52                   	push   %edx
  101ac6:	ff d0                	call   *%eax
  101ac8:	5b                   	pop    %ebx
  101ac9:	85 c0                	test   %eax,%eax
  101acb:	74 b8                	je     101a85 <uart_console_isr+0x38>
			continue;
		}

		/* Character(s) have been received */

		rx = read_uart(uart_console_dev, &byte, 1);
  101acd:	8b 1d 58 93 10 00    	mov    0x109358,%ebx
	if (api->fifo_read) {
  101ad3:	8b 43 04             	mov    0x4(%ebx),%eax
  101ad6:	8b 40 10             	mov    0x10(%eax),%eax
  101ad9:	85 c0                	test   %eax,%eax
  101adb:	74 2a                	je     101b07 <uart_console_isr+0xba>
		return api->fifo_read(dev, rx_data, size);
  101add:	8d 75 f3             	lea    -0xd(%ebp),%esi
  101ae0:	6a 01                	push   $0x1
  101ae2:	56                   	push   %esi
  101ae3:	53                   	push   %ebx
  101ae4:	ff d0                	call   *%eax
  101ae6:	83 c4 0c             	add    $0xc,%esp
	if (rx < 0) {
  101ae9:	85 c0                	test   %eax,%eax
  101aeb:	79 1a                	jns    101b07 <uart_console_isr+0xba>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev);
  101aed:	89 d8                	mov    %ebx,%eax
  101aef:	e8 62 fe ff ff       	call   101956 <_impl_uart_irq_rx_disable>
		/* Ignore characters if there's no more buffer space */
		if (cur + end < sizeof(cmd->line) - 1) {
			insert_char(&cmd->line[cur++], byte, end);
		}
	}
}
  101af4:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101af7:	5b                   	pop    %ebx
  101af8:	5e                   	pop    %esi
  101af9:	5f                   	pop    %edi
  101afa:	5d                   	pop    %ebp
  101afb:	c3                   	ret    
{
  101afc:	55                   	push   %ebp
  101afd:	89 e5                	mov    %esp,%ebp
  101aff:	57                   	push   %edi
  101b00:	56                   	push   %esi
  101b01:	53                   	push   %ebx
  101b02:	83 ec 0c             	sub    $0xc,%esp
  101b05:	eb 8e                	jmp    101a95 <uart_console_isr+0x48>
		if (!cmd) {
  101b07:	83 3d 38 93 10 00 00 	cmpl   $0x0,0x109338
  101b0e:	75 18                	jne    101b28 <uart_console_isr+0xdb>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
  101b10:	6a 00                	push   $0x0
  101b12:	ff 35 54 93 10 00    	pushl  0x109354
  101b18:	e8 7a 38 00 00       	call   105397 <k_queue_get>
  101b1d:	5a                   	pop    %edx
  101b1e:	a3 38 93 10 00       	mov    %eax,0x109338
  101b23:	59                   	pop    %ecx
			if (!cmd) {
  101b24:	85 c0                	test   %eax,%eax
  101b26:	74 cc                	je     101af4 <uart_console_isr+0xa7>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  101b28:	a1 48 93 10 00       	mov    0x109348,%eax
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
  101b2d:	a8 02                	test   $0x2,%al
  101b2f:	0f 84 e7 01 00 00    	je     101d1c <uart_console_isr+0x2cf>
			handle_ansi(byte, cmd->line);
  101b35:	8b 35 38 93 10 00    	mov    0x109338,%esi
  101b3b:	8a 5d f3             	mov    -0xd(%ebp),%bl
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
  101b3e:	a1 48 93 10 00       	mov    0x109348,%eax
  101b43:	89 c1                	mov    %eax,%ecx
  101b45:	89 c2                	mov    %eax,%edx
  101b47:	83 e1 fb             	and    $0xfffffffb,%ecx
  101b4a:	f0 0f b1 0d 48 93 10 	lock cmpxchg %ecx,0x109348
  101b51:	00 
  101b52:	75 ef                	jne    101b43 <uart_console_isr+0xf6>
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
  101b54:	80 e2 04             	and    $0x4,%dl
  101b57:	74 1b                	je     101b74 <uart_console_isr+0x127>
  101b59:	0f b6 fb             	movzbl %bl,%edi
  101b5c:	83 ef 30             	sub    $0x30,%edi
		if (!isdigit(byte)) {
  101b5f:	83 ff 09             	cmp    $0x9,%edi
  101b62:	0f 86 fe fe ff ff    	jbe    101a66 <uart_console_isr+0x19>
			ansi_val = 1;
  101b68:	c7 05 44 93 10 00 01 	movl   $0x1,0x109344
  101b6f:	00 00 00 
  101b72:	eb 78                	jmp    101bec <uart_console_isr+0x19f>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  101b74:	a1 48 93 10 00       	mov    0x109348,%eax
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
  101b79:	a8 08                	test   $0x8,%al
  101b7b:	74 6f                	je     101bec <uart_console_isr+0x19f>
  101b7d:	0f b6 c3             	movzbl %bl,%eax
  101b80:	8d 50 d0             	lea    -0x30(%eax),%edx
		if (isdigit(byte)) {
  101b83:	83 fa 09             	cmp    $0x9,%edx
  101b86:	77 35                	ja     101bbd <uart_console_isr+0x170>
  101b88:	8b 15 48 93 10 00    	mov    0x109348,%edx
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
  101b8e:	80 e2 10             	and    $0x10,%dl
  101b91:	74 15                	je     101ba8 <uart_console_isr+0x15b>
				ansi_val_2 *= 10;
  101b93:	6b 15 40 93 10 00 0a 	imul   $0xa,0x109340,%edx
				ansi_val_2 += byte - '0';
  101b9a:	8d 44 10 d0          	lea    -0x30(%eax,%edx,1),%eax
  101b9e:	a3 40 93 10 00       	mov    %eax,0x109340
  101ba3:	e9 dd fe ff ff       	jmp    101a85 <uart_console_isr+0x38>
				ansi_val *= 10;
  101ba8:	6b 15 44 93 10 00 0a 	imul   $0xa,0x109344,%edx
				ansi_val += byte - '0';
  101baf:	8d 44 10 d0          	lea    -0x30(%eax,%edx,1),%eax
  101bb3:	a3 44 93 10 00       	mov    %eax,0x109344
  101bb8:	e9 c8 fe ff ff       	jmp    101a85 <uart_console_isr+0x38>
		if (byte == ';' &&
  101bbd:	80 fb 3b             	cmp    $0x3b,%bl
  101bc0:	74 12                	je     101bd4 <uart_console_isr+0x187>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
  101bc2:	f0 83 25 48 93 10 00 	lock andl $0xfffffff7,0x109348
  101bc9:	f7 
  101bca:	f0 83 25 48 93 10 00 	lock andl $0xffffffef,0x109348
  101bd1:	ef 
  101bd2:	eb 18                	jmp    101bec <uart_console_isr+0x19f>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
  101bd4:	ba 10 00 00 00       	mov    $0x10,%edx
  101bd9:	b8 48 93 10 00       	mov    $0x109348,%eax
  101bde:	e8 c3 fd ff ff       	call   1019a6 <atomic_or>
  101be3:	a8 10                	test   $0x10,%al
  101be5:	75 db                	jne    101bc2 <uart_console_isr+0x175>
  101be7:	e9 99 fe ff ff       	jmp    101a85 <uart_console_isr+0x38>
	switch (byte) {
  101bec:	80 fb 46             	cmp    $0x46,%bl
  101bef:	0f 84 b6 00 00 00    	je     101cab <uart_console_isr+0x25e>
  101bf5:	77 0f                	ja     101c06 <uart_console_isr+0x1b9>
  101bf7:	80 fb 43             	cmp    $0x43,%bl
  101bfa:	74 49                	je     101c45 <uart_console_isr+0x1f8>
  101bfc:	80 fb 44             	cmp    $0x44,%bl
  101bff:	74 18                	je     101c19 <uart_console_isr+0x1cc>
  101c01:	e9 09 01 00 00       	jmp    101d0f <uart_console_isr+0x2c2>
  101c06:	80 fb 48             	cmp    $0x48,%bl
  101c09:	74 70                	je     101c7b <uart_console_isr+0x22e>
  101c0b:	80 fb 7e             	cmp    $0x7e,%bl
  101c0e:	0f 84 c3 00 00 00    	je     101cd7 <uart_console_isr+0x28a>
  101c14:	e9 f6 00 00 00       	jmp    101d0f <uart_console_isr+0x2c2>
		if (ansi_val > cur) {
  101c19:	0f b6 0d 3d 93 10 00 	movzbl 0x10933d,%ecx
  101c20:	a1 44 93 10 00       	mov    0x109344,%eax
  101c25:	89 ca                	mov    %ecx,%edx
  101c27:	39 c1                	cmp    %eax,%ecx
  101c29:	0f 82 e0 00 00 00    	jb     101d0f <uart_console_isr+0x2c2>
		cur -= ansi_val;
  101c2f:	29 c2                	sub    %eax,%edx
	printk("\x1b[%uD", count);
  101c31:	50                   	push   %eax
		end += ansi_val;
  101c32:	00 05 3c 93 10 00    	add    %al,0x10933c
		cur -= ansi_val;
  101c38:	88 15 3d 93 10 00    	mov    %dl,0x10933d
	printk("\x1b[%uD", count);
  101c3e:	68 35 6a 10 00       	push   $0x106a35
  101c43:	eb 2a                	jmp    101c6f <uart_console_isr+0x222>
		if (ansi_val > end) {
  101c45:	0f b6 0d 3c 93 10 00 	movzbl 0x10933c,%ecx
  101c4c:	a1 44 93 10 00       	mov    0x109344,%eax
  101c51:	89 ca                	mov    %ecx,%edx
  101c53:	39 c1                	cmp    %eax,%ecx
  101c55:	0f 82 b4 00 00 00    	jb     101d0f <uart_console_isr+0x2c2>
		cur += ansi_val;
  101c5b:	00 05 3d 93 10 00    	add    %al,0x10933d
		end -= ansi_val;
  101c61:	29 c2                	sub    %eax,%edx
	printk("\x1b[%uC", count);
  101c63:	50                   	push   %eax
		end -= ansi_val;
  101c64:	88 15 3c 93 10 00    	mov    %dl,0x10933c
	printk("\x1b[%uC", count);
  101c6a:	68 3b 6a 10 00       	push   $0x106a3b
  101c6f:	e8 a1 f0 ff ff       	call   100d15 <printk>
  101c74:	5e                   	pop    %esi
  101c75:	5f                   	pop    %edi
  101c76:	e9 94 00 00 00       	jmp    101d0f <uart_console_isr+0x2c2>
		if (!cur) {
  101c7b:	0f b6 05 3d 93 10 00 	movzbl 0x10933d,%eax
  101c82:	84 c0                	test   %al,%al
  101c84:	0f 84 85 00 00 00    	je     101d0f <uart_console_isr+0x2c2>
	printk("\x1b[%uD", count);
  101c8a:	50                   	push   %eax
  101c8b:	68 35 6a 10 00       	push   $0x106a35
  101c90:	e8 80 f0 ff ff       	call   100d15 <printk>
		end += cur;
  101c95:	a0 3d 93 10 00       	mov    0x10933d,%al
	printk("\x1b[%uD", count);
  101c9a:	59                   	pop    %ecx
		end += cur;
  101c9b:	00 05 3c 93 10 00    	add    %al,0x10933c
	printk("\x1b[%uD", count);
  101ca1:	5b                   	pop    %ebx
		cur = 0;
  101ca2:	c6 05 3d 93 10 00 00 	movb   $0x0,0x10933d
  101ca9:	eb 64                	jmp    101d0f <uart_console_isr+0x2c2>
		if (!end) {
  101cab:	0f b6 05 3c 93 10 00 	movzbl 0x10933c,%eax
  101cb2:	84 c0                	test   %al,%al
  101cb4:	74 59                	je     101d0f <uart_console_isr+0x2c2>
	printk("\x1b[%uC", count);
  101cb6:	50                   	push   %eax
  101cb7:	68 3b 6a 10 00       	push   $0x106a3b
  101cbc:	e8 54 f0 ff ff       	call   100d15 <printk>
  101cc1:	58                   	pop    %eax
		cur += end;
  101cc2:	a0 3c 93 10 00       	mov    0x10933c,%al
	printk("\x1b[%uC", count);
  101cc7:	5a                   	pop    %edx
		cur += end;
  101cc8:	00 05 3d 93 10 00    	add    %al,0x10933d
		end = 0;
  101cce:	c6 05 3c 93 10 00 00 	movb   $0x0,0x10933c
  101cd5:	eb 38                	jmp    101d0f <uart_console_isr+0x2c2>
		if (!end) {
  101cd7:	80 3d 3c 93 10 00 00 	cmpb   $0x0,0x10933c
  101cde:	74 2f                	je     101d0f <uart_console_isr+0x2c2>
	printk("\x1b[%uC", count);
  101ce0:	6a 01                	push   $0x1
  101ce2:	68 3b 6a 10 00       	push   $0x106a3b
  101ce7:	e8 29 f0 ff ff       	call   100d15 <printk>
  101cec:	5f                   	pop    %edi
  101ced:	58                   	pop    %eax
		del_char(&line[cur], --end);
  101cee:	a0 3c 93 10 00       	mov    0x10933c,%al
  101cf3:	8d 50 ff             	lea    -0x1(%eax),%edx
  101cf6:	0f b6 05 3d 93 10 00 	movzbl 0x10933d,%eax
  101cfd:	88 15 3c 93 10 00    	mov    %dl,0x10933c
  101d03:	8d 44 06 04          	lea    0x4(%esi,%eax,1),%eax
  101d07:	0f b6 d2             	movzbl %dl,%edx
  101d0a:	e8 b2 fc ff ff       	call   1019c1 <del_char>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
  101d0f:	f0 83 25 48 93 10 00 	lock andl $0xfffffffd,0x109348
  101d16:	fd 
  101d17:	e9 69 fd ff ff       	jmp    101a85 <uart_console_isr+0x38>
  101d1c:	a1 48 93 10 00       	mov    0x109348,%eax
  101d21:	89 c1                	mov    %eax,%ecx
  101d23:	89 c2                	mov    %eax,%edx
  101d25:	83 e1 fe             	and    $0xfffffffe,%ecx
  101d28:	f0 0f b1 0d 48 93 10 	lock cmpxchg %ecx,0x109348
  101d2f:	00 
  101d30:	75 ef                	jne    101d21 <uart_console_isr+0x2d4>
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
  101d32:	80 e2 01             	and    $0x1,%dl
  101d35:	74 20                	je     101d57 <uart_console_isr+0x30a>
			if (byte == ANSI_ESC) {
  101d37:	80 7d f3 5b          	cmpb   $0x5b,-0xd(%ebp)
  101d3b:	0f 85 44 fd ff ff    	jne    101a85 <uart_console_isr+0x38>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
  101d41:	ba 02 00 00 00       	mov    $0x2,%edx
  101d46:	b8 48 93 10 00       	mov    $0x109348,%eax
  101d4b:	e8 56 fc ff ff       	call   1019a6 <atomic_or>
  101d50:	ba 04 00 00 00       	mov    $0x4,%edx
  101d55:	eb 70                	jmp    101dc7 <uart_console_isr+0x37a>
		if (!isprint(byte)) {
  101d57:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
  101d5b:	88 55 ef             	mov    %dl,-0x11(%ebp)
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
  101d5e:	8d 42 e0             	lea    -0x20(%edx),%eax
  101d61:	83 f8 5e             	cmp    $0x5e,%eax
  101d64:	0f 86 0e 01 00 00    	jbe    101e78 <uart_console_isr+0x42b>
			switch (byte) {
  101d6a:	80 7d ef 0d          	cmpb   $0xd,-0x11(%ebp)
  101d6e:	74 66                	je     101dd6 <uart_console_isr+0x389>
  101d70:	77 0f                	ja     101d81 <uart_console_isr+0x334>
  101d72:	80 7d ef 09          	cmpb   $0x9,-0x11(%ebp)
  101d76:	0f 84 c1 00 00 00    	je     101e3d <uart_console_isr+0x3f0>
  101d7c:	e9 04 fd ff ff       	jmp    101a85 <uart_console_isr+0x38>
  101d81:	80 7d ef 1b          	cmpb   $0x1b,-0x11(%ebp)
  101d85:	74 3b                	je     101dc2 <uart_console_isr+0x375>
  101d87:	80 7d ef 7f          	cmpb   $0x7f,-0x11(%ebp)
  101d8b:	0f 85 f4 fc ff ff    	jne    101a85 <uart_console_isr+0x38>
				if (cur > 0) {
  101d91:	a0 3d 93 10 00       	mov    0x10933d,%al
  101d96:	84 c0                	test   %al,%al
  101d98:	0f 84 e7 fc ff ff    	je     101a85 <uart_console_isr+0x38>
					del_char(&cmd->line[--cur], end);
  101d9e:	48                   	dec    %eax
  101d9f:	8b 0d 38 93 10 00    	mov    0x109338,%ecx
  101da5:	a2 3d 93 10 00       	mov    %al,0x10933d
  101daa:	0f b6 c0             	movzbl %al,%eax
  101dad:	0f b6 15 3c 93 10 00 	movzbl 0x10933c,%edx
  101db4:	8d 44 01 04          	lea    0x4(%ecx,%eax,1),%eax
  101db8:	e8 04 fc ff ff       	call   1019c1 <del_char>
  101dbd:	e9 c3 fc ff ff       	jmp    101a85 <uart_console_isr+0x38>
  101dc2:	ba 01 00 00 00       	mov    $0x1,%edx
  101dc7:	b8 48 93 10 00       	mov    $0x109348,%eax
  101dcc:	e8 d5 fb ff ff       	call   1019a6 <atomic_or>
  101dd1:	e9 af fc ff ff       	jmp    101a85 <uart_console_isr+0x38>
				cmd->line[cur + end] = '\0';
  101dd6:	0f b6 05 3d 93 10 00 	movzbl 0x10933d,%eax
  101ddd:	0f b6 15 3c 93 10 00 	movzbl 0x10933c,%edx
  101de4:	03 05 38 93 10 00    	add    0x109338,%eax
  101dea:	c6 44 02 04 00       	movb   $0x0,0x4(%edx,%eax,1)
				uart_poll_out(uart_console_dev, '\r');
  101def:	ba 0d 00 00 00       	mov    $0xd,%edx
  101df4:	a1 58 93 10 00       	mov    0x109358,%eax
  101df9:	e8 6b fb ff ff       	call   101969 <uart_poll_out>
				uart_poll_out(uart_console_dev, '\n');
  101dfe:	ba 0a 00 00 00       	mov    $0xa,%edx
  101e03:	a1 58 93 10 00       	mov    0x109358,%eax
  101e08:	e8 5c fb ff ff       	call   101969 <uart_poll_out>
				cur = 0;
  101e0d:	c6 05 3d 93 10 00 00 	movb   $0x0,0x10933d
				k_fifo_put(lines_queue, cmd);
  101e14:	ff 35 38 93 10 00    	pushl  0x109338
  101e1a:	ff 35 50 93 10 00    	pushl  0x109350
				end = 0;
  101e20:	c6 05 3c 93 10 00 00 	movb   $0x0,0x10933c
				k_fifo_put(lines_queue, cmd);
  101e27:	e8 54 35 00 00       	call   105380 <k_queue_append>
  101e2c:	5b                   	pop    %ebx
				cmd = NULL;
  101e2d:	c7 05 38 93 10 00 00 	movl   $0x0,0x109338
  101e34:	00 00 00 
				k_fifo_put(lines_queue, cmd);
  101e37:	5e                   	pop    %esi
				break;
  101e38:	e9 48 fc ff ff       	jmp    101a85 <uart_console_isr+0x38>
				if (completion_cb && !end) {
  101e3d:	8b 15 4c 93 10 00    	mov    0x10934c,%edx
  101e43:	85 d2                	test   %edx,%edx
  101e45:	0f 84 3a fc ff ff    	je     101a85 <uart_console_isr+0x38>
  101e4b:	80 3d 3c 93 10 00 00 	cmpb   $0x0,0x10933c
  101e52:	0f 85 2d fc ff ff    	jne    101a85 <uart_console_isr+0x38>
					cur += completion_cb(cmd->line, cur);
  101e58:	0f b6 05 3d 93 10 00 	movzbl 0x10933d,%eax
  101e5f:	50                   	push   %eax
  101e60:	a1 38 93 10 00       	mov    0x109338,%eax
  101e65:	83 c0 04             	add    $0x4,%eax
  101e68:	50                   	push   %eax
  101e69:	ff d2                	call   *%edx
  101e6b:	5a                   	pop    %edx
  101e6c:	00 05 3d 93 10 00    	add    %al,0x10933d
  101e72:	59                   	pop    %ecx
  101e73:	e9 0d fc ff ff       	jmp    101a85 <uart_console_isr+0x38>
		if (cur + end < sizeof(cmd->line) - 1) {
  101e78:	0f b6 1d 3d 93 10 00 	movzbl 0x10933d,%ebx
  101e7f:	0f b6 35 3c 93 10 00 	movzbl 0x10933c,%esi
  101e86:	89 f1                	mov    %esi,%ecx
  101e88:	89 d8                	mov    %ebx,%eax
  101e8a:	88 4d ee             	mov    %cl,-0x12(%ebp)
  101e8d:	8d 0c 1e             	lea    (%esi,%ebx,1),%ecx
  101e90:	83 f9 7e             	cmp    $0x7e,%ecx
  101e93:	0f 8f ec fb ff ff    	jg     101a85 <uart_console_isr+0x38>
			insert_char(&cmd->line[cur++], byte, end);
  101e99:	40                   	inc    %eax
  101e9a:	8b 0d 38 93 10 00    	mov    0x109338,%ecx
  101ea0:	a2 3d 93 10 00       	mov    %al,0x10933d
	uart_poll_out(uart_console_dev, c);
  101ea5:	a1 58 93 10 00       	mov    0x109358,%eax
			insert_char(&cmd->line[cur++], byte, end);
  101eaa:	89 4d e8             	mov    %ecx,-0x18(%ebp)
	uart_poll_out(uart_console_dev, c);
  101ead:	e8 b7 fa ff ff       	call   101969 <uart_poll_out>
	if (end == 0) {
  101eb2:	80 7d ee 00          	cmpb   $0x0,-0x12(%ebp)
  101eb6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  101eb9:	75 0c                	jne    101ec7 <uart_console_isr+0x47a>
		*pos = c;
  101ebb:	8a 45 ef             	mov    -0x11(%ebp),%al
  101ebe:	88 44 19 04          	mov    %al,0x4(%ecx,%ebx,1)
  101ec2:	e9 be fb ff ff       	jmp    101a85 <uart_console_isr+0x38>
	tmp = *pos;
  101ec7:	8a 44 19 04          	mov    0x4(%ecx,%ebx,1),%al
			insert_char(&cmd->line[cur++], byte, end);
  101ecb:	8d 7c 19 04          	lea    0x4(%ecx,%ebx,1),%edi
	tmp = *pos;
  101ecf:	88 45 ee             	mov    %al,-0x12(%ebp)
	*(pos++) = c;
  101ed2:	8a 45 ef             	mov    -0x11(%ebp),%al
  101ed5:	88 44 19 04          	mov    %al,0x4(%ecx,%ebx,1)
	printk("\x1b[s");
  101ed9:	68 2d 6a 10 00       	push   $0x106a2d
  101ede:	31 db                	xor    %ebx,%ebx
  101ee0:	e8 30 ee ff ff       	call   100d15 <printk>
  101ee5:	58                   	pop    %eax
		uart_poll_out(uart_console_dev, tmp);
  101ee6:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
  101eea:	a1 58 93 10 00       	mov    0x109358,%eax
  101eef:	e8 75 fa ff ff       	call   101969 <uart_poll_out>
		*(pos++) = tmp;
  101ef4:	8a 4d ee             	mov    -0x12(%ebp),%cl
		c = *pos;
  101ef7:	8a 44 1f 01          	mov    0x1(%edi,%ebx,1),%al
		*(pos++) = tmp;
  101efb:	88 4c 1f 01          	mov    %cl,0x1(%edi,%ebx,1)
  101eff:	43                   	inc    %ebx
		tmp = c;
  101f00:	88 45 ee             	mov    %al,-0x12(%ebp)
	while (end-- > 0) {
  101f03:	39 f3                	cmp    %esi,%ebx
  101f05:	75 df                	jne    101ee6 <uart_console_isr+0x499>
	printk("\x1b[u");
  101f07:	68 31 6a 10 00       	push   $0x106a31
  101f0c:	e8 04 ee ff ff       	call   100d15 <printk>
  101f11:	5b                   	pop    %ebx
  101f12:	e9 6e fb ff ff       	jmp    101a85 <uart_console_isr+0x38>

00101f17 <uart_register_input>:
	uart_irq_rx_enable(uart_console_dev);
}

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
  101f17:	55                   	push   %ebp
  101f18:	89 e5                	mov    %esp,%ebp
  101f1a:	53                   	push   %ebx
  101f1b:	50                   	push   %eax
	avail_queue = avail;
  101f1c:	8b 45 08             	mov    0x8(%ebp),%eax
  101f1f:	a3 54 93 10 00       	mov    %eax,0x109354
	lines_queue = lines;
  101f24:	8b 45 0c             	mov    0xc(%ebp),%eax
  101f27:	a3 50 93 10 00       	mov    %eax,0x109350
	completion_cb = completion;
  101f2c:	8b 45 10             	mov    0x10(%ebp),%eax
  101f2f:	a3 4c 93 10 00       	mov    %eax,0x10934c
  101f34:	a1 58 93 10 00       	mov    0x109358,%eax
  101f39:	e8 18 fa ff ff       	call   101956 <_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(uart_console_dev);
  101f3e:	8b 15 58 93 10 00    	mov    0x109358,%edx
	if (api->irq_tx_disable) {
  101f44:	8b 42 04             	mov    0x4(%edx),%eax
  101f47:	8b 40 18             	mov    0x18(%eax),%eax
  101f4a:	85 c0                	test   %eax,%eax
  101f4c:	74 04                	je     101f52 <uart_register_input+0x3b>
		api->irq_tx_disable(dev);
  101f4e:	52                   	push   %edx
  101f4f:	ff d0                	call   *%eax
  101f51:	58                   	pop    %eax
	uart_irq_callback_set(uart_console_dev, uart_console_isr);
  101f52:	8b 15 58 93 10 00    	mov    0x109358,%edx
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
  101f58:	8b 42 04             	mov    0x4(%edx),%eax

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
  101f5b:	85 c0                	test   %eax,%eax
  101f5d:	74 11                	je     101f70 <uart_register_input+0x59>
  101f5f:	8b 40 40             	mov    0x40(%eax),%eax
  101f62:	85 c0                	test   %eax,%eax
  101f64:	74 0a                	je     101f70 <uart_register_input+0x59>
		api->irq_callback_set(dev, cb);
  101f66:	68 4d 1a 10 00       	push   $0x101a4d
  101f6b:	52                   	push   %edx
  101f6c:	ff d0                	call   *%eax
  101f6e:	59                   	pop    %ecx
  101f6f:	5b                   	pop    %ebx
		return api->fifo_read(dev, rx_data, size);
  101f70:	8d 5d fb             	lea    -0x5(%ebp),%ebx
	while (uart_irq_rx_ready(uart_console_dev)) {
  101f73:	8b 15 58 93 10 00    	mov    0x109358,%edx
	if (api->irq_rx_ready) {
  101f79:	8b 42 04             	mov    0x4(%edx),%eax
  101f7c:	8b 40 2c             	mov    0x2c(%eax),%eax
  101f7f:	85 c0                	test   %eax,%eax
  101f81:	75 16                	jne    101f99 <uart_register_input+0x82>
	uart_irq_rx_enable(uart_console_dev);
  101f83:	8b 15 58 93 10 00    	mov    0x109358,%edx
	if (api->irq_rx_enable) {
  101f89:	8b 42 04             	mov    0x4(%edx),%eax
  101f8c:	8b 40 20             	mov    0x20(%eax),%eax
  101f8f:	85 c0                	test   %eax,%eax
  101f91:	74 29                	je     101fbc <uart_register_input+0xa5>
		api->irq_rx_enable(dev);
  101f93:	52                   	push   %edx
  101f94:	ff d0                	call   *%eax
  101f96:	58                   	pop    %eax

	console_input_init();
}
  101f97:	eb 23                	jmp    101fbc <uart_register_input+0xa5>
		return api->irq_rx_ready(dev);
  101f99:	52                   	push   %edx
  101f9a:	ff d0                	call   *%eax
  101f9c:	5a                   	pop    %edx
	while (uart_irq_rx_ready(uart_console_dev)) {
  101f9d:	85 c0                	test   %eax,%eax
  101f9f:	74 e2                	je     101f83 <uart_register_input+0x6c>
		uart_fifo_read(uart_console_dev, &c, 1);
  101fa1:	8b 15 58 93 10 00    	mov    0x109358,%edx
	if (api->fifo_read) {
  101fa7:	8b 42 04             	mov    0x4(%edx),%eax
  101faa:	8b 40 10             	mov    0x10(%eax),%eax
  101fad:	85 c0                	test   %eax,%eax
  101faf:	74 c2                	je     101f73 <uart_register_input+0x5c>
		return api->fifo_read(dev, rx_data, size);
  101fb1:	6a 01                	push   $0x1
  101fb3:	53                   	push   %ebx
  101fb4:	52                   	push   %edx
  101fb5:	ff d0                	call   *%eax
  101fb7:	83 c4 0c             	add    $0xc,%esp
  101fba:	eb b7                	jmp    101f73 <uart_register_input+0x5c>
}
  101fbc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  101fbf:	c9                   	leave  
  101fc0:	c3                   	ret    

00101fc1 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
  101fc1:	55                   	push   %ebp
  101fc2:	89 e5                	mov    %esp,%ebp
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
  101fc4:	68 7b 19 10 00       	push   $0x10197b
  101fc9:	e8 f6 e9 ff ff       	call   1009c4 <__printk_hook_install>
  101fce:	58                   	pop    %eax
}
  101fcf:	c9                   	leave  
  101fd0:	c3                   	ret    

00101fd1 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
  101fd1:	55                   	push   %ebp
  101fd2:	89 e5                	mov    %esp,%ebp

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
  101fd4:	68 41 6a 10 00       	push   $0x106a41
  101fd9:	e8 84 30 00 00       	call   105062 <device_get_binding>
  101fde:	5a                   	pop    %edx
  101fdf:	a3 58 93 10 00       	mov    %eax,0x109358
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
  101fe4:	e8 d8 ff ff ff       	call   101fc1 <uart_console_hook_install>

	return 0;
}
  101fe9:	31 c0                	xor    %eax,%eax
  101feb:	c9                   	leave  
  101fec:	c3                   	ret    

00101fed <__IoApicSet>:
 * @param offset Register offset (8 bits)
 * @param value Value to set the register
 * @return N/A
 */
static void __IoApicSet(s32_t offset, u32_t value)
{
  101fed:	55                   	push   %ebp
  101fee:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
  101ff0:	9c                   	pushf  
  101ff1:	fa                   	cli    
  101ff2:	59                   	pop    %ecx
 *
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	if (!(key & 0x200)) {
  101ff3:	0f ba e1 09          	bt     $0x9,%ecx

	/* lock interrupts to ensure indirect addressing works "atomically" */

	key = irq_lock();

	*(volatile char *)(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_IND) = (char)offset;
  101ff7:	a2 00 00 c0 fe       	mov    %al,0xfec00000
	*((volatile u32_t *)(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_DATA)) = value;
  101ffc:	89 15 10 00 c0 fe    	mov    %edx,0xfec00010
  102002:	73 01                	jae    102005 <__IoApicSet+0x18>
	__asm__ volatile (
  102004:	fb                   	sti    

	irq_unlock(key);
}
  102005:	5d                   	pop    %ebp
  102006:	c3                   	ret    

00102007 <_IoApicRedUpdateLo>:
 * @return N/A
 */
static void _IoApicRedUpdateLo(unsigned int irq,
				u32_t value,
				u32_t mask)
{
  102007:	55                   	push   %ebp
	s32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  102008:	01 c0                	add    %eax,%eax
{
  10200a:	89 e5                	mov    %esp,%ebp
	s32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  10200c:	83 c0 10             	add    $0x10,%eax
{
  10200f:	56                   	push   %esi
  102010:	53                   	push   %ebx
	__asm__ volatile (
  102011:	9c                   	pushf  
  102012:	fa                   	cli    
  102013:	5e                   	pop    %esi
  102014:	0f ba e6 09          	bt     $0x9,%esi
		(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_IND)) = (char)offset;
  102018:	a2 00 00 c0 fe       	mov    %al,0xfec00000
	value = *((volatile u32_t *)(CONFIG_IOAPIC_BASE_ADDRESS + IOAPIC_DATA));
  10201d:	8b 1d 10 00 c0 fe    	mov    0xfec00010,%ebx
  102023:	73 01                	jae    102026 <_IoApicRedUpdateLo+0x1f>
	__asm__ volatile (
  102025:	fb                   	sti    
	ioApicRedSetLo(irq, (ioApicRedGetLo(irq) & ~mask) | (value & mask));
  102026:	31 da                	xor    %ebx,%edx
  102028:	21 ca                	and    %ecx,%edx
  10202a:	31 da                	xor    %ebx,%edx
}
  10202c:	5b                   	pop    %ebx
  10202d:	5e                   	pop    %esi
  10202e:	5d                   	pop    %ebp
	__IoApicSet(offset, lower32);
  10202f:	e9 b9 ff ff ff       	jmp    101fed <__IoApicSet>

00102034 <_ioapic_init>:
{
  102034:	55                   	push   %ebp
  102035:	89 e5                	mov    %esp,%ebp
  102037:	53                   	push   %ebx
  102038:	bb 11 00 00 00       	mov    $0x11,%ebx
	__IoApicSet(offset, upper32);
  10203d:	31 d2                	xor    %edx,%edx
  10203f:	89 d8                	mov    %ebx,%eax
  102041:	e8 a7 ff ff ff       	call   101fed <__IoApicSet>
	__IoApicSet(offset, lower32);
  102046:	8d 43 ff             	lea    -0x1(%ebx),%eax
  102049:	ba 00 00 01 00       	mov    $0x10000,%edx
  10204e:	83 c3 02             	add    $0x2,%ebx
  102051:	e8 97 ff ff ff       	call   101fed <__IoApicSet>
	for (ix = 0; ix < CONFIG_IOAPIC_NUM_RTES; ix++) {
  102056:	83 fb 41             	cmp    $0x41,%ebx
  102059:	75 e2                	jne    10203d <_ioapic_init+0x9>
}
  10205b:	31 c0                	xor    %eax,%eax
  10205d:	5b                   	pop    %ebx
  10205e:	5d                   	pop    %ebp
  10205f:	c3                   	ret    

00102060 <_ioapic_irq_enable>:
{
  102060:	55                   	push   %ebp
	_IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
  102061:	b9 00 00 01 00       	mov    $0x10000,%ecx
{
  102066:	89 e5                	mov    %esp,%ebp
	_IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
  102068:	31 d2                	xor    %edx,%edx
  10206a:	8b 45 08             	mov    0x8(%ebp),%eax
}
  10206d:	5d                   	pop    %ebp
	_IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
  10206e:	e9 94 ff ff ff       	jmp    102007 <_IoApicRedUpdateLo>

00102073 <_ioapic_irq_disable>:
{
  102073:	55                   	push   %ebp
	_IoApicRedUpdateLo(irq, IOAPIC_INT_MASK, IOAPIC_INT_MASK);
  102074:	b9 00 00 01 00       	mov    $0x10000,%ecx
{
  102079:	89 e5                	mov    %esp,%ebp
	_IoApicRedUpdateLo(irq, IOAPIC_INT_MASK, IOAPIC_INT_MASK);
  10207b:	ba 00 00 01 00       	mov    $0x10000,%edx
  102080:	8b 45 08             	mov    0x8(%ebp),%eax
}
  102083:	5d                   	pop    %ebp
	_IoApicRedUpdateLo(irq, IOAPIC_INT_MASK, IOAPIC_INT_MASK);
  102084:	e9 7e ff ff ff       	jmp    102007 <_IoApicRedUpdateLo>

00102089 <_ioapic_irq_set>:
{
  102089:	55                   	push   %ebp
	__IoApicSet(offset, upper32);
  10208a:	31 d2                	xor    %edx,%edx
{
  10208c:	89 e5                	mov    %esp,%ebp
  10208e:	56                   	push   %esi
  10208f:	53                   	push   %ebx
  102090:	8b 5d 08             	mov    0x8(%ebp),%ebx
	s32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
  102093:	01 db                	add    %ebx,%ebx
		   (vector & IOAPIC_VEC_MASK) | flags;
  102095:	0f b6 75 0c          	movzbl 0xc(%ebp),%esi
	s32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
  102099:	8d 43 11             	lea    0x11(%ebx),%eax
	rteValue = IOAPIC_FIXED | IOAPIC_INT_MASK | IOAPIC_PHYSICAL |
  10209c:	0b 75 10             	or     0x10(%ebp),%esi
	__IoApicSet(offset, upper32);
  10209f:	e8 49 ff ff ff       	call   101fed <__IoApicSet>
	rteValue = IOAPIC_FIXED | IOAPIC_INT_MASK | IOAPIC_PHYSICAL |
  1020a4:	81 ce 00 00 01 00    	or     $0x10000,%esi
	s32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  1020aa:	8d 43 10             	lea    0x10(%ebx),%eax
	__IoApicSet(offset, lower32);
  1020ad:	89 f2                	mov    %esi,%edx
}
  1020af:	5b                   	pop    %ebx
  1020b0:	5e                   	pop    %esi
  1020b1:	5d                   	pop    %ebp
	__IoApicSet(offset, lower32);
  1020b2:	e9 36 ff ff ff       	jmp    101fed <__IoApicSet>

001020b7 <_loapic_init>:
 * @return N/A
 *
 */

static int _loapic_init(struct device *unused)
{
  1020b7:	55                   	push   %ebp
  1020b8:	89 e5                	mov    %esp,%ebp
static ALWAYS_INLINE
	u32_t sys_read32(mm_reg_t addr)
{
	u32_t ret;

	__asm__ volatile("movl	%1, %0;\n\t"
  1020ba:	a1 f0 00 e0 fe       	mov    0xfee000f0,%eax
	ARG_UNUSED(unused);
	s32_t loApicMaxLvt; /* local APIC Max LVT */

	/* enable the Local APIC */
	LOAPIC_WRITE(LOAPIC_SVR, LOAPIC_READ(LOAPIC_SVR) | LOAPIC_ENABLE);
  1020bf:	80 cc 01             	or     $0x1,%ah
	__asm__ volatile("movl	%0, %1;\n\t"
  1020c2:	a3 f0 00 e0 fe       	mov    %eax,0xfee000f0
	__asm__ volatile("movl	%1, %0;\n\t"
  1020c7:	a1 30 00 e0 fe       	mov    0xfee00030,%eax
	loApicMaxLvt = (LOAPIC_READ(LOAPIC_VER) & LOAPIC_MAXLVT_MASK) >> 16;
  1020cc:	c1 e8 10             	shr    $0x10,%eax
	__asm__ volatile("movl	%0, %1;\n\t"
  1020cf:	83 ca ff             	or     $0xffffffff,%edx
  1020d2:	0f b6 c0             	movzbl %al,%eax
  1020d5:	89 15 e0 00 e0 fe    	mov    %edx,0xfee000e0
  1020db:	31 d2                	xor    %edx,%edx
  1020dd:	89 15 80 00 e0 fe    	mov    %edx,0xfee00080
  1020e3:	89 15 e0 03 e0 fe    	mov    %edx,0xfee003e0
  1020e9:	89 15 80 03 e0 fe    	mov    %edx,0xfee00380
	__asm__ volatile("movl	%1, %0;\n\t"
  1020ef:	8b 15 50 03 e0 fe    	mov    0xfee00350,%edx
	 * ever be waiting for interrupts on those
	 */
#ifndef CONFIG_JAILHOUSE
	/* set LINT0: extInt, high-polarity, edge-trigger, not-masked */

	LOAPIC_WRITE(LOAPIC_LINT0, (LOAPIC_READ(LOAPIC_LINT0) &
  1020f5:	81 e2 ff 58 fe ff    	and    $0xfffe58ff,%edx
  1020fb:	80 ce 07             	or     $0x7,%dh
	__asm__ volatile("movl	%0, %1;\n\t"
  1020fe:	89 15 50 03 e0 fe    	mov    %edx,0xfee00350
	__asm__ volatile("movl	%1, %0;\n\t"
  102104:	8b 15 60 03 e0 fe    	mov    0xfee00360,%edx
		  LOAPIC_LEVEL | LOAPIC_LVT_MASKED)) |
		(LOAPIC_EXT | LOAPIC_HIGH | LOAPIC_EDGE));

	/* set LINT1: NMI, high-polarity, edge-trigger, not-masked */

	LOAPIC_WRITE(LOAPIC_LINT1, (LOAPIC_READ(LOAPIC_LINT1) &
  10210a:	81 e2 ff 58 fe ff    	and    $0xfffe58ff,%edx
  102110:	80 ce 04             	or     $0x4,%dh
	__asm__ volatile("movl	%0, %1;\n\t"
  102113:	89 15 60 03 e0 fe    	mov    %edx,0xfee00360
  102119:	ba 00 00 01 00       	mov    $0x10000,%edx
  10211e:	89 15 20 03 e0 fe    	mov    %edx,0xfee00320
  102124:	89 15 70 03 e0 fe    	mov    %edx,0xfee00370
	/* lock the Local APIC interrupts */

	LOAPIC_WRITE(LOAPIC_TIMER, LOAPIC_LVT_MASKED);
	LOAPIC_WRITE(LOAPIC_ERROR, LOAPIC_LVT_MASKED);

	if (loApicMaxLvt >= LOAPIC_LVT_P6)
  10212a:	83 f8 03             	cmp    $0x3,%eax
  10212d:	7e 15                	jle    102144 <_loapic_init+0x8d>
  10212f:	89 15 40 03 e0 fe    	mov    %edx,0xfee00340
		LOAPIC_WRITE(LOAPIC_PMC, LOAPIC_LVT_MASKED);

	if (loApicMaxLvt >= LOAPIC_LVT_PENTIUM4)
  102135:	83 f8 04             	cmp    $0x4,%eax
  102138:	74 0a                	je     102144 <_loapic_init+0x8d>
  10213a:	b8 00 00 01 00       	mov    $0x10000,%eax
  10213f:	a3 30 03 e0 fe       	mov    %eax,0xfee00330
  102144:	31 c0                	xor    %eax,%eax
  102146:	a3 b0 00 e0 fe       	mov    %eax,0xfee000b0
#else
	LOAPIC_WRITE(LOAPIC_EOI, 0);
#endif

	return 0;
}
  10214b:	5d                   	pop    %ebp
  10214c:	c3                   	ret    

0010214d <_loapic_int_vec_set>:
 */

void _loapic_int_vec_set(unsigned int irq, /* IRQ number of the interrupt */
				  unsigned int vector /* vector to copy into the LVT */
				  )
{
  10214d:	55                   	push   %ebp
  10214e:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
  102150:	9c                   	pushf  
  102151:	fa                   	cli    
  102152:	59                   	pop    %ecx

	/* update the 'vector' bits in the LVT */

	oldLevel = irq_lock();
	LOAPIC_WRITE(LOAPIC_TIMER + (irq * 0x10),
		     (LOAPIC_READ(LOAPIC_TIMER + (irq * 0x10)) &
  102153:	8b 45 08             	mov    0x8(%ebp),%eax
  102156:	83 c0 32             	add    $0x32,%eax
  102159:	c1 e0 04             	shl    $0x4,%eax
	__asm__ volatile("movl	%1, %0;\n\t"
  10215c:	8b 90 00 00 e0 fe    	mov    -0x1200000(%eax),%edx
  102162:	30 d2                	xor    %dl,%dl
	LOAPIC_WRITE(LOAPIC_TIMER + (irq * 0x10),
  102164:	0b 55 0c             	or     0xc(%ebp),%edx
	__asm__ volatile("movl	%0, %1;\n\t"
  102167:	89 90 00 00 e0 fe    	mov    %edx,-0x1200000(%eax)
  10216d:	0f ba e1 09          	bt     $0x9,%ecx
  102171:	73 01                	jae    102174 <_loapic_int_vec_set+0x27>
	__asm__ volatile (
  102173:	fb                   	sti    
		      ~LOAPIC_VECTOR) | vector);
	irq_unlock(oldLevel);
}
  102174:	5d                   	pop    %ebp
  102175:	c3                   	ret    

00102176 <_loapic_irq_enable>:
 *
 * @return N/A
 */

void _loapic_irq_enable(unsigned int irq)
{
  102176:	55                   	push   %ebp
  102177:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
  102179:	9c                   	pushf  
  10217a:	fa                   	cli    
  10217b:	59                   	pop    %ecx

	/* clear the mask bit in the LVT */

	oldLevel = irq_lock();
	LOAPIC_WRITE(LOAPIC_TIMER + (irq * 0x10),
		     LOAPIC_READ(LOAPIC_TIMER + (irq * 0x10)) &
  10217c:	8b 45 08             	mov    0x8(%ebp),%eax
  10217f:	83 c0 32             	add    $0x32,%eax
  102182:	c1 e0 04             	shl    $0x4,%eax
	__asm__ volatile("movl	%1, %0;\n\t"
  102185:	8b 90 00 00 e0 fe    	mov    -0x1200000(%eax),%edx
	LOAPIC_WRITE(LOAPIC_TIMER + (irq * 0x10),
  10218b:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
	__asm__ volatile("movl	%0, %1;\n\t"
  102191:	89 90 00 00 e0 fe    	mov    %edx,-0x1200000(%eax)
  102197:	0f ba e1 09          	bt     $0x9,%ecx
  10219b:	73 01                	jae    10219e <_loapic_irq_enable+0x28>
	__asm__ volatile (
  10219d:	fb                   	sti    
		     ~LOAPIC_LVT_MASKED);
	irq_unlock(oldLevel);
}
  10219e:	5d                   	pop    %ebp
  10219f:	c3                   	ret    

001021a0 <_loapic_irq_disable>:
 *
 * @return N/A
 */

void _loapic_irq_disable(unsigned int irq)
{
  1021a0:	55                   	push   %ebp
  1021a1:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
  1021a3:	9c                   	pushf  
  1021a4:	fa                   	cli    
  1021a5:	59                   	pop    %ecx

	/* set the mask bit in the LVT */

	oldLevel = irq_lock();
	LOAPIC_WRITE(LOAPIC_TIMER + (irq * 0x10),
		     LOAPIC_READ(LOAPIC_TIMER + (irq * 0x10)) |
  1021a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1021a9:	83 c0 32             	add    $0x32,%eax
  1021ac:	c1 e0 04             	shl    $0x4,%eax
	__asm__ volatile("movl	%1, %0;\n\t"
  1021af:	8b 90 00 00 e0 fe    	mov    -0x1200000(%eax),%edx
	LOAPIC_WRITE(LOAPIC_TIMER + (irq * 0x10),
  1021b5:	81 ca 00 00 01 00    	or     $0x10000,%edx
	__asm__ volatile("movl	%0, %1;\n\t"
  1021bb:	89 90 00 00 e0 fe    	mov    %edx,-0x1200000(%eax)
  1021c1:	0f ba e1 09          	bt     $0x9,%ecx
  1021c5:	73 01                	jae    1021c8 <_loapic_irq_disable+0x28>
	__asm__ volatile (
  1021c7:	fb                   	sti    
		     LOAPIC_LVT_MASKED);
	irq_unlock(oldLevel);
}
  1021c8:	5d                   	pop    %ebp
  1021c9:	c3                   	ret    

001021ca <__irq_controller_isr_vector_get>:
 *
 * @return The vector of the interrupt that is currently being processed, or -1
 * if no IRQ is being serviced.
 */
int __irq_controller_isr_vector_get(void)
{
  1021ca:	55                   	push   %ebp
  1021cb:	b9 70 01 e0 fe       	mov    $0xfee00170,%ecx
  1021d0:	89 e5                	mov    %esp,%ebp
	int pReg, block;

	/* Block 0 bits never lit up as these are all exception or reserved
	 * vectors
	 */
	for (block = 7; likely(block > 0); block--) {
  1021d2:	b8 07 00 00 00       	mov    $0x7,%eax
	__asm__ volatile("movl	%1, %0;\n\t"
  1021d7:	8b 11                	mov    (%ecx),%edx
		pReg = LOAPIC_READ(LOAPIC_ISR + (block * 0x10));
		if (pReg) {
  1021d9:	85 d2                	test   %edx,%edx
  1021db:	74 11                	je     1021ee <__irq_controller_isr_vector_get+0x24>
	__asm__ volatile (
  1021dd:	0f bd d2             	bsr    %edx,%edx
  1021e0:	75 05                	jne    1021e7 <__irq_controller_isr_vector_get+0x1d>
  1021e2:	ba ff ff ff ff       	mov    $0xffffffff,%edx
			return (block * 32) + (find_msb_set(pReg) - 1);
  1021e7:	c1 e0 05             	shl    $0x5,%eax
  1021ea:	01 d0                	add    %edx,%eax
  1021ec:	eb 09                	jmp    1021f7 <__irq_controller_isr_vector_get+0x2d>
  1021ee:	83 e9 10             	sub    $0x10,%ecx
	for (block = 7; likely(block > 0); block--) {
  1021f1:	48                   	dec    %eax
  1021f2:	75 e3                	jne    1021d7 <__irq_controller_isr_vector_get+0xd>
		}

	}
	return -1;
  1021f4:	83 c8 ff             	or     $0xffffffff,%eax
}
  1021f7:	5d                   	pop    %ebp
  1021f8:	c3                   	ret    

001021f9 <__irq_controller_irq_config>:
 * @param flags interrupt flags
 *
 */
void __irq_controller_irq_config(unsigned int vector, unsigned int irq,
				 u32_t flags)
{
  1021f9:	55                   	push   %ebp
  1021fa:	89 e5                	mov    %esp,%ebp
  1021fc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1021ff:	8b 55 08             	mov    0x8(%ebp),%edx
	__ASSERT(irq >= 0 && irq <= HARDWARE_IRQ_LIMIT, "invalid irq line");

	if (IS_IOAPIC_IRQ(irq)) {
		_ioapic_irq_set(irq, vector, flags);
  102202:	89 55 0c             	mov    %edx,0xc(%ebp)
	if (IS_IOAPIC_IRQ(irq)) {
  102205:	83 f8 17             	cmp    $0x17,%eax
  102208:	77 09                	ja     102213 <__irq_controller_irq_config+0x1a>
		_ioapic_irq_set(irq, vector, flags);
  10220a:	89 45 08             	mov    %eax,0x8(%ebp)
	} else {
		_loapic_int_vec_set(irq - LOAPIC_IRQ_BASE, vector);
	}
}
  10220d:	5d                   	pop    %ebp
		_ioapic_irq_set(irq, vector, flags);
  10220e:	e9 76 fe ff ff       	jmp    102089 <_ioapic_irq_set>
		_loapic_int_vec_set(irq - LOAPIC_IRQ_BASE, vector);
  102213:	83 e8 18             	sub    $0x18,%eax
  102216:	89 45 08             	mov    %eax,0x8(%ebp)
}
  102219:	5d                   	pop    %ebp
		_loapic_int_vec_set(irq - LOAPIC_IRQ_BASE, vector);
  10221a:	e9 2e ff ff ff       	jmp    10214d <_loapic_int_vec_set>

0010221f <_arch_irq_enable>:
 * virtualization.
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
  10221f:	55                   	push   %ebp
  102220:	89 e5                	mov    %esp,%ebp
  102222:	8b 45 08             	mov    0x8(%ebp),%eax
	if (IS_IOAPIC_IRQ(irq)) {
  102225:	83 f8 17             	cmp    $0x17,%eax
  102228:	77 06                	ja     102230 <_arch_irq_enable+0x11>
		_ioapic_irq_enable(irq);
	} else {
		_loapic_irq_enable(irq - LOAPIC_IRQ_BASE);
	}
}
  10222a:	5d                   	pop    %ebp
		_ioapic_irq_enable(irq);
  10222b:	e9 30 fe ff ff       	jmp    102060 <_ioapic_irq_enable>
		_loapic_irq_enable(irq - LOAPIC_IRQ_BASE);
  102230:	83 e8 18             	sub    $0x18,%eax
  102233:	89 45 08             	mov    %eax,0x8(%ebp)
}
  102236:	5d                   	pop    %ebp
		_loapic_irq_enable(irq - LOAPIC_IRQ_BASE);
  102237:	e9 3a ff ff ff       	jmp    102176 <_loapic_irq_enable>

0010223c <_arch_irq_disable>:
 * virtualization.
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
  10223c:	55                   	push   %ebp
  10223d:	89 e5                	mov    %esp,%ebp
  10223f:	8b 45 08             	mov    0x8(%ebp),%eax
	if (IS_IOAPIC_IRQ(irq)) {
  102242:	83 f8 17             	cmp    $0x17,%eax
  102245:	77 06                	ja     10224d <_arch_irq_disable+0x11>
		_ioapic_irq_disable(irq);
	} else {
		_loapic_irq_disable(irq - LOAPIC_IRQ_BASE);
	}
}
  102247:	5d                   	pop    %ebp
		_ioapic_irq_disable(irq);
  102248:	e9 26 fe ff ff       	jmp    102073 <_ioapic_irq_disable>
		_loapic_irq_disable(irq - LOAPIC_IRQ_BASE);
  10224d:	83 e8 18             	sub    $0x18,%eax
  102250:	89 45 08             	mov    %eax,0x8(%ebp)
}
  102253:	5d                   	pop    %ebp
		_loapic_irq_disable(irq - LOAPIC_IRQ_BASE);
  102254:	e9 47 ff ff ff       	jmp    1021a0 <_loapic_irq_disable>

00102259 <ti_adc108s102_disable>:
	 * SPI will release CS)
	 */
}

static void ti_adc108s102_disable(struct device *dev)
{
  102259:	55                   	push   %ebp
  10225a:	89 e5                	mov    %esp,%ebp
	ARG_UNUSED(dev);

	/* Same issue as with ti_adc108s102_enable() */
}
  10225c:	5d                   	pop    %ebp
  10225d:	c3                   	ret    

0010225e <ti_adc108s102_init>:
	.disable = ti_adc108s102_disable,
	.read = ti_adc108s102_read,
};

static int ti_adc108s102_init(struct device *dev)
{
  10225e:	55                   	push   %ebp
  10225f:	89 e5                	mov    %esp,%ebp
  102261:	56                   	push   %esi
  102262:	53                   	push   %ebx
  102263:	8b 5d 08             	mov    0x8(%ebp),%ebx
	const struct ti_adc108s102_config *config = dev->config->config_info;
  102266:	8b 03                	mov    (%ebx),%eax
	struct ti_adc108s102_data *adc = dev->driver_data;
  102268:	8b 73 08             	mov    0x8(%ebx),%esi

	adc->spi = device_get_binding((char *)config->spi_port);
  10226b:	8b 40 08             	mov    0x8(%eax),%eax
  10226e:	ff 30                	pushl  (%eax)
  102270:	e8 ed 2d 00 00       	call   105062 <device_get_binding>
  102275:	5a                   	pop    %edx
  102276:	83 ca ff             	or     $0xffffffff,%edx
  102279:	89 46 24             	mov    %eax,0x24(%esi)
	if (!adc->spi) {
  10227c:	85 c0                	test   %eax,%eax
  10227e:	74 09                	je     102289 <ti_adc108s102_init+0x2b>
		return -EPERM;
	}

	SYS_LOG_DBG("ADC108s102 initialized\n");

	dev->driver_api = &ti_adc108s102_api;
  102280:	c7 43 04 64 6a 10 00 	movl   $0x106a64,0x4(%ebx)

	return 0;
  102287:	31 d2                	xor    %edx,%edx
}
  102289:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10228c:	89 d0                	mov    %edx,%eax
  10228e:	5b                   	pop    %ebx
  10228f:	5e                   	pop    %esi
  102290:	5d                   	pop    %ebp
  102291:	c3                   	ret    

00102292 <ti_adc108s102_read>:
{
  102292:	55                   	push   %ebp
  102293:	89 e5                	mov    %esp,%ebp
  102295:	57                   	push   %edi
  102296:	56                   	push   %esi
  102297:	53                   	push   %ebx
  102298:	83 ec 10             	sub    $0x10,%esp
static inline int spi_configure(struct device *dev,
				struct spi_config *config)
{
	const struct spi_driver_api *api = dev->driver_api;

	return api->configure(dev, config);
  10229b:	8d 4d ec             	lea    -0x14(%ebp),%ecx
	const struct ti_adc108s102_config *config = dev->config->config_info;
  10229e:	8b 45 08             	mov    0x8(%ebp),%eax
{
  1022a1:	8b 75 0c             	mov    0xc(%ebp),%esi
	const struct ti_adc108s102_config *config = dev->config->config_info;
  1022a4:	8b 00                	mov    (%eax),%eax
  1022a6:	8b 78 08             	mov    0x8(%eax),%edi
	struct ti_adc108s102_data *adc = dev->driver_data;
  1022a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1022ac:	8b 58 08             	mov    0x8(%eax),%ebx
	spi_conf.config = config->spi_config_flags;
  1022af:	8b 47 04             	mov    0x4(%edi),%eax
  1022b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	spi_conf.max_sys_freq = config->spi_freq;
  1022b5:	8b 47 08             	mov    0x8(%edi),%eax
  1022b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (spi_configure(adc->spi, &spi_conf)) {
  1022bb:	8b 43 24             	mov    0x24(%ebx),%eax
  1022be:	8b 50 04             	mov    0x4(%eax),%edx
  1022c1:	51                   	push   %ecx
  1022c2:	50                   	push   %eax
  1022c3:	ff 12                	call   *(%edx)
  1022c5:	5a                   	pop    %edx
  1022c6:	85 c0                	test   %eax,%eax
  1022c8:	59                   	pop    %ecx
  1022c9:	0f 85 83 01 00 00    	jne    102452 <ti_adc108s102_read+0x1c0>
	if (spi_slave_select(adc->spi, config->spi_slave)) {
  1022cf:	8b 53 24             	mov    0x24(%ebx),%edx
 */
static inline int spi_slave_select(struct device *dev, u32_t slave)
{
	const struct spi_driver_api *api = dev->driver_api;

	if (!api->slave_select) {
  1022d2:	8b 42 04             	mov    0x4(%edx),%eax
  1022d5:	8b 40 04             	mov    0x4(%eax),%eax
  1022d8:	85 c0                	test   %eax,%eax
  1022da:	75 1a                	jne    1022f6 <ti_adc108s102_read+0x64>
	memset(adc->chans, 0, ADC108S102_CHANNELS_SIZE);
  1022dc:	8d 43 28             	lea    0x28(%ebx),%eax
  1022df:	6a 20                	push   $0x20
  1022e1:	6a 00                	push   $0x0
  1022e3:	50                   	push   %eax
  1022e4:	e8 0f e0 ff ff       	call   1002f8 <memset>
  1022e9:	83 c4 0c             	add    $0xc,%esp
	for (i = 0; i < seq_table->num_entries; i++) {
  1022ec:	0f b6 7e 04          	movzbl 0x4(%esi),%edi
  1022f0:	31 d2                	xor    %edx,%edx
	u32_t chans_set = 0;
  1022f2:	31 c9                	xor    %ecx,%ecx
  1022f4:	eb 33                	jmp    102329 <ti_adc108s102_read+0x97>
		return 0;
	}

	return api->slave_select(dev, slave);
  1022f6:	ff 77 0c             	pushl  0xc(%edi)
  1022f9:	52                   	push   %edx
  1022fa:	ff d0                	call   *%eax
  1022fc:	5a                   	pop    %edx
	if (spi_slave_select(adc->spi, config->spi_slave)) {
  1022fd:	85 c0                	test   %eax,%eax
  1022ff:	59                   	pop    %ecx
  102300:	74 da                	je     1022dc <ti_adc108s102_read+0x4a>
  102302:	e9 4b 01 00 00       	jmp    102452 <ti_adc108s102_read+0x1c0>
		entry = &seq_table->entries[i];
  102307:	89 d0                	mov    %edx,%eax
  102309:	c1 e0 04             	shl    $0x4,%eax
  10230c:	03 06                	add    (%esi),%eax
		if (entry->sampling_delay <= 0 ||
  10230e:	83 38 00             	cmpl   $0x0,(%eax)
  102311:	0f 8e 42 01 00 00    	jle    102459 <ti_adc108s102_read+0x1c7>
  102317:	80 78 0c 08          	cmpb   $0x8,0xc(%eax)
  10231b:	0f 87 38 01 00 00    	ja     102459 <ti_adc108s102_read+0x1c7>
		chans_set++;
  102321:	83 78 08 01          	cmpl   $0x1,0x8(%eax)
  102325:	83 d9 ff             	sbb    $0xffffffff,%ecx
	for (i = 0; i < seq_table->num_entries; i++) {
  102328:	42                   	inc    %edx
  102329:	39 fa                	cmp    %edi,%edx
  10232b:	7c da                	jl     102307 <ti_adc108s102_read+0x75>
		return -EINVAL;
  10232d:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (_verify_entries(seq_table) == 0) {
  102332:	85 c9                	test   %ecx,%ecx
  102334:	0f 84 24 01 00 00    	je     10245e <ti_adc108s102_read+0x1cc>
	adc->seq_table = seq_table;
  10233a:	89 73 48             	mov    %esi,0x48(%ebx)
  10233d:	8b 45 08             	mov    0x8(%ebp),%eax
	for (i = 0; i < seq_table->num_entries; i++) {
  102340:	31 ff                	xor    %edi,%edi
  102342:	8b 50 08             	mov    0x8(%eax),%edx
	struct adc_seq_table *seq_table = adc->seq_table;
  102345:	8b 42 48             	mov    0x48(%edx),%eax
	adc->cmd_buf_len = 0;
  102348:	c6 42 4c 00          	movb   $0x0,0x4c(%edx)
	adc->sampling_buf_len = 1; /* Counting the dummy byte */
  10234c:	c6 42 4d 01          	movb   $0x1,0x4d(%edx)
	struct adc_seq_table *seq_table = adc->seq_table;
  102350:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (i = 0; i < seq_table->num_entries; i++) {
  102353:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  102357:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	s32_t sampling_delay = 0;
  10235a:	31 c0                	xor    %eax,%eax
	for (i = 0; i < seq_table->num_entries; i++) {
  10235c:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
  10235f:	73 35                	jae    102396 <ti_adc108s102_read+0x104>
		struct adc_seq_entry *entry = &seq_table->entries[i];
  102361:	8b 75 e8             	mov    -0x18(%ebp),%esi
  102364:	89 fb                	mov    %edi,%ebx
  102366:	c1 e3 04             	shl    $0x4,%ebx
  102369:	03 1e                	add    (%esi),%ebx
		chan = &adc->chans[entry->channel_id];
  10236b:	0f b6 4b 0c          	movzbl 0xc(%ebx),%ecx
		if (entry->buffer_length - chan->buf_idx == 0) {
  10236f:	8b 74 8a 28          	mov    0x28(%edx,%ecx,4),%esi
  102373:	39 73 08             	cmp    %esi,0x8(%ebx)
  102376:	74 1b                	je     102393 <ti_adc108s102_read+0x101>
		adc->cmd_buffer[adc->cmd_buf_len] =
  102378:	0f b6 72 4c          	movzbl 0x4c(%edx),%esi
				ADC108S102_CHANNEL_CMD(entry->channel_id);
  10237c:	c1 e1 03             	shl    $0x3,%ecx
		adc->cmd_buffer[adc->cmd_buf_len] =
  10237f:	89 f0                	mov    %esi,%eax
				ADC108S102_CHANNEL_CMD(entry->channel_id);
  102381:	66 81 e1 ff 00       	and    $0xff,%cx
		adc->cmd_buf_len++;
  102386:	40                   	inc    %eax
				ADC108S102_CHANNEL_CMD(entry->channel_id);
  102387:	66 89 0c 72          	mov    %cx,(%edx,%esi,2)
		adc->cmd_buf_len++;
  10238b:	88 42 4c             	mov    %al,0x4c(%edx)
		adc->sampling_buf_len++;
  10238e:	fe 42 4d             	incb   0x4d(%edx)
		sampling_delay = entry->sampling_delay;
  102391:	8b 03                	mov    (%ebx),%eax
	for (i = 0; i < seq_table->num_entries; i++) {
  102393:	47                   	inc    %edi
  102394:	eb c6                	jmp    10235c <ti_adc108s102_read+0xca>
	if (adc->cmd_buf_len == 0) {
  102396:	8a 4a 4c             	mov    0x4c(%edx),%cl
  102399:	84 c9                	test   %cl,%cl
  10239b:	75 07                	jne    1023a4 <ti_adc108s102_read+0x112>
		return -EIO;
  10239d:	31 c0                	xor    %eax,%eax
  10239f:	e9 ba 00 00 00       	jmp    10245e <ti_adc108s102_read+0x1cc>
	adc->cmd_buffer[adc->cmd_buf_len] = 0;
  1023a4:	0f b6 d9             	movzbl %cl,%ebx
	adc->cmd_buf_len++;
  1023a7:	41                   	inc    %ecx
		if (delay == ADC108S102_DONE) {
  1023a8:	83 f8 ff             	cmp    $0xffffffff,%eax
	adc->cmd_buffer[adc->cmd_buf_len] = 0;
  1023ab:	66 c7 04 5a 00 00    	movw   $0x0,(%edx,%ebx,2)
	adc->cmd_buf_len++;
  1023b1:	88 4a 4c             	mov    %cl,0x4c(%edx)
		if (delay == ADC108S102_DONE) {
  1023b4:	74 e7                	je     10239d <ti_adc108s102_read+0x10b>
		delay = (s32_t)((MSEC_PER_SEC * (u64_t)delay) /
  1023b6:	ba e8 03 00 00       	mov    $0x3e8,%edx
  1023bb:	6a 00                	push   $0x0
  1023bd:	f7 ea                	imul   %edx
  1023bf:	6a 64                	push   $0x64
  1023c1:	52                   	push   %edx
  1023c2:	50                   	push   %eax
  1023c3:	e8 c8 dc ff ff       	call   100090 <__udivdi3>
  1023c8:	83 c4 10             	add    $0x10,%esp
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
  1023cb:	50                   	push   %eax
  1023cc:	e8 9d 33 00 00       	call   10576e <_impl_k_sleep>
  1023d1:	8b 45 08             	mov    0x8(%ebp),%eax
  1023d4:	8b 40 08             	mov    0x8(%eax),%eax
			      adc->sampling_buf_len * 2);
  1023d7:	0f b6 50 4d          	movzbl 0x4d(%eax),%edx
	return spi_transceive(adc->spi, adc->cmd_buffer,
  1023db:	8b 48 24             	mov    0x24(%eax),%ecx
			      adc->sampling_buf_len * 2);
  1023de:	01 d2                	add    %edx,%edx
			  const void *tx_buf, u32_t tx_buf_len,
			  void *rx_buf, u32_t rx_buf_len)
{
	const struct spi_driver_api *api = dev->driver_api;

	return api->transceive(dev, tx_buf, tx_buf_len, rx_buf, rx_buf_len);
  1023e0:	8b 59 04             	mov    0x4(%ecx),%ebx
  1023e3:	89 14 24             	mov    %edx,(%esp)
			      adc->sampling_buffer,
  1023e6:	8d 50 12             	lea    0x12(%eax),%edx
  1023e9:	52                   	push   %edx
			      adc->cmd_buf_len * 2,
  1023ea:	0f b6 50 4c          	movzbl 0x4c(%eax),%edx
  1023ee:	01 d2                	add    %edx,%edx
  1023f0:	52                   	push   %edx
  1023f1:	50                   	push   %eax
  1023f2:	51                   	push   %ecx
  1023f3:	ff 53 08             	call   *0x8(%ebx)
  1023f6:	83 c4 14             	add    $0x14,%esp
		if (ret != 0) {
  1023f9:	85 c0                	test   %eax,%eax
  1023fb:	75 61                	jne    10245e <ti_adc108s102_read+0x1cc>
  1023fd:	8b 45 08             	mov    0x8(%ebp),%eax
  102400:	8b 58 08             	mov    0x8(%eax),%ebx
	struct adc_seq_table *seq_table = adc->seq_table;
  102403:	8b 7b 48             	mov    0x48(%ebx),%edi
	for (i = 0, s_i = 1; i < seq_table->num_entries; i++, s_i++) {
  102406:	0f b6 47 04          	movzbl 0x4(%edi),%eax
  10240a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10240d:	31 c0                	xor    %eax,%eax
  10240f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  102412:	0f 83 25 ff ff ff    	jae    10233d <ti_adc108s102_read+0xab>
		entry = &seq_table->entries[i];
  102418:	89 c1                	mov    %eax,%ecx
  10241a:	c1 e1 04             	shl    $0x4,%ecx
  10241d:	03 0f                	add    (%edi),%ecx
  10241f:	0f b6 51 0c          	movzbl 0xc(%ecx),%edx
  102423:	8d 34 93             	lea    (%ebx,%edx,4),%esi
  102426:	89 75 e8             	mov    %esi,-0x18(%ebp)
		if (entry->buffer_length - chan->buf_idx == 0) {
  102429:	8b 56 28             	mov    0x28(%esi),%edx
  10242c:	39 51 08             	cmp    %edx,0x8(%ecx)
  10242f:	74 1e                	je     10244f <ti_adc108s102_read+0x1bd>
		*((u16_t *)(entry->buffer+chan->buf_idx)) =
  102431:	8b 49 04             	mov    0x4(%ecx),%ecx
  102434:	89 ce                	mov    %ecx,%esi
				ADC108S102_RESULT(adc->sampling_buffer[s_i]);
  102436:	66 8b 4c 43 14       	mov    0x14(%ebx,%eax,2),%cx
  10243b:	86 e9                	xchg   %ch,%cl
  10243d:	66 81 e1 ff 0f       	and    $0xfff,%cx
  102442:	66 89 0c 16          	mov    %cx,(%esi,%edx,1)
		chan->buf_idx += 2;
  102446:	8b 75 e8             	mov    -0x18(%ebp),%esi
  102449:	83 c2 02             	add    $0x2,%edx
  10244c:	89 56 28             	mov    %edx,0x28(%esi)
	for (i = 0, s_i = 1; i < seq_table->num_entries; i++, s_i++) {
  10244f:	40                   	inc    %eax
  102450:	eb bd                	jmp    10240f <ti_adc108s102_read+0x17d>
		return -EIO;
  102452:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  102457:	eb 05                	jmp    10245e <ti_adc108s102_read+0x1cc>
		return -EINVAL;
  102459:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
  10245e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  102461:	5b                   	pop    %ebx
  102462:	5e                   	pop    %esi
  102463:	5f                   	pop    %edi
  102464:	5d                   	pop    %ebp
  102465:	c3                   	ret    

00102466 <ti_adc108s102_enable>:
  102466:	55                   	push   %ebp
  102467:	89 e5                	mov    %esp,%ebp
  102469:	5d                   	pop    %ebp
  10246a:	c3                   	ret    

0010246b <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
  10246b:	55                   	push   %ebp
  10246c:	89 e5                	mov    %esp,%ebp
  10246e:	53                   	push   %ebx
	return api->write(port, access_op, pin, value);
  10246f:	8b 58 04             	mov    0x4(%eax),%ebx
  102472:	51                   	push   %ecx
  102473:	52                   	push   %edx
  102474:	6a 00                	push   $0x0
  102476:	50                   	push   %eax
  102477:	ff 53 04             	call   *0x4(%ebx)
  10247a:	83 c4 10             	add    $0x10,%esp
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
  10247d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  102480:	c9                   	leave  
  102481:	c3                   	ret    

00102482 <eeprom_read>:

#define MEM_ADDRESS 0x54
uint8_t read[64], write[66];

static int eeprom_read(struct device *dev, off_t offset, void *data, size_t len)
{
  102482:	55                   	push   %ebp
	int i;
	uint8_t addr[2];
	struct eeprom_data *drv_data = dev->driver_data;
	addr[0] = (offset>>8)&0xFF;
	addr[1] = (offset&0xFF);
	gpio_pin_write(drv_data->wp, 8, 0);
  102483:	31 c9                	xor    %ecx,%ecx
{
  102485:	89 e5                	mov    %esp,%ebp
  102487:	56                   	push   %esi
  102488:	53                   	push   %ebx
  102489:	83 ec 10             	sub    $0x10,%esp
				     struct i2c_msg *msgs, u8_t num_msgs,
				     u16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;

	return api->transfer(dev, msgs, num_msgs, addr);
  10248c:	8d 75 ec             	lea    -0x14(%ebp),%esi
	struct eeprom_data *drv_data = dev->driver_data;
  10248f:	8b 55 08             	mov    0x8(%ebp),%edx
{
  102492:	8b 45 0c             	mov    0xc(%ebp),%eax
	addr[1] = (offset&0xFF);
  102495:	88 45 eb             	mov    %al,-0x15(%ebp)
	struct eeprom_data *drv_data = dev->driver_data;
  102498:	8b 5a 08             	mov    0x8(%edx),%ebx
	addr[0] = (offset>>8)&0xFF;
  10249b:	89 c2                	mov    %eax,%edx
  10249d:	c1 fa 08             	sar    $0x8,%edx
  1024a0:	88 55 ea             	mov    %dl,-0x16(%ebp)
	gpio_pin_write(drv_data->wp, 8, 0);
  1024a3:	8b 43 08             	mov    0x8(%ebx),%eax
  1024a6:	ba 08 00 00 00       	mov    $0x8,%edx
  1024ab:	e8 bb ff ff ff       	call   10246b <gpio_pin_write>
	if(i2c_write(drv_data->i2c, addr, sizeof(addr), MEM_ADDRESS))
  1024b0:	8b 03                	mov    (%ebx),%eax
static inline int i2c_write(struct device *dev, u8_t *buf,
			    u32_t num_bytes, u16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
  1024b2:	8d 55 ea             	lea    -0x16(%ebp),%edx
	msg.len = num_bytes;
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
  1024b5:	c6 45 f4 02          	movb   $0x2,-0xc(%ebp)
	msg.buf = buf;
  1024b9:	89 55 ec             	mov    %edx,-0x14(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  1024bc:	8b 50 04             	mov    0x4(%eax),%edx
	msg.len = num_bytes;
  1024bf:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  1024c6:	6a 54                	push   $0x54
  1024c8:	6a 01                	push   $0x1
  1024ca:	56                   	push   %esi
  1024cb:	50                   	push   %eax
  1024cc:	ff 52 04             	call   *0x4(%edx)
  1024cf:	83 c4 10             	add    $0x10,%esp
  1024d2:	85 c0                	test   %eax,%eax
  1024d4:	74 0b                	je     1024e1 <eeprom_read+0x5f>
	{
		printk("I2C Address Error\n");
  1024d6:	68 70 6a 10 00       	push   $0x106a70
  1024db:	e8 35 e8 ff ff       	call   100d15 <printk>
  1024e0:	5a                   	pop    %edx
	}
	if(i2c_read(drv_data->i2c, data, len, MEM_ADDRESS))
  1024e1:	8b 03                	mov    (%ebx),%eax
static inline int i2c_read(struct device *dev, u8_t *buf,
			   u32_t num_bytes, u16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
  1024e3:	8b 55 10             	mov    0x10(%ebp),%edx
  1024e6:	89 55 ec             	mov    %edx,-0x14(%ebp)
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
  1024e9:	c6 45 f4 03          	movb   $0x3,-0xc(%ebp)
	msg.len = num_bytes;
  1024ed:	8b 55 14             	mov    0x14(%ebp),%edx
  1024f0:	89 55 f0             	mov    %edx,-0x10(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  1024f3:	8b 50 04             	mov    0x4(%eax),%edx
  1024f6:	6a 54                	push   $0x54
  1024f8:	6a 01                	push   $0x1
  1024fa:	56                   	push   %esi
  1024fb:	50                   	push   %eax
  1024fc:	ff 52 04             	call   *0x4(%edx)
  1024ff:	83 c4 10             	add    $0x10,%esp
  102502:	85 c0                	test   %eax,%eax
  102504:	74 0b                	je     102511 <eeprom_read+0x8f>
	{
		printk("I2C Read Error\n");
  102506:	68 83 6a 10 00       	push   $0x106a83
  10250b:	e8 05 e8 ff ff       	call   100d15 <printk>
  102510:	58                   	pop    %eax
	{
		printk("Iteration %d: %d\n", i, read[i]);
		data++;
	}*/
	return 0;
}
  102511:	8d 65 f8             	lea    -0x8(%ebp),%esp
  102514:	31 c0                	xor    %eax,%eax
  102516:	5b                   	pop    %ebx
  102517:	5e                   	pop    %esi
  102518:	5d                   	pop    %ebp
  102519:	c3                   	ret    

0010251a <eeprom_write>:


static int eeprom_write(struct device *dev, off_t offset, const void *data, size_t len)
{
  10251a:	55                   	push   %ebp
	memcpy(write+2, data, len);
	int i;
	for(i=0; i<len+2; i++)
	{printk("%d\n", write[i]);}	
*/
	gpio_pin_write(drv_data->wp, 8, 0);
  10251b:	31 c9                	xor    %ecx,%ecx
{
  10251d:	89 e5                	mov    %esp,%ebp
  10251f:	53                   	push   %ebx
  102520:	83 ec 0c             	sub    $0xc,%esp
	gpio_pin_write(drv_data->wp, 8, 0);
  102523:	ba 08 00 00 00       	mov    $0x8,%edx
	struct eeprom_data *drv_data = dev->driver_data;
  102528:	8b 45 08             	mov    0x8(%ebp),%eax
  10252b:	8b 58 08             	mov    0x8(%eax),%ebx
	gpio_pin_write(drv_data->wp, 8, 0);
  10252e:	8b 43 08             	mov    0x8(%ebx),%eax
  102531:	e8 35 ff ff ff       	call   10246b <gpio_pin_write>
	msg.buf = buf;
  102536:	8b 45 10             	mov    0x10(%ebp),%eax
	if(i2c_write(drv_data->i2c, data, len+2, MEM_ADDRESS))
  102539:	8b 13                	mov    (%ebx),%edx
  10253b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10253e:	8b 45 14             	mov    0x14(%ebp),%eax
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
  102541:	c6 45 f8 02          	movb   $0x2,-0x8(%ebp)
  102545:	83 c0 02             	add    $0x2,%eax
	return api->transfer(dev, msgs, num_msgs, addr);
  102548:	8d 4d f0             	lea    -0x10(%ebp),%ecx
  10254b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10254e:	8b 42 04             	mov    0x4(%edx),%eax
  102551:	6a 54                	push   $0x54
  102553:	6a 01                	push   $0x1
  102555:	51                   	push   %ecx
  102556:	52                   	push   %edx
  102557:	ff 50 04             	call   *0x4(%eax)
  10255a:	83 c4 10             	add    $0x10,%esp
  10255d:	85 c0                	test   %eax,%eax
  10255f:	74 0b                	je     10256c <eeprom_write+0x52>
	{
		printk("I2C Write Error\n");
  102561:	68 93 6a 10 00       	push   $0x106a93
  102566:	e8 aa e7 ff ff       	call   100d15 <printk>
  10256b:	5a                   	pop    %edx
  10256c:	6a 01                	push   $0x1
  10256e:	e8 fb 31 00 00       	call   10576e <_impl_k_sleep>
  102573:	58                   	pop    %eax
	}
	k_sleep(1);
//	printk("WRITING COMPLETED\n");
	return 0;
}
  102574:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  102577:	31 c0                	xor    %eax,%eax
  102579:	c9                   	leave  
  10257a:	c3                   	ret    

0010257b <eeprom_init>:
	// .erase = eeprom_erase,
	// .write_protection = eeprom_write_protection_set,
};

static int eeprom_init(struct device *dev)
{
  10257b:	55                   	push   %ebp
  10257c:	89 e5                	mov    %esp,%ebp
  10257e:	56                   	push   %esi
  10257f:	53                   	push   %ebx
  102580:	8b 75 08             	mov    0x8(%ebp),%esi
	struct eeprom_data *drv_data = dev->driver_data;
  102583:	8b 5e 08             	mov    0x8(%esi),%ebx
	printk("EEPROM INIT\n");
  102586:	68 a4 6a 10 00       	push   $0x106aa4
  10258b:	e8 85 e7 ff ff       	call   100d15 <printk>

	//CONFIGURATION ACTIVITY
	dev->driver_api = &eeprom_api;
  102590:	c7 46 04 d4 6a 10 00 	movl   $0x106ad4,0x4(%esi)
	drv_data->gpio = device_get_binding(CONFIG_GPIO_PCAL9535A_2_DEV_NAME);
  102597:	c7 04 24 b1 6a 10 00 	movl   $0x106ab1,(%esp)
  10259e:	e8 bf 2a 00 00       	call   105062 <device_get_binding>
  1025a3:	5a                   	pop    %edx
	gpio_pin_write(drv_data->gpio, 12, 0);
  1025a4:	31 c9                	xor    %ecx,%ecx
	drv_data->gpio = device_get_binding(CONFIG_GPIO_PCAL9535A_2_DEV_NAME);
  1025a6:	89 43 04             	mov    %eax,0x4(%ebx)
	gpio_pin_write(drv_data->gpio, 12, 0);
  1025a9:	ba 0c 00 00 00       	mov    $0xc,%edx
  1025ae:	e8 b8 fe ff ff       	call   10246b <gpio_pin_write>
	gpio_pin_configure(drv_data->gpio, 12, GPIO_DIR_OUT);
  1025b3:	8b 43 04             	mov    0x4(%ebx),%eax
	return api->config(port, access_op, pin, flags);
  1025b6:	8b 50 04             	mov    0x4(%eax),%edx
  1025b9:	6a 01                	push   $0x1
  1025bb:	6a 0c                	push   $0xc
  1025bd:	6a 00                	push   $0x0
  1025bf:	50                   	push   %eax
  1025c0:	ff 12                	call   *(%edx)
  1025c2:	83 c4 10             	add    $0x10,%esp
	drv_data->i2c = device_get_binding(CONFIG_GPIO_PCAL9535A_1_I2C_MASTER_DEV_NAME);
  1025c5:	68 b6 6a 10 00       	push   $0x106ab6
  1025ca:	e8 93 2a 00 00       	call   105062 <device_get_binding>
  1025cf:	89 03                	mov    %eax,(%ebx)
	return api->configure(dev, dev_config);
  1025d1:	8b 50 04             	mov    0x4(%eax),%edx
  1025d4:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  1025db:	50                   	push   %eax
  1025dc:	ff 12                	call   *(%edx)
  1025de:	59                   	pop    %ecx
  1025df:	5e                   	pop    %esi
	i2c_configure(drv_data->i2c, (I2C_SPEED_FAST<<1)|I2C_MODE_MASTER);

	//Write Protection
	drv_data->wp = device_get_binding(PINMUX_GALILEO_EXP1_NAME);
  1025e0:	68 bc 6a 10 00       	push   $0x106abc
  1025e5:	e8 78 2a 00 00       	call   105062 <device_get_binding>
  1025ea:	89 43 08             	mov    %eax,0x8(%ebx)
  1025ed:	8b 50 04             	mov    0x4(%eax),%edx
  1025f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1025f7:	6a 08                	push   $0x8
  1025f9:	6a 00                	push   $0x0
  1025fb:	50                   	push   %eax
  1025fc:	ff 12                	call   *(%edx)
  1025fe:	83 c4 10             	add    $0x10,%esp
	gpio_pin_configure(drv_data->wp, 8, GPIO_DIR_OUT);
	gpio_pin_write(drv_data->wp, 8, 1);
  102601:	8b 43 08             	mov    0x8(%ebx),%eax
  102604:	b9 01 00 00 00       	mov    $0x1,%ecx
  102609:	ba 08 00 00 00       	mov    $0x8,%edx
  10260e:	e8 58 fe ff ff       	call   10246b <gpio_pin_write>

	printk("EEPROM COMPLETED\n");
  102613:	68 c1 6a 10 00       	push   $0x106ac1
  102618:	e8 f8 e6 ff ff       	call   100d15 <printk>
  10261d:	58                   	pop    %eax
	return 0;
}
  10261e:	8d 65 f8             	lea    -0x8(%ebp),%esp
  102621:	31 c0                	xor    %eax,%eax
  102623:	5b                   	pop    %ebx
  102624:	5e                   	pop    %esi
  102625:	5d                   	pop    %ebp
  102626:	c3                   	ret    

00102627 <dw_set_bit>:
	sys_write32(val, base_addr + offset);
}

static void dw_set_bit(u32_t base_addr, u32_t offset,
		       u32_t bit, u8_t value)
{
  102627:	55                   	push   %ebp
  102628:	8d 04 10             	lea    (%eax,%edx,1),%eax
  10262b:	89 e5                	mov    %esp,%ebp
	if (!value) {
  10262d:	80 7d 08 00          	cmpb   $0x0,0x8(%ebp)
  102631:	75 05                	jne    102638 <dw_set_bit+0x11>
}

static ALWAYS_INLINE
	void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	__asm__ volatile("btrl	%1, %0;\n\t"
  102633:	0f b3 08             	btr    %ecx,(%eax)
  102636:	eb 03                	jmp    10263b <dw_set_bit+0x14>
	__asm__ volatile("btsl	%1, %0;\n\t"
  102638:	0f ab 08             	bts    %ecx,(%eax)
		sys_clear_bit(base_addr + offset, bit);
	} else {
		sys_set_bit(base_addr + offset, bit);
	}
}
  10263b:	5d                   	pop    %ebp
  10263c:	c3                   	ret    

0010263d <gpio_dw_write>:
	return 0;
}

static inline int gpio_dw_write(struct device *port, int access_op,
				u32_t pin, u32_t value)
{
  10263d:	55                   	push   %ebp
  10263e:	89 e5                	mov    %esp,%ebp
	struct gpio_dw_runtime *context = port->driver_data;
	u32_t base_addr = context->base_addr;
  102640:	8b 45 08             	mov    0x8(%ebp),%eax
{
  102643:	8b 55 14             	mov    0x14(%ebp),%edx

	if (GPIO_ACCESS_BY_PIN == access_op) {
  102646:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
	u32_t base_addr = context->base_addr;
  10264a:	8b 40 08             	mov    0x8(%eax),%eax
  10264d:	8b 00                	mov    (%eax),%eax
	if (GPIO_ACCESS_BY_PIN == access_op) {
  10264f:	75 11                	jne    102662 <gpio_dw_write+0x25>
		dw_set_bit(base_addr, SWPORTA_DR, pin, value);
  102651:	0f b6 d2             	movzbl %dl,%edx
  102654:	52                   	push   %edx
  102655:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102658:	31 d2                	xor    %edx,%edx
  10265a:	e8 c8 ff ff ff       	call   102627 <dw_set_bit>
  10265f:	58                   	pop    %eax
  102660:	eb 02                	jmp    102664 <gpio_dw_write+0x27>
	__asm__ volatile("movl	%0, %1;\n\t"
  102662:	89 10                	mov    %edx,(%eax)
	} else {
		dw_write(base_addr, SWPORTA_DR, value);
	}

	return 0;
}
  102664:	31 c0                	xor    %eax,%eax
  102666:	c9                   	leave  
  102667:	c3                   	ret    

00102668 <gpio_dw_read>:

static inline int gpio_dw_read(struct device *port, int access_op,
			       u32_t pin, u32_t *value)
{
  102668:	55                   	push   %ebp
	u32_t port = (base_addr & 0x3f) / 12;
  102669:	31 d2                	xor    %edx,%edx
{
  10266b:	89 e5                	mov    %esp,%ebp
  10266d:	56                   	push   %esi
  10266e:	53                   	push   %ebx
	u32_t port = (base_addr & 0x3f) / 12;
  10266f:	be 0c 00 00 00       	mov    $0xc,%esi
	struct gpio_dw_runtime *context = port->driver_data;
	u32_t base_addr = context->base_addr;
  102674:	8b 45 08             	mov    0x8(%ebp),%eax
{
  102677:	8b 5d 14             	mov    0x14(%ebp),%ebx
	u32_t base_addr = context->base_addr;
  10267a:	8b 40 08             	mov    0x8(%eax),%eax
  10267d:	8b 08                	mov    (%eax),%ecx
	u32_t port = (base_addr & 0x3f) / 12;
  10267f:	89 c8                	mov    %ecx,%eax
  102681:	83 e0 3f             	and    $0x3f,%eax
  102684:	f7 f6                	div    %esi
  102686:	ba 50 00 00 00       	mov    $0x50,%edx
  10268b:	8d 70 ff             	lea    -0x1(%eax),%esi
  10268e:	83 fe 02             	cmp    $0x2,%esi
  102691:	77 07                	ja     10269a <gpio_dw_read+0x32>
  102693:	0f b6 90 e7 6a 10 00 	movzbl 0x106ae7(%eax),%edx
	return (base_addr & 0xFFFFFFC0);
  10269a:	83 e1 c0             	and    $0xffffffc0,%ecx
	return sys_read32(base_addr + offset);
  10269d:	01 d1                	add    %edx,%ecx
	__asm__ volatile("movl	%1, %0;\n\t"
  10269f:	8b 01                	mov    (%ecx),%eax
		break;
	}
	*value = dw_read(dw_base_to_block_base(base_addr), ext_port);
#endif

	if (GPIO_ACCESS_BY_PIN == access_op) {
  1026a1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1026a5:	75 08                	jne    1026af <gpio_dw_read+0x47>
		*value = !!(*value & BIT(pin));
  1026a7:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1026aa:	d3 e8                	shr    %cl,%eax
  1026ac:	83 e0 01             	and    $0x1,%eax
  1026af:	89 03                	mov    %eax,(%ebx)
	}
	return 0;
}
  1026b1:	31 c0                	xor    %eax,%eax
  1026b3:	5b                   	pop    %ebx
  1026b4:	5e                   	pop    %esi
  1026b5:	5d                   	pop    %ebp
  1026b6:	c3                   	ret    

001026b7 <gpio_dw_manage_callback>:

static inline int gpio_dw_manage_callback(struct device *port,
					  struct gpio_callback *callback,
					  bool set)
{
  1026b7:	55                   	push   %ebp
  1026b8:	89 e5                	mov    %esp,%ebp
  1026ba:	53                   	push   %ebx
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
  1026bb:	31 db                	xor    %ebx,%ebx
	struct gpio_dw_runtime *context = port->driver_data;
  1026bd:	8b 45 08             	mov    0x8(%ebp),%eax
{
  1026c0:	8b 55 0c             	mov    0xc(%ebp),%edx
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
  1026c3:	80 7d 10 00          	cmpb   $0x0,0x10(%ebp)
	struct gpio_dw_runtime *context = port->driver_data;
  1026c7:	8b 40 08             	mov    0x8(%eax),%eax
	node->next = list->head;
  1026ca:	8b 48 18             	mov    0x18(%eax),%ecx
  1026cd:	74 18                	je     1026e7 <gpio_dw_manage_callback+0x30>
  1026cf:	89 0a                	mov    %ecx,(%edx)
	list->head = node;
  1026d1:	89 50 18             	mov    %edx,0x18(%eax)
	if (!list->tail) {
  1026d4:	83 78 1c 00          	cmpl   $0x0,0x1c(%eax)
  1026d8:	75 36                	jne    102710 <gpio_dw_manage_callback+0x59>
		list->tail = list->head;
  1026da:	89 50 1c             	mov    %edx,0x1c(%eax)
  1026dd:	eb 31                	jmp    102710 <gpio_dw_manage_callback+0x59>
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
		if (test == node) {
  1026df:	39 ca                	cmp    %ecx,%edx
  1026e1:	74 0a                	je     1026ed <gpio_dw_manage_callback+0x36>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
  1026e3:	89 cb                	mov    %ecx,%ebx
  1026e5:	8b 09                	mov    (%ecx),%ecx
  1026e7:	85 c9                	test   %ecx,%ecx
  1026e9:	75 f4                	jne    1026df <gpio_dw_manage_callback+0x28>
  1026eb:	eb 23                	jmp    102710 <gpio_dw_manage_callback+0x59>
	if (!prev_node) {
  1026ed:	85 db                	test   %ebx,%ebx
  1026ef:	8b 0a                	mov    (%edx),%ecx
  1026f1:	75 0d                	jne    102700 <gpio_dw_manage_callback+0x49>
		list->head = node->next;
  1026f3:	89 48 18             	mov    %ecx,0x18(%eax)
		if (list->tail == node) {
  1026f6:	3b 50 1c             	cmp    0x1c(%eax),%edx
  1026f9:	75 0f                	jne    10270a <gpio_dw_manage_callback+0x53>
			list->tail = list->head;
  1026fb:	89 48 1c             	mov    %ecx,0x1c(%eax)
  1026fe:	eb 0a                	jmp    10270a <gpio_dw_manage_callback+0x53>
		prev_node->next = node->next;
  102700:	89 0b                	mov    %ecx,(%ebx)
		if (list->tail == node) {
  102702:	3b 50 1c             	cmp    0x1c(%eax),%edx
  102705:	75 03                	jne    10270a <gpio_dw_manage_callback+0x53>
			list->tail = prev_node;
  102707:	89 58 1c             	mov    %ebx,0x1c(%eax)
	node->next = NULL;
  10270a:	c7 02 00 00 00 00    	movl   $0x0,(%edx)

	_gpio_manage_callback(&context->callbacks, callback, set);

	return 0;
}
  102710:	31 c0                	xor    %eax,%eax
  102712:	5b                   	pop    %ebx
  102713:	5d                   	pop    %ebp
  102714:	c3                   	ret    

00102715 <gpio_dw_enable_callback>:

static inline int gpio_dw_enable_callback(struct device *port, int access_op,
					  u32_t pin)
{
  102715:	55                   	push   %ebp
  102716:	89 e5                	mov    %esp,%ebp
  102718:	8b 55 08             	mov    0x8(%ebp),%edx
  10271b:	8b 4d 10             	mov    0x10(%ebp),%ecx
	const struct gpio_dw_config *config = port->config->config_info;
	struct gpio_dw_runtime *context = port->driver_data;
	u32_t base_addr = dw_base_to_block_base(context->base_addr);
  10271e:	8b 42 08             	mov    0x8(%edx),%eax
	return (base_addr & 0xFFFFFFC0);
  102721:	8b 00                	mov    (%eax),%eax
  102723:	83 e0 c0             	and    $0xffffffc0,%eax

	if (GPIO_ACCESS_BY_PIN == access_op) {
  102726:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  10272a:	75 19                	jne    102745 <gpio_dw_enable_callback+0x30>
		dw_write(base_addr, PORTA_EOI, BIT(pin));
  10272c:	ba 01 00 00 00       	mov    $0x1,%edx
  102731:	d3 e2                	shl    %cl,%edx
	__asm__ volatile("movl	%0, %1;\n\t"
  102733:	89 50 4c             	mov    %edx,0x4c(%eax)
		dw_set_bit(base_addr, INTMASK, pin, 0);
  102736:	ba 34 00 00 00       	mov    $0x34,%edx
  10273b:	6a 00                	push   $0x0
  10273d:	e8 e5 fe ff ff       	call   102627 <dw_set_bit>
  102742:	58                   	pop    %eax
  102743:	eb 17                	jmp    10275c <gpio_dw_enable_callback+0x47>
	const struct gpio_dw_config *config = port->config->config_info;
  102745:	8b 12                	mov    (%edx),%edx
	} else {
		dw_write(base_addr, PORTA_EOI, BIT_MASK(config->bits));
  102747:	8b 52 08             	mov    0x8(%edx),%edx
  10274a:	8b 0a                	mov    (%edx),%ecx
  10274c:	ba 01 00 00 00       	mov    $0x1,%edx
  102751:	d3 e2                	shl    %cl,%edx
  102753:	4a                   	dec    %edx
  102754:	89 50 4c             	mov    %edx,0x4c(%eax)
  102757:	31 d2                	xor    %edx,%edx
  102759:	89 50 34             	mov    %edx,0x34(%eax)
		dw_write(base_addr, INTMASK, 0);
	}

	return 0;
}
  10275c:	31 c0                	xor    %eax,%eax
  10275e:	c9                   	leave  
  10275f:	c3                   	ret    

00102760 <gpio_dw_disable_callback>:

static inline int gpio_dw_disable_callback(struct device *port, int access_op,
					   u32_t pin)
{
  102760:	55                   	push   %ebp
  102761:	89 e5                	mov    %esp,%ebp
  102763:	8b 55 08             	mov    0x8(%ebp),%edx
	const struct gpio_dw_config *config = port->config->config_info;
	struct gpio_dw_runtime *context = port->driver_data;
	u32_t base_addr = dw_base_to_block_base(context->base_addr);
  102766:	8b 42 08             	mov    0x8(%edx),%eax
	return (base_addr & 0xFFFFFFC0);
  102769:	8b 00                	mov    (%eax),%eax
  10276b:	83 e0 c0             	and    $0xffffffc0,%eax

	if (GPIO_ACCESS_BY_PIN == access_op) {
  10276e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  102772:	75 12                	jne    102786 <gpio_dw_disable_callback+0x26>
		dw_set_bit(base_addr, INTMASK, pin, 1);
  102774:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102777:	ba 34 00 00 00       	mov    $0x34,%edx
  10277c:	6a 01                	push   $0x1
  10277e:	e8 a4 fe ff ff       	call   102627 <dw_set_bit>
  102783:	58                   	pop    %eax
  102784:	eb 12                	jmp    102798 <gpio_dw_disable_callback+0x38>
	const struct gpio_dw_config *config = port->config->config_info;
  102786:	8b 12                	mov    (%edx),%edx
	} else {
		dw_write(base_addr, INTMASK, BIT_MASK(config->bits));
  102788:	8b 52 08             	mov    0x8(%edx),%edx
  10278b:	8b 0a                	mov    (%edx),%ecx
  10278d:	ba 01 00 00 00       	mov    $0x1,%edx
  102792:	d3 e2                	shl    %cl,%edx
  102794:	4a                   	dec    %edx
  102795:	89 50 34             	mov    %edx,0x34(%eax)
	}

	return 0;
}
  102798:	31 c0                	xor    %eax,%eax
  10279a:	c9                   	leave  
  10279b:	c3                   	ret    

0010279c <gpio_dw_isr>:
#else
#define gpio_dw_unmask_int(...)
#endif

static void gpio_dw_isr(void *arg)
{
  10279c:	55                   	push   %ebp
  10279d:	89 e5                	mov    %esp,%ebp
  10279f:	57                   	push   %edi
  1027a0:	56                   	push   %esi
  1027a1:	53                   	push   %ebx
  1027a2:	8b 75 08             	mov    0x8(%ebp),%esi
	struct device *port = (struct device *)arg;
	struct gpio_dw_runtime *context = port->driver_data;
  1027a5:	8b 56 08             	mov    0x8(%esi),%edx
	return (base_addr & 0xFFFFFFC0);
  1027a8:	8b 02                	mov    (%edx),%eax
  1027aa:	83 e0 c0             	and    $0xffffffc0,%eax
	__asm__ volatile("movl	%1, %0;\n\t"
  1027ad:	8b 78 40             	mov    0x40(%eax),%edi
#ifdef CONFIG_SHARED_IRQ
	/* If using with shared IRQ, this function will be called
	 * by the shared IRQ driver. So check here if the interrupt
	 * is coming from the GPIO controller (or somewhere else).
	 */
	if (!int_status) {
  1027b0:	85 ff                	test   %edi,%edi
  1027b2:	74 1c                	je     1027d0 <gpio_dw_isr+0x34>
	__asm__ volatile("movl	%0, %1;\n\t"
  1027b4:	89 78 4c             	mov    %edi,0x4c(%eax)
  1027b7:	8b 5a 18             	mov    0x18(%edx),%ebx
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
  1027ba:	85 db                	test   %ebx,%ebx
  1027bc:	74 12                	je     1027d0 <gpio_dw_isr+0x34>
		if (cb->pin_mask & pins) {
  1027be:	85 7b 08             	test   %edi,0x8(%ebx)
  1027c1:	74 09                	je     1027cc <gpio_dw_isr+0x30>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
  1027c3:	57                   	push   %edi
  1027c4:	53                   	push   %ebx
  1027c5:	56                   	push   %esi
  1027c6:	ff 53 04             	call   *0x4(%ebx)
  1027c9:	83 c4 0c             	add    $0xc,%esp
	return node->next;
  1027cc:	8b 1b                	mov    (%ebx),%ebx
  1027ce:	eb ea                	jmp    1027ba <gpio_dw_isr+0x1e>
#endif

	dw_write(base_addr, PORTA_EOI, int_status);

	_gpio_fire_callbacks(&context->callbacks, port, int_status);
}
  1027d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1027d3:	5b                   	pop    %ebx
  1027d4:	5e                   	pop    %esi
  1027d5:	5f                   	pop    %edi
  1027d6:	5d                   	pop    %ebp
  1027d7:	c3                   	ret    

001027d8 <gpio_dw_initialize>:
#define gpio_dw_setup(_unused_) (1)
#endif /* CONFIG_PCI */


static int gpio_dw_initialize(struct device *port)
{
  1027d8:	55                   	push   %ebp
  1027d9:	89 e5                	mov    %esp,%ebp
  1027db:	57                   	push   %edi
  1027dc:	56                   	push   %esi
  1027dd:	53                   	push   %ebx
  1027de:	51                   	push   %ecx
  1027df:	8b 75 08             	mov    0x8(%ebp),%esi
	struct gpio_dw_runtime *context = port->driver_data;
	const struct gpio_dw_config *config = port->config->config_info;
  1027e2:	8b 06                	mov    (%esi),%eax
	struct gpio_dw_runtime *context = port->driver_data;
  1027e4:	8b 5e 08             	mov    0x8(%esi),%ebx
	const struct gpio_dw_config *config = port->config->config_info;
  1027e7:	8b 78 08             	mov    0x8(%eax),%edi
	pci_bus_scan_init();
  1027ea:	e8 c1 0f 00 00       	call   1037b0 <pci_bus_scan_init>
	if (!pci_bus_scan(&context->pci_dev)) {
  1027ef:	8d 53 04             	lea    0x4(%ebx),%edx
  1027f2:	52                   	push   %edx
  1027f3:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1027f6:	e8 23 10 00 00       	call   10381e <pci_bus_scan>
  1027fb:	5a                   	pop    %edx
  1027fc:	85 c0                	test   %eax,%eax
  1027fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102801:	74 48                	je     10284b <gpio_dw_initialize+0x73>
	context->base_addr = context->pci_dev.addr;
  102803:	8b 43 04             	mov    0x4(%ebx),%eax
  102806:	89 03                	mov    %eax,(%ebx)
	config->irq_num = context->pci_dev.irq;
  102808:	8b 43 0c             	mov    0xc(%ebx),%eax
  10280b:	89 47 04             	mov    %eax,0x4(%edi)
	pci_enable_regs(&context->pci_dev);
  10280e:	52                   	push   %edx
  10280f:	e8 d9 15 00 00       	call   103ded <pci_enable_regs>
		config->config_func(port);
	}

	gpio_dw_set_power_state(port, DEVICE_PM_ACTIVE_STATE);

	return 0;
  102814:	31 c0                	xor    %eax,%eax
	pci_enable_regs(&context->pci_dev);
  102816:	5a                   	pop    %edx
	if (dw_interrupt_support(config)) {
  102817:	83 7f 04 00          	cmpl   $0x0,0x4(%edi)
  10281b:	7e 38                	jle    102855 <gpio_dw_initialize+0x7d>
	return (base_addr & 0xFFFFFFC0);
  10281d:	8b 1b                	mov    (%ebx),%ebx
		dw_set_bit(base_addr, INT_CLOCK_SYNC, LS_SYNC_POS, 1);
  10281f:	31 c9                	xor    %ecx,%ecx
	return (base_addr & 0xFFFFFFC0);
  102821:	83 e3 c0             	and    $0xffffffc0,%ebx
		dw_set_bit(base_addr, INT_CLOCK_SYNC, LS_SYNC_POS, 1);
  102824:	ba 60 00 00 00       	mov    $0x60,%edx
  102829:	89 d8                	mov    %ebx,%eax
  10282b:	6a 01                	push   $0x1
  10282d:	e8 f5 fd ff ff       	call   102627 <dw_set_bit>
  102832:	83 c8 ff             	or     $0xffffffff,%eax
  102835:	89 43 34             	mov    %eax,0x34(%ebx)
  102838:	31 d2                	xor    %edx,%edx
  10283a:	89 53 30             	mov    %edx,0x30(%ebx)
  10283d:	89 43 4c             	mov    %eax,0x4c(%ebx)
		config->config_func(port);
  102840:	89 34 24             	mov    %esi,(%esp)
  102843:	ff 57 08             	call   *0x8(%edi)
  102846:	58                   	pop    %eax
	return 0;
  102847:	31 c0                	xor    %eax,%eax
  102849:	eb 0a                	jmp    102855 <gpio_dw_initialize+0x7d>
		port->driver_api = NULL;
  10284b:	c7 46 04 00 00 00 00 	movl   $0x0,0x4(%esi)
		return -EPERM;
  102852:	83 c8 ff             	or     $0xffffffff,%eax
}
  102855:	8d 65 f4             	lea    -0xc(%ebp),%esp
  102858:	5b                   	pop    %ebx
  102859:	5e                   	pop    %esi
  10285a:	5f                   	pop    %edi
  10285b:	5d                   	pop    %ebp
  10285c:	c3                   	ret    

0010285d <dw_pin_config>:
{
  10285d:	55                   	push   %ebp
  10285e:	89 e5                	mov    %esp,%ebp
  102860:	57                   	push   %edi
  102861:	56                   	push   %esi
  102862:	53                   	push   %ebx
  102863:	83 ec 08             	sub    $0x8,%esp
  102866:	89 c6                	mov    %eax,%esi
	u32_t base_addr = dw_base_to_block_base(context->base_addr);
  102868:	8b 40 08             	mov    0x8(%eax),%eax
{
  10286b:	89 d7                	mov    %edx,%edi
  10286d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	u32_t base_addr = dw_base_to_block_base(context->base_addr);
  102870:	8b 00                	mov    (%eax),%eax
  102872:	89 45 ec             	mov    %eax,-0x14(%ebp)
	const struct gpio_dw_config *config = port->config->config_info;
  102875:	8b 06                	mov    (%esi),%eax
	return ((int)(config->irq_num) > 0);
  102877:	8b 40 08             	mov    0x8(%eax),%eax
  10287a:	8b 58 04             	mov    0x4(%eax),%ebx
	if (interrupt_support) {
  10287d:	85 db                	test   %ebx,%ebx
  10287f:	7e 15                	jle    102896 <dw_pin_config+0x39>
	return (base_addr & 0xFFFFFFC0);
  102881:	8b 45 ec             	mov    -0x14(%ebp),%eax
		dw_set_bit(base_addr, INTEN, pin, 0);
  102884:	89 d1                	mov    %edx,%ecx
	return (base_addr & 0xFFFFFFC0);
  102886:	83 e0 c0             	and    $0xffffffc0,%eax
		dw_set_bit(base_addr, INTEN, pin, 0);
  102889:	ba 30 00 00 00       	mov    $0x30,%edx
  10288e:	6a 00                	push   $0x0
  102890:	e8 92 fd ff ff       	call   102627 <dw_set_bit>
  102895:	58                   	pop    %eax
	dw_set_bit(port_base_addr, SWPORTA_DDR, pin, (flags & GPIO_DIR_MASK));
  102896:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102899:	89 f9                	mov    %edi,%ecx
  10289b:	83 e0 01             	and    $0x1,%eax
  10289e:	ba 04 00 00 00       	mov    $0x4,%edx
  1028a3:	50                   	push   %eax
  1028a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028a7:	e8 7b fd ff ff       	call   102627 <dw_set_bit>
  1028ac:	58                   	pop    %eax
	if (interrupt_support && (flags & GPIO_INT)) {
  1028ad:	85 db                	test   %ebx,%ebx
  1028af:	0f 8e c0 00 00 00    	jle    102975 <dw_pin_config+0x118>
  1028b5:	f6 45 f0 02          	testb  $0x2,-0x10(%ebp)
  1028b9:	0f 84 b6 00 00 00    	je     102975 <dw_pin_config+0x118>
	const struct gpio_dw_config *config = port->config->config_info;
  1028bf:	8b 06                	mov    (%esi),%eax
	dw_set_bit(context->base_addr, SWPORTA_DDR, pin, 0);
  1028c1:	89 f9                	mov    %edi,%ecx
  1028c3:	ba 04 00 00 00       	mov    $0x4,%edx
	const struct gpio_dw_config *config = port->config->config_info;
  1028c8:	8b 58 08             	mov    0x8(%eax),%ebx
	u32_t base_addr = dw_base_to_block_base(context->base_addr);
  1028cb:	8b 46 08             	mov    0x8(%esi),%eax
  1028ce:	8b 30                	mov    (%eax),%esi
	dw_set_bit(context->base_addr, SWPORTA_DDR, pin, 0);
  1028d0:	6a 00                	push   $0x0
  1028d2:	89 f0                	mov    %esi,%eax
  1028d4:	e8 4e fd ff ff       	call   102627 <dw_set_bit>
  1028d9:	58                   	pop    %eax
	if (dw_interrupt_support(config)) {
  1028da:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
  1028de:	0f 8e 91 00 00 00    	jle    102975 <dw_pin_config+0x118>
		flag_is_set = (flags & GPIO_INT_EDGE);
  1028e4:	8a 45 f0             	mov    -0x10(%ebp),%al
	return (base_addr & 0xFFFFFFC0);
  1028e7:	83 e6 c0             	and    $0xffffffc0,%esi
		flag_is_set = (flags & GPIO_INT_EDGE);
  1028ea:	83 e0 20             	and    $0x20,%eax
		dw_set_bit(base_addr, INTTYPE_LEVEL, pin, flag_is_set);
  1028ed:	89 f9                	mov    %edi,%ecx
  1028ef:	0f b6 c0             	movzbl %al,%eax
  1028f2:	50                   	push   %eax
  1028f3:	ba 38 00 00 00       	mov    $0x38,%edx
  1028f8:	89 f0                	mov    %esi,%eax
  1028fa:	e8 28 fd ff ff       	call   102627 <dw_set_bit>
		flag_is_set = (flags & GPIO_INT_ACTIVE_HIGH);
  1028ff:	8a 45 f0             	mov    -0x10(%ebp),%al
  102902:	83 e0 04             	and    $0x4,%eax
		dw_set_bit(base_addr, INT_POLARITY, pin, flag_is_set);
  102905:	89 f9                	mov    %edi,%ecx
  102907:	0f b6 c0             	movzbl %al,%eax
  10290a:	89 04 24             	mov    %eax,(%esp)
  10290d:	ba 3c 00 00 00       	mov    $0x3c,%edx
  102912:	89 f0                	mov    %esi,%eax
  102914:	e8 0e fd ff ff       	call   102627 <dw_set_bit>
		if (flag_is_set) {
  102919:	8a 5d f0             	mov    -0x10(%ebp),%bl
  10291c:	80 e3 40             	and    $0x40,%bl
		dw_set_bit(base_addr, INT_POLARITY, pin, flag_is_set);
  10291f:	59                   	pop    %ecx
		if (flag_is_set) {
  102920:	74 25                	je     102947 <dw_pin_config+0xea>
	dw_set_bit(base_addr, INT_BOTHEDGE, pin, 1);
  102922:	89 f9                	mov    %edi,%ecx
  102924:	ba 68 00 00 00       	mov    $0x68,%edx
  102929:	89 f0                	mov    %esi,%eax
  10292b:	6a 01                	push   $0x1
			dw_set_bit(base_addr, INTTYPE_LEVEL, pin, flag_is_set);
  10292d:	0f b6 db             	movzbl %bl,%ebx
	dw_set_bit(base_addr, INT_BOTHEDGE, pin, 1);
  102930:	e8 f2 fc ff ff       	call   102627 <dw_set_bit>
			dw_set_bit(base_addr, INTTYPE_LEVEL, pin, flag_is_set);
  102935:	ba 38 00 00 00       	mov    $0x38,%edx
  10293a:	89 f9                	mov    %edi,%ecx
  10293c:	89 f0                	mov    %esi,%eax
  10293e:	89 1c 24             	mov    %ebx,(%esp)
  102941:	e8 e1 fc ff ff       	call   102627 <dw_set_bit>
  102946:	5a                   	pop    %edx
		flag_is_set = (flags & GPIO_INT_DEBOUNCE);
  102947:	8a 45 f0             	mov    -0x10(%ebp),%al
		dw_set_bit(base_addr, PORTA_DEBOUNCE, pin, flag_is_set);
  10294a:	89 f9                	mov    %edi,%ecx
		flag_is_set = (flags & GPIO_INT_DEBOUNCE);
  10294c:	83 e0 10             	and    $0x10,%eax
		dw_set_bit(base_addr, PORTA_DEBOUNCE, pin, flag_is_set);
  10294f:	ba 48 00 00 00       	mov    $0x48,%edx
  102954:	0f b6 c0             	movzbl %al,%eax
  102957:	50                   	push   %eax
  102958:	89 f0                	mov    %esi,%eax
  10295a:	e8 c8 fc ff ff       	call   102627 <dw_set_bit>
		dw_set_bit(base_addr, INTEN, pin, 1);
  10295f:	89 f0                	mov    %esi,%eax
  102961:	89 f9                	mov    %edi,%ecx
  102963:	ba 30 00 00 00       	mov    $0x30,%edx
  102968:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10296f:	e8 b3 fc ff ff       	call   102627 <dw_set_bit>
  102974:	58                   	pop    %eax
}
  102975:	8d 65 f4             	lea    -0xc(%ebp),%esp
  102978:	5b                   	pop    %ebx
  102979:	5e                   	pop    %esi
  10297a:	5f                   	pop    %edi
  10297b:	5d                   	pop    %ebp
  10297c:	c3                   	ret    

0010297d <gpio_dw_config>:
{
  10297d:	55                   	push   %ebp
  10297e:	89 e5                	mov    %esp,%ebp
  102980:	57                   	push   %edi
  102981:	56                   	push   %esi
  102982:	53                   	push   %ebx
	if ((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) {
  102983:	8b 45 14             	mov    0x14(%ebp),%eax
{
  102986:	8b 75 08             	mov    0x8(%ebp),%esi
	if ((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) {
  102989:	83 e0 03             	and    $0x3,%eax
{
  10298c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	if ((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) {
  10298f:	83 f8 03             	cmp    $0x3,%eax
  102992:	74 31                	je     1029c5 <gpio_dw_config+0x48>
	if (GPIO_ACCESS_BY_PIN == access_op) {
  102994:	85 db                	test   %ebx,%ebx
  102996:	75 0f                	jne    1029a7 <gpio_dw_config+0x2a>
		dw_pin_config(port, pin, flags);
  102998:	8b 4d 14             	mov    0x14(%ebp),%ecx
  10299b:	8b 55 10             	mov    0x10(%ebp),%edx
  10299e:	89 f0                	mov    %esi,%eax
  1029a0:	e8 b8 fe ff ff       	call   10285d <dw_pin_config>
  1029a5:	eb 23                	jmp    1029ca <gpio_dw_config+0x4d>
	const struct gpio_dw_config *config = port->config->config_info;
  1029a7:	8b 06                	mov    (%esi),%eax
	for (i = 0; i < config->bits; i++) {
  1029a9:	31 db                	xor    %ebx,%ebx
	const struct gpio_dw_config *config = port->config->config_info;
  1029ab:	8b 78 08             	mov    0x8(%eax),%edi
	for (i = 0; i < config->bits; i++) {
  1029ae:	3b 1f                	cmp    (%edi),%ebx
  1029b0:	73 0f                	jae    1029c1 <gpio_dw_config+0x44>
		dw_pin_config(port, i, flags);
  1029b2:	89 da                	mov    %ebx,%edx
  1029b4:	8b 4d 14             	mov    0x14(%ebp),%ecx
  1029b7:	89 f0                	mov    %esi,%eax
	for (i = 0; i < config->bits; i++) {
  1029b9:	43                   	inc    %ebx
		dw_pin_config(port, i, flags);
  1029ba:	e8 9e fe ff ff       	call   10285d <dw_pin_config>
  1029bf:	eb ed                	jmp    1029ae <gpio_dw_config+0x31>
	return 0;
  1029c1:	31 db                	xor    %ebx,%ebx
  1029c3:	eb 05                	jmp    1029ca <gpio_dw_config+0x4d>
		return -EINVAL;
  1029c5:	bb ea ff ff ff       	mov    $0xffffffea,%ebx
}
  1029ca:	89 d8                	mov    %ebx,%eax
  1029cc:	5b                   	pop    %ebx
  1029cd:	5e                   	pop    %esi
  1029ce:	5f                   	pop    %edi
  1029cf:	5d                   	pop    %ebp
  1029d0:	c3                   	ret    

001029d1 <gpio_config_0_irq>:
		    POST_KERNEL, CONFIG_GPIO_DW_INIT_PRIORITY,
		    &api_funcs);
#endif

static void gpio_config_0_irq(struct device *port)
{
  1029d1:	55                   	push   %ebp
  1029d2:	89 e5                	mov    %esp,%ebp
  1029d4:	56                   	push   %esi
  1029d5:	53                   	push   %ebx
  1029d6:	8b 75 08             	mov    0x8(%ebp),%esi
#if (GPIO_DW_0_IRQ > 0)
	const struct gpio_dw_config *config = port->config->config_info;
  1029d9:	8b 06                	mov    (%esi),%eax
		    DEVICE_GET(gpio_dw_0), GPIO_DW_0_IRQ_FLAGS);
	irq_enable(config->irq_num);
#elif defined(CONFIG_GPIO_DW_0_IRQ_SHARED)
	struct device *shared_irq_dev;

	shared_irq_dev = device_get_binding(config->shared_irq_dev_name);
  1029db:	8b 40 08             	mov    0x8(%eax),%eax
  1029de:	ff 70 0c             	pushl  0xc(%eax)
  1029e1:	e8 7c 26 00 00       	call   105062 <device_get_binding>
  1029e6:	89 c3                	mov    %eax,%ebx
static inline int shared_irq_isr_register(struct device *dev, isr_t isr_func,
				 struct device *isr_dev)
{
	const struct shared_irq_driver_api *api = dev->driver_api;

	return api->isr_register(dev, isr_func, isr_dev);
  1029e8:	8b 40 04             	mov    0x4(%eax),%eax
  1029eb:	89 34 24             	mov    %esi,(%esp)
  1029ee:	68 9c 27 10 00       	push   $0x10279c
  1029f3:	53                   	push   %ebx
  1029f4:	ff 10                	call   *(%eax)
  1029f6:	83 c4 0c             	add    $0xc,%esp
 */
static inline int shared_irq_enable(struct device *dev, struct device *isr_dev)
{
	const struct shared_irq_driver_api *api = dev->driver_api;

	return api->enable(dev, isr_dev);
  1029f9:	8b 43 04             	mov    0x4(%ebx),%eax
  1029fc:	56                   	push   %esi
  1029fd:	53                   	push   %ebx
  1029fe:	ff 50 04             	call   *0x4(%eax)
  102a01:	58                   	pop    %eax
  102a02:	5a                   	pop    %edx
	shared_irq_isr_register(shared_irq_dev, (isr_t)gpio_dw_isr, port);
	shared_irq_enable(shared_irq_dev, port);
#endif
	gpio_dw_unmask_int(GPIO_DW_PORT_0_INT_MASK);
#endif
}
  102a03:	8d 65 f8             	lea    -0x8(%ebp),%esp
  102a06:	5b                   	pop    %ebx
  102a07:	5e                   	pop    %esi
  102a08:	5d                   	pop    %ebp
  102a09:	c3                   	ret    

00102a0a <gpio_pcal9535a_manage_callback>:
}

static int gpio_pcal9535a_manage_callback(struct device *dev,
					  struct gpio_callback *callback,
					  bool set)
{
  102a0a:	55                   	push   %ebp
	ARG_UNUSED(dev);
	ARG_UNUSED(callback);
	ARG_UNUSED(set);

	return -ENOTSUP;
}
  102a0b:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
{
  102a10:	89 e5                	mov    %esp,%ebp
}
  102a12:	5d                   	pop    %ebp
  102a13:	c3                   	ret    

00102a14 <gpio_pcal9535a_disable_callback>:
	return -ENOTSUP;
}

static int gpio_pcal9535a_disable_callback(struct device *dev,
					   int access_op, u32_t pin)
{
  102a14:	55                   	push   %ebp
	ARG_UNUSED(dev);
	ARG_UNUSED(access_op);
	ARG_UNUSED(pin);

	return -ENOTSUP;
}
  102a15:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
{
  102a1a:	89 e5                	mov    %esp,%ebp
}
  102a1c:	5d                   	pop    %ebp
  102a1d:	c3                   	ret    

00102a1e <gpio_pcal9535a_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int gpio_pcal9535a_init(struct device *dev)
{
  102a1e:	55                   	push   %ebp
  102a1f:	89 e5                	mov    %esp,%ebp
  102a21:	56                   	push   %esi
  102a22:	53                   	push   %ebx
  102a23:	8b 5d 08             	mov    0x8(%ebp),%ebx
	const struct gpio_pcal9535a_config * const config =
  102a26:	8b 03                	mov    (%ebx),%eax
		dev->config->config_info;
	struct gpio_pcal9535a_drv_data * const drv_data =
  102a28:	8b 73 08             	mov    0x8(%ebx),%esi
		(struct gpio_pcal9535a_drv_data * const)dev->driver_data;
	struct device *i2c_master;

	/* Find out the device struct of the I2C master */
	i2c_master = device_get_binding((char *)config->i2c_master_dev_name);
  102a2b:	8b 40 08             	mov    0x8(%eax),%eax
  102a2e:	ff 30                	pushl  (%eax)
  102a30:	e8 2d 26 00 00       	call   105062 <device_get_binding>
  102a35:	5a                   	pop    %edx
	if (!i2c_master) {
  102a36:	85 c0                	test   %eax,%eax
  102a38:	ba ea ff ff ff       	mov    $0xffffffea,%edx
  102a3d:	74 0b                	je     102a4a <gpio_pcal9535a_init+0x2c>
		return -EINVAL;
	}
	drv_data->i2c_master = i2c_master;
  102a3f:	89 06                	mov    %eax,(%esi)

	dev->driver_api = &gpio_pcal9535a_drv_api_funcs;

	return 0;
  102a41:	31 d2                	xor    %edx,%edx
	dev->driver_api = &gpio_pcal9535a_drv_api_funcs;
  102a43:	c7 43 04 4c 6b 10 00 	movl   $0x106b4c,0x4(%ebx)
}
  102a4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
  102a4d:	89 d0                	mov    %edx,%eax
  102a4f:	5b                   	pop    %ebx
  102a50:	5e                   	pop    %esi
  102a51:	5d                   	pop    %ebp
  102a52:	c3                   	ret    

00102a53 <gpio_pcal9535a_enable_callback>:
  102a53:	55                   	push   %ebp
  102a54:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
  102a59:	89 e5                	mov    %esp,%ebp
  102a5b:	5d                   	pop    %ebp
  102a5c:	c3                   	ret    

00102a5d <_write_port_regs>:
{
  102a5d:	55                   	push   %ebp
  102a5e:	89 e5                	mov    %esp,%ebp
  102a60:	56                   	push   %esi
  102a61:	53                   	push   %ebx
  102a62:	83 ec 1c             	sub    $0x1c,%esp
	struct device * const i2c_master = drv_data->i2c_master;
  102a65:	8b 58 08             	mov    0x8(%eax),%ebx
	const struct gpio_pcal9535a_config * const config =
  102a68:	8b 00                	mov    (%eax),%eax
	u16_t i2c_addr = config->i2c_slave_addr;
  102a6a:	8b 40 08             	mov    0x8(%eax),%eax
	struct device * const i2c_master = drv_data->i2c_master;
  102a6d:	8b 1b                	mov    (%ebx),%ebx
  102a6f:	88 55 df             	mov    %dl,-0x21(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  102a72:	8d 55 e0             	lea    -0x20(%ebp),%edx
	ret = i2c_burst_write(i2c_master, i2c_addr, reg, buf->byte, 2);
  102a75:	0f b7 70 04          	movzwl 0x4(%eax),%esi
				  u8_t start_addr, u8_t *buf,
				  u8_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
  102a79:	8d 45 df             	lea    -0x21(%ebp),%eax
	msg[0].len = 1;
	msg[0].flags = I2C_MSG_WRITE;
  102a7c:	c6 45 e8 00          	movb   $0x0,-0x18(%ebp)

	msg[1].buf = buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
  102a80:	c6 45 f4 02          	movb   $0x2,-0xc(%ebp)
	msg[0].buf = &start_addr;
  102a84:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  102a87:	8b 43 04             	mov    0x4(%ebx),%eax
	msg[0].len = 1;
  102a8a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  102a91:	56                   	push   %esi
	msg[1].buf = buf;
  102a92:	89 4d ec             	mov    %ecx,-0x14(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  102a95:	6a 02                	push   $0x2
	msg[1].len = num_bytes;
  102a97:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  102a9e:	52                   	push   %edx
  102a9f:	53                   	push   %ebx
  102aa0:	ff 50 04             	call   *0x4(%eax)
  102aa3:	83 c4 10             	add    $0x10,%esp
}
  102aa6:	8d 65 f8             	lea    -0x8(%ebp),%esp
  102aa9:	5b                   	pop    %ebx
  102aaa:	5e                   	pop    %esi
  102aab:	5d                   	pop    %ebp
  102aac:	c3                   	ret    

00102aad <gpio_pcal9535a_config>:
{
  102aad:	55                   	push   %ebp
  102aae:	89 e5                	mov    %esp,%ebp
  102ab0:	57                   	push   %edi
  102ab1:	56                   	push   %esi
  102ab2:	53                   	push   %ebx
  102ab3:	83 ec 08             	sub    $0x8,%esp
  102ab6:	8b 7d 08             	mov    0x8(%ebp),%edi
  102ab9:	8b 45 10             	mov    0x10(%ebp),%eax
  102abc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102abf:	8b 45 14             	mov    0x14(%ebp),%eax
  102ac2:	8b 57 08             	mov    0x8(%edi),%edx
  102ac5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102ac8:	8b 75 0c             	mov    0xc(%ebp),%esi
		return -EINVAL;
  102acb:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (i2c_master)
  102ad0:	83 3a 00             	cmpl   $0x0,(%edx)
  102ad3:	0f 84 67 01 00 00    	je     102c40 <gpio_pcal9535a_config+0x193>
	switch (access_op) {
  102ad9:	85 f6                	test   %esi,%esi
  102adb:	75 1e                	jne    102afb <gpio_pcal9535a_config+0x4e>
		bit_mask = 1 << pin;
  102add:	8a 4d f0             	mov    -0x10(%ebp),%cl
  102ae0:	b8 01 00 00 00       	mov    $0x1,%eax
  102ae5:	d3 e0                	shl    %cl,%eax
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_IN) {
  102ae7:	31 c9                	xor    %ecx,%ecx
  102ae9:	f6 45 ec 01          	testb  $0x1,-0x14(%ebp)
  102aed:	75 02                	jne    102af1 <gpio_pcal9535a_config+0x44>
  102aef:	89 c1                	mov    %eax,%ecx
		port->all &= ~bit_mask;
  102af1:	f7 d0                	not    %eax
  102af3:	66 23 42 0c          	and    0xc(%edx),%ax
		port->all |= new_value;
  102af7:	09 c8                	or     %ecx,%eax
  102af9:	eb 10                	jmp    102b0b <gpio_pcal9535a_config+0x5e>
	switch (access_op) {
  102afb:	83 fe 01             	cmp    $0x1,%esi
  102afe:	0f 85 dc 00 00 00    	jne    102be0 <gpio_pcal9535a_config+0x133>
			port->all = 0xFFFF;
  102b04:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102b07:	83 e0 01             	and    $0x1,%eax
  102b0a:	48                   	dec    %eax
  102b0b:	66 89 42 0c          	mov    %ax,0xc(%edx)
	union gpio_pcal9535a_port_data *port = &drv_data->reg_cache.dir;
  102b0f:	8d 4a 0c             	lea    0xc(%edx),%ecx
	ret = _write_port_regs(dev, REG_CONF_PORT0, port);
  102b12:	89 f8                	mov    %edi,%eax
  102b14:	ba 06 00 00 00       	mov    $0x6,%edx
  102b19:	e8 3f ff ff ff       	call   102a5d <_write_port_regs>
	if (ret) {
  102b1e:	85 c0                	test   %eax,%eax
  102b20:	0f 85 1a 01 00 00    	jne    102c40 <gpio_pcal9535a_config+0x193>
	struct gpio_pcal9535a_drv_data * const drv_data =
  102b26:	8b 5f 08             	mov    0x8(%edi),%ebx
	switch (access_op) {
  102b29:	85 f6                	test   %esi,%esi
  102b2b:	74 15                	je     102b42 <gpio_pcal9535a_config+0x95>
  102b2d:	83 fe 01             	cmp    $0x1,%esi
  102b30:	0f 85 aa 00 00 00    	jne    102be0 <gpio_pcal9535a_config+0x133>
			port->all = 0xFFFF;
  102b36:	31 c0                	xor    %eax,%eax
  102b38:	f6 45 ec 80          	testb  $0x80,-0x14(%ebp)
  102b3c:	0f 94 c0             	sete   %al
  102b3f:	48                   	dec    %eax
  102b40:	eb 1c                	jmp    102b5e <gpio_pcal9535a_config+0xb1>
		bit_mask = BIT(pin);
  102b42:	b8 01 00 00 00       	mov    $0x1,%eax
  102b47:	8a 4d f0             	mov    -0x10(%ebp),%cl
  102b4a:	d3 e0                	shl    %cl,%eax
		if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
  102b4c:	31 d2                	xor    %edx,%edx
  102b4e:	f6 45 ec 80          	testb  $0x80,-0x14(%ebp)
  102b52:	74 02                	je     102b56 <gpio_pcal9535a_config+0xa9>
  102b54:	89 c2                	mov    %eax,%edx
		port->all &= ~bit_mask;
  102b56:	f7 d0                	not    %eax
  102b58:	66 23 43 0a          	and    0xa(%ebx),%ax
		port->all |= new_value;
  102b5c:	09 d0                	or     %edx,%eax
			port->all = 0xFFFF;
  102b5e:	66 89 43 0a          	mov    %ax,0xa(%ebx)
	union gpio_pcal9535a_port_data *port = &drv_data->reg_cache.pol_inv;
  102b62:	8d 4b 0a             	lea    0xa(%ebx),%ecx
	ret = _write_port_regs(dev, REG_POL_INV_PORT0, port);
  102b65:	ba 04 00 00 00       	mov    $0x4,%edx
  102b6a:	89 f8                	mov    %edi,%eax
  102b6c:	e8 ec fe ff ff       	call   102a5d <_write_port_regs>
	if (!ret) {
  102b71:	85 c0                	test   %eax,%eax
  102b73:	0f 85 c7 00 00 00    	jne    102c40 <gpio_pcal9535a_config+0x193>
		drv_data->out_pol_inv = port->all;
  102b79:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_NORMAL) {
  102b7d:	8b 55 ec             	mov    -0x14(%ebp),%edx
		drv_data->out_pol_inv = port->all;
  102b80:	89 43 04             	mov    %eax,0x4(%ebx)
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_NORMAL) {
  102b83:	81 e2 00 03 00 00    	and    $0x300,%edx
	struct gpio_pcal9535a_drv_data * const drv_data =
  102b89:	8b 5f 08             	mov    0x8(%edi),%ebx
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_NORMAL) {
  102b8c:	0f 84 91 00 00 00    	je     102c23 <gpio_pcal9535a_config+0x176>
	switch (access_op) {
  102b92:	85 f6                	test   %esi,%esi
  102b94:	74 13                	je     102ba9 <gpio_pcal9535a_config+0xfc>
  102b96:	83 fe 01             	cmp    $0x1,%esi
  102b99:	75 45                	jne    102be0 <gpio_pcal9535a_config+0x133>
			port->all = 0xFFFF;
  102b9b:	31 c0                	xor    %eax,%eax
  102b9d:	81 fa 00 01 00 00    	cmp    $0x100,%edx
  102ba3:	0f 95 c0             	setne  %al
  102ba6:	48                   	dec    %eax
  102ba7:	eb 1e                	jmp    102bc7 <gpio_pcal9535a_config+0x11a>
		bit_mask = 1 << pin;
  102ba9:	8a 4d f0             	mov    -0x10(%ebp),%cl
  102bac:	b8 01 00 00 00       	mov    $0x1,%eax
  102bb1:	d3 e0                	shl    %cl,%eax
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
  102bb3:	31 c9                	xor    %ecx,%ecx
  102bb5:	81 fa 00 01 00 00    	cmp    $0x100,%edx
  102bbb:	75 02                	jne    102bbf <gpio_pcal9535a_config+0x112>
  102bbd:	89 c1                	mov    %eax,%ecx
		port->all &= ~bit_mask;
  102bbf:	f7 d0                	not    %eax
  102bc1:	66 23 43 10          	and    0x10(%ebx),%ax
		port->all |= new_value;
  102bc5:	09 c8                	or     %ecx,%eax
			port->all = 0xFFFF;
  102bc7:	66 89 43 10          	mov    %ax,0x10(%ebx)
	port = &drv_data->reg_cache.pud_sel;
  102bcb:	8d 4b 10             	lea    0x10(%ebx),%ecx
	ret = _write_port_regs(dev, REG_PUD_SEL_PORT0, port);
  102bce:	ba 48 00 00 00       	mov    $0x48,%edx
  102bd3:	89 f8                	mov    %edi,%eax
  102bd5:	e8 83 fe ff ff       	call   102a5d <_write_port_regs>
	if (ret) {
  102bda:	85 c0                	test   %eax,%eax
  102bdc:	74 09                	je     102be7 <gpio_pcal9535a_config+0x13a>
  102bde:	eb 60                	jmp    102c40 <gpio_pcal9535a_config+0x193>
		ret = -ENOTSUP;
  102be0:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
  102be5:	eb 59                	jmp    102c40 <gpio_pcal9535a_config+0x193>
	switch (access_op) {
  102be7:	85 f6                	test   %esi,%esi
  102be9:	75 1a                	jne    102c05 <gpio_pcal9535a_config+0x158>
		bit_mask = 1 << pin;
  102beb:	b8 01 00 00 00       	mov    $0x1,%eax
  102bf0:	8a 4d f0             	mov    -0x10(%ebp),%cl
  102bf3:	d3 e0                	shl    %cl,%eax
  102bf5:	89 c2                	mov    %eax,%edx
		port->all &= ~bit_mask;
  102bf7:	f7 d0                	not    %eax
  102bf9:	66 23 43 0e          	and    0xe(%ebx),%ax
		port->all |= new_value;
  102bfd:	09 d0                	or     %edx,%eax
  102bff:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  102c03:	eb 09                	jmp    102c0e <gpio_pcal9535a_config+0x161>
	switch (access_op) {
  102c05:	4e                   	dec    %esi
  102c06:	75 d8                	jne    102be0 <gpio_pcal9535a_config+0x133>
			port->all = 0xFFFF;
  102c08:	66 c7 43 0e ff ff    	movw   $0xffff,0xe(%ebx)
	port = &drv_data->reg_cache.pud_en;
  102c0e:	8d 4b 0e             	lea    0xe(%ebx),%ecx
	ret = _write_port_regs(dev, REG_PUD_EN_PORT0, port);
  102c11:	89 f8                	mov    %edi,%eax
  102c13:	ba 46 00 00 00       	mov    $0x46,%edx
}
  102c18:	5b                   	pop    %ebx
  102c19:	5e                   	pop    %esi
  102c1a:	5b                   	pop    %ebx
  102c1b:	5e                   	pop    %esi
  102c1c:	5f                   	pop    %edi
  102c1d:	5d                   	pop    %ebp
	ret = _write_port_regs(dev, REG_PUD_EN_PORT0, port);
  102c1e:	e9 3a fe ff ff       	jmp    102a5d <_write_port_regs>
	switch (access_op) {
  102c23:	85 f6                	test   %esi,%esi
  102c25:	75 0e                	jne    102c35 <gpio_pcal9535a_config+0x188>
		bit_mask = 1 << pin;
  102c27:	b8 01 00 00 00       	mov    $0x1,%eax
  102c2c:	8a 4d f0             	mov    -0x10(%ebp),%cl
  102c2f:	d3 e0                	shl    %cl,%eax
	u16_t new_value = 0;
  102c31:	31 d2                	xor    %edx,%edx
  102c33:	eb c2                	jmp    102bf7 <gpio_pcal9535a_config+0x14a>
	switch (access_op) {
  102c35:	4e                   	dec    %esi
  102c36:	75 a8                	jne    102be0 <gpio_pcal9535a_config+0x133>
			port->all = 0x0;
  102c38:	66 c7 43 0e 00 00    	movw   $0x0,0xe(%ebx)
  102c3e:	eb ce                	jmp    102c0e <gpio_pcal9535a_config+0x161>
}
  102c40:	5a                   	pop    %edx
  102c41:	59                   	pop    %ecx
  102c42:	5b                   	pop    %ebx
  102c43:	5e                   	pop    %esi
  102c44:	5f                   	pop    %edi
  102c45:	5d                   	pop    %ebp
  102c46:	c3                   	ret    

00102c47 <gpio_pcal9535a_write>:
{
  102c47:	55                   	push   %ebp
  102c48:	89 e5                	mov    %esp,%ebp
  102c4a:	56                   	push   %esi
  102c4b:	53                   	push   %ebx
  102c4c:	8b 45 08             	mov    0x8(%ebp),%eax
  102c4f:	8b 75 0c             	mov    0xc(%ebp),%esi
  102c52:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102c55:	8b 5d 14             	mov    0x14(%ebp),%ebx
	struct gpio_pcal9535a_drv_data * const drv_data =
  102c58:	8b 50 08             	mov    0x8(%eax),%edx
	if (i2c_master)
  102c5b:	83 3a 00             	cmpl   $0x0,(%edx)
  102c5e:	75 07                	jne    102c67 <gpio_pcal9535a_write+0x20>
		return -EINVAL;
  102c60:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  102c65:	eb 49                	jmp    102cb0 <gpio_pcal9535a_write+0x69>
	switch (access_op) {
  102c67:	85 f6                	test   %esi,%esi
  102c69:	75 1a                	jne    102c85 <gpio_pcal9535a_write+0x3e>
		bit_mask = BIT(pin);
  102c6b:	be 01 00 00 00       	mov    $0x1,%esi
  102c70:	d3 e6                	shl    %cl,%esi
		new_value = (value << pin) & bit_mask;
  102c72:	d3 e3                	shl    %cl,%ebx
		port->all &= ~bit_mask;
  102c74:	89 f1                	mov    %esi,%ecx
		new_value ^= (drv_data->out_pol_inv & bit_mask);
  102c76:	33 5a 04             	xor    0x4(%edx),%ebx
		port->all &= ~bit_mask;
  102c79:	f7 d1                	not    %ecx
  102c7b:	66 23 4a 08          	and    0x8(%edx),%cx
		new_value &= bit_mask;
  102c7f:	21 f3                	and    %esi,%ebx
		port->all |= new_value;
  102c81:	09 cb                	or     %ecx,%ebx
  102c83:	eb 12                	jmp    102c97 <gpio_pcal9535a_write+0x50>
	switch (access_op) {
  102c85:	4e                   	dec    %esi
  102c86:	75 23                	jne    102cab <gpio_pcal9535a_write+0x64>
		new_value &= bit_mask;
  102c88:	89 de                	mov    %ebx,%esi
		bit_mask = drv_data->out_pol_inv;
  102c8a:	8b 4a 04             	mov    0x4(%edx),%ecx
		new_value &= bit_mask;
  102c8d:	f7 d6                	not    %esi
  102c8f:	21 ce                	and    %ecx,%esi
		port->all &= ~bit_mask;
  102c91:	f7 d1                	not    %ecx
  102c93:	21 cb                	and    %ecx,%ebx
		port->all |= new_value;
  102c95:	09 f3                	or     %esi,%ebx
  102c97:	66 89 5a 08          	mov    %bx,0x8(%edx)
	union gpio_pcal9535a_port_data *port = &drv_data->reg_cache.output;
  102c9b:	8d 4a 08             	lea    0x8(%edx),%ecx
	ret = _write_port_regs(dev, REG_OUTPUT_PORT0, port);
  102c9e:	ba 02 00 00 00       	mov    $0x2,%edx
}
  102ca3:	5b                   	pop    %ebx
  102ca4:	5e                   	pop    %esi
  102ca5:	5d                   	pop    %ebp
	ret = _write_port_regs(dev, REG_OUTPUT_PORT0, port);
  102ca6:	e9 b2 fd ff ff       	jmp    102a5d <_write_port_regs>
		ret = -ENOTSUP;
  102cab:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
}
  102cb0:	5b                   	pop    %ebx
  102cb1:	5e                   	pop    %esi
  102cb2:	5d                   	pop    %ebp
  102cb3:	c3                   	ret    

00102cb4 <gpio_pcal9535a_read>:
{
  102cb4:	55                   	push   %ebp
  102cb5:	89 e5                	mov    %esp,%ebp
  102cb7:	56                   	push   %esi
  102cb8:	53                   	push   %ebx
  102cb9:	83 ec 1c             	sub    $0x1c,%esp
  102cbc:	8b 55 08             	mov    0x8(%ebp),%edx
  102cbf:	8b 75 0c             	mov    0xc(%ebp),%esi
  102cc2:	8b 5d 14             	mov    0x14(%ebp),%ebx
	struct device * const i2c_master = drv_data->i2c_master;
  102cc5:	8b 42 08             	mov    0x8(%edx),%eax
  102cc8:	8b 00                	mov    (%eax),%eax
	if (i2c_master)
  102cca:	85 c0                	test   %eax,%eax
  102ccc:	75 07                	jne    102cd5 <gpio_pcal9535a_read+0x21>
		return -EINVAL;
  102cce:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  102cd3:	eb 66                	jmp    102d3b <gpio_pcal9535a_read+0x87>
	const struct gpio_pcal9535a_config * const config =
  102cd5:	8b 12                	mov    (%edx),%edx
  102cd7:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
	u16_t i2c_addr = config->i2c_slave_addr;
  102cdb:	8b 52 08             	mov    0x8(%edx),%edx
	ret = i2c_burst_read(i2c_master, i2c_addr, reg, buf->byte, 2);
  102cde:	0f b7 4a 04          	movzwl 0x4(%edx),%ecx
	msg[0].buf = &start_addr;
  102ce2:	8d 55 dd             	lea    -0x23(%ebp),%edx
	msg[0].flags = I2C_MSG_WRITE;
  102ce5:	c6 45 e8 00          	movb   $0x0,-0x18(%ebp)
	msg[0].buf = &start_addr;
  102ce9:	89 55 e0             	mov    %edx,-0x20(%ebp)
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
  102cec:	c6 45 f4 07          	movb   $0x7,-0xc(%ebp)
	msg[1].buf = buf;
  102cf0:	8d 55 de             	lea    -0x22(%ebp),%edx
	msg[0].len = 1;
  102cf3:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	msg[1].buf = buf;
  102cfa:	89 55 ec             	mov    %edx,-0x14(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  102cfd:	8b 50 04             	mov    0x4(%eax),%edx
	msg[1].len = num_bytes;
  102d00:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  102d07:	51                   	push   %ecx
  102d08:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  102d0b:	6a 02                	push   $0x2
  102d0d:	51                   	push   %ecx
  102d0e:	50                   	push   %eax
  102d0f:	ff 52 04             	call   *0x4(%edx)
  102d12:	83 c4 10             	add    $0x10,%esp
	if (ret != 0) {
  102d15:	85 c0                	test   %eax,%eax
  102d17:	75 22                	jne    102d3b <gpio_pcal9535a_read+0x87>
	switch (access_op) {
  102d19:	85 f6                	test   %esi,%esi
  102d1b:	74 09                	je     102d26 <gpio_pcal9535a_read+0x72>
  102d1d:	4e                   	dec    %esi
  102d1e:	75 16                	jne    102d36 <gpio_pcal9535a_read+0x82>
		*value = buf.all;
  102d20:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
  102d24:	eb 0c                	jmp    102d32 <gpio_pcal9535a_read+0x7e>
		*value = (buf.all >> pin) & 0x01;
  102d26:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
  102d2a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102d2d:	d3 fa                	sar    %cl,%edx
  102d2f:	83 e2 01             	and    $0x1,%edx
		*value = buf.all;
  102d32:	89 13                	mov    %edx,(%ebx)
		break;
  102d34:	eb 05                	jmp    102d3b <gpio_pcal9535a_read+0x87>
		ret = -ENOTSUP;
  102d36:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
}
  102d3b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  102d3e:	5b                   	pop    %ebx
  102d3f:	5e                   	pop    %esi
  102d40:	5d                   	pop    %ebp
  102d41:	c3                   	ret    

00102d42 <gpio_sch_read>:
	return 0;
}

static int gpio_sch_read(struct device *dev,
			 int access_op, u32_t pin, u32_t *value)
{
  102d42:	55                   	push   %ebp
  102d43:	89 e5                	mov    %esp,%ebp
  102d45:	57                   	push   %edi
  102d46:	56                   	push   %esi
  102d47:	53                   	push   %ebx
	const struct gpio_sch_config *info = dev->config->config_info;
  102d48:	8b 45 08             	mov    0x8(%ebp),%eax
{
  102d4b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  102d4e:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102d51:	8b 75 14             	mov    0x14(%ebp),%esi
	const struct gpio_sch_config *info = dev->config->config_info;
  102d54:	8b 00                	mov    (%eax),%eax
  102d56:	8b 78 08             	mov    0x8(%eax),%edi
DEFINE_MM_REG_READ(glvl, GPIO_SCH_REG_GLVL)
  102d59:	8b 07                	mov    (%edi),%eax
  102d5b:	8d 50 08             	lea    0x8(%eax),%edx
	__asm__ volatile("inl	%w1, %0;\n\t"
  102d5e:	ed                   	in     (%dx),%eax

	*value = _read_glvl(info->regs);
  102d5f:	89 06                	mov    %eax,(%esi)

	if (access_op == GPIO_ACCESS_BY_PIN) {
  102d61:	85 db                	test   %ebx,%ebx
  102d63:	75 11                	jne    102d76 <gpio_sch_read+0x34>
		if (pin >= info->bits) {
  102d65:	0f b6 57 04          	movzbl 0x4(%edi),%edx
  102d69:	39 ca                	cmp    %ecx,%edx
  102d6b:	76 0d                	jbe    102d7a <gpio_sch_read+0x38>
			return -ENOTSUP;
		}

		*value = !!(*value & BIT(pin));
  102d6d:	d3 e8                	shr    %cl,%eax
  102d6f:	83 e0 01             	and    $0x1,%eax
  102d72:	89 06                	mov    %eax,(%esi)
  102d74:	eb 09                	jmp    102d7f <gpio_sch_read+0x3d>
	}

	return 0;
  102d76:	31 db                	xor    %ebx,%ebx
  102d78:	eb 05                	jmp    102d7f <gpio_sch_read+0x3d>
			return -ENOTSUP;
  102d7a:	bb dd ff ff ff       	mov    $0xffffffdd,%ebx
}
  102d7f:	89 d8                	mov    %ebx,%eax
  102d81:	5b                   	pop    %ebx
  102d82:	5e                   	pop    %esi
  102d83:	5f                   	pop    %edi
  102d84:	5d                   	pop    %ebp
  102d85:	c3                   	ret    

00102d86 <gpio_sch_init>:
	.enable_callback = gpio_sch_enable_callback,
	.disable_callback = gpio_sch_disable_callback,
};

static int gpio_sch_init(struct device *dev)
{
  102d86:	55                   	push   %ebp
  102d87:	89 e5                	mov    %esp,%ebp
  102d89:	8b 55 08             	mov    0x8(%ebp),%edx
	struct gpio_sch_data *gpio = dev->driver_data;
  102d8c:	8b 42 08             	mov    0x8(%edx),%eax

	dev->driver_api = &gpio_sch_api;
  102d8f:	c7 42 04 88 6b 10 00 	movl   $0x106b88,0x4(%edx)

	k_timer_init(&gpio->poll_timer, NULL, NULL);
  102d96:	05 40 04 00 00       	add    $0x440,%eax
  102d9b:	6a 00                	push   $0x0
  102d9d:	6a 00                	push   $0x0
  102d9f:	50                   	push   %eax
  102da0:	e8 53 32 00 00       	call   105ff8 <k_timer_init>
  102da5:	83 c4 0c             	add    $0xc,%esp

	SYS_LOG_DBG("SCH GPIO Intel Driver initialized on device: %p", dev);

	return 0;
}
  102da8:	31 c0                	xor    %eax,%eax
  102daa:	c9                   	leave  
  102dab:	c3                   	ret    

00102dac <_set_bit>:
{
  102dac:	55                   	push   %ebp
  102dad:	89 e5                	mov    %esp,%ebp
  102daf:	56                   	push   %esi
  102db0:	53                   	push   %ebx
  102db1:	89 c3                	mov    %eax,%ebx
  102db3:	89 d6                	mov    %edx,%esi
	__asm__ volatile("inl	%w1, %0;\n\t"
  102db5:	31 c0                	xor    %eax,%eax
  102db7:	89 da                	mov    %ebx,%edx
	if (!set) {
  102db9:	84 c9                	test   %cl,%cl
  102dbb:	75 07                	jne    102dc4 <_set_bit+0x18>
  102dbd:	ed                   	in     (%dx),%eax
  102dbe:	0f b3 f0             	btr    %esi,%eax
  102dc1:	ef                   	out    %eax,(%dx)
  102dc2:	eb 05                	jmp    102dc9 <_set_bit+0x1d>
	__asm__ volatile("inl	%w1, %0;\n\t"
  102dc4:	ed                   	in     (%dx),%eax
  102dc5:	0f ab f0             	bts    %esi,%eax
  102dc8:	ef                   	out    %eax,(%dx)
}
  102dc9:	5b                   	pop    %ebx
  102dca:	5e                   	pop    %esi
  102dcb:	5d                   	pop    %ebp
  102dcc:	c3                   	ret    

00102dcd <gpio_sch_write>:
{
  102dcd:	55                   	push   %ebp
  102dce:	89 e5                	mov    %esp,%ebp
  102dd0:	56                   	push   %esi
  102dd1:	53                   	push   %ebx
	const struct gpio_sch_config *info = dev->config->config_info;
  102dd2:	8b 45 08             	mov    0x8(%ebp),%eax
{
  102dd5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  102dd8:	8b 55 10             	mov    0x10(%ebp),%edx
  102ddb:	8b 4d 14             	mov    0x14(%ebp),%ecx
	const struct gpio_sch_config *info = dev->config->config_info;
  102dde:	8b 00                	mov    (%eax),%eax
	if (access_op == GPIO_ACCESS_BY_PIN) {
  102de0:	85 db                	test   %ebx,%ebx
	const struct gpio_sch_config *info = dev->config->config_info;
  102de2:	8b 40 08             	mov    0x8(%eax),%eax
	if (access_op == GPIO_ACCESS_BY_PIN) {
  102de5:	75 17                	jne    102dfe <gpio_sch_write+0x31>
		if (pin >= info->bits) {
  102de7:	0f b6 70 04          	movzbl 0x4(%eax),%esi
  102deb:	39 d6                	cmp    %edx,%esi
  102ded:	76 19                	jbe    102e08 <gpio_sch_write+0x3b>
DEFINE_MM_REG_SET_BIT(glvl, GPIO_SCH_REG_GLVL)
  102def:	8b 00                	mov    (%eax),%eax
		_set_bit_glvl(info->regs, pin, value);
  102df1:	0f b6 c9             	movzbl %cl,%ecx
DEFINE_MM_REG_SET_BIT(glvl, GPIO_SCH_REG_GLVL)
  102df4:	83 c0 08             	add    $0x8,%eax
  102df7:	e8 b0 ff ff ff       	call   102dac <_set_bit>
  102dfc:	eb 0f                	jmp    102e0d <gpio_sch_write+0x40>
	__asm__ volatile("outl	%0, %w1;\n\t"
  102dfe:	8b 00                	mov    (%eax),%eax
DEFINE_MM_REG_WRITE(glvl, GPIO_SCH_REG_GLVL)
  102e00:	8d 51 08             	lea    0x8(%ecx),%edx
  102e03:	ef                   	out    %eax,(%dx)
	return 0;
  102e04:	31 db                	xor    %ebx,%ebx
  102e06:	eb 05                	jmp    102e0d <gpio_sch_write+0x40>
			return -ENOTSUP;
  102e08:	bb dd ff ff ff       	mov    $0xffffffdd,%ebx
}
  102e0d:	89 d8                	mov    %ebx,%eax
  102e0f:	5b                   	pop    %ebx
  102e10:	5e                   	pop    %esi
  102e11:	5d                   	pop    %ebp
  102e12:	c3                   	ret    

00102e13 <_gpio_sch_manage_callback>:
	struct gpio_sch_data *gpio = dev->driver_data;
  102e13:	8b 50 08             	mov    0x8(%eax),%edx
	if (!sys_slist_is_empty(&gpio->callbacks) && gpio->cb_enabled) {
  102e16:	83 ba 38 04 00 00 00 	cmpl   $0x0,0x438(%edx)
  102e1d:	74 44                	je     102e63 <_gpio_sch_manage_callback+0x50>
  102e1f:	83 ba 7c 04 00 00 00 	cmpl   $0x0,0x47c(%edx)
  102e26:	74 3b                	je     102e63 <_gpio_sch_manage_callback+0x50>
		if (!gpio->poll) {
  102e28:	80 ba 80 04 00 00 00 	cmpb   $0x0,0x480(%edx)
  102e2f:	75 3a                	jne    102e6b <_gpio_sch_manage_callback+0x58>
{
  102e31:	55                   	push   %ebp
			gpio->poll = 1;
  102e32:	c6 82 80 04 00 00 01 	movb   $0x1,0x480(%edx)
{
  102e39:	89 e5                	mov    %esp,%ebp

  102e3b:	6a 00                	push   $0x0
  102e3d:	6a 00                	push   $0x0
  102e3f:	6a f1                	push   $0xfffffff1
  102e41:	6a 00                	push   $0x0
  102e43:	6a 00                	push   $0x0
  102e45:	50                   	push   %eax
  102e46:	68 96 2f 10 00       	push   $0x102f96
  102e4b:	68 00 04 00 00       	push   $0x400
  102e50:	52                   	push   %edx
			k_thread_create(&gpio->polling_thread,
  102e51:	81 c2 00 04 00 00    	add    $0x400,%edx
  102e57:	52                   	push   %edx
  102e58:	e8 b1 2e 00 00       	call   105d0e <_impl_k_thread_create>
  102e5d:	83 c4 28             	add    $0x28,%esp
}
  102e60:	c9                   	leave  
  102e61:	eb 08                	jmp    102e6b <_gpio_sch_manage_callback+0x58>
		gpio->poll = 0;
  102e63:	c6 82 80 04 00 00 00 	movb   $0x0,0x480(%edx)
}
  102e6a:	c3                   	ret    
  102e6b:	c3                   	ret    

00102e6c <gpio_sch_enable_callback>:
{
  102e6c:	55                   	push   %ebp
  102e6d:	89 e5                	mov    %esp,%ebp
  102e6f:	57                   	push   %edi
  102e70:	56                   	push   %esi
  102e71:	53                   	push   %ebx
  102e72:	51                   	push   %ecx
	const struct gpio_sch_config *info = dev->config->config_info;
  102e73:	8b 45 08             	mov    0x8(%ebp),%eax
	if (access_op == GPIO_ACCESS_BY_PIN) {
  102e76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
	const struct gpio_sch_config *info = dev->config->config_info;
  102e7a:	8b 00                	mov    (%eax),%eax
  102e7c:	8b 70 08             	mov    0x8(%eax),%esi
	struct gpio_sch_data *gpio = dev->driver_data;
  102e7f:	8b 45 08             	mov    0x8(%ebp),%eax
  102e82:	8b 58 08             	mov    0x8(%eax),%ebx
  102e85:	0f b6 46 04          	movzbl 0x4(%esi),%eax
  102e89:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (access_op == GPIO_ACCESS_BY_PIN) {
  102e8c:	75 51                	jne    102edf <gpio_sch_enable_callback+0x73>
		u32_t bits = BIT(pin);
  102e8e:	b8 01 00 00 00       	mov    $0x1,%eax
  102e93:	8a 4d 10             	mov    0x10(%ebp),%cl
  102e96:	d3 e0                	shl    %cl,%eax
		if (pin >= info->bits) {
  102e98:	8b 55 f0             	mov    -0x10(%ebp),%edx
		u32_t bits = BIT(pin);
  102e9b:	89 c7                	mov    %eax,%edi
		if (pin >= info->bits) {
  102e9d:	39 55 10             	cmp    %edx,0x10(%ebp)
			return -ENOTSUP;
  102ea0:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
		if (pin >= info->bits) {
  102ea5:	73 69                	jae    102f10 <gpio_sch_enable_callback+0xa4>
		_set_bit_gtpe(info->regs, pin, !!(bits & gpio->int_regs.gtpe));
  102ea7:	31 c9                	xor    %ecx,%ecx
DEFINE_MM_REG_SET_BIT(gtpe, GPIO_SCH_REG_GTPE)
  102ea9:	8b 06                	mov    (%esi),%eax
		_set_bit_gtpe(info->regs, pin, !!(bits & gpio->int_regs.gtpe));
  102eab:	85 bb 74 04 00 00    	test   %edi,0x474(%ebx)
DEFINE_MM_REG_SET_BIT(gtpe, GPIO_SCH_REG_GTPE)
  102eb1:	8b 55 10             	mov    0x10(%ebp),%edx
		_set_bit_gtpe(info->regs, pin, !!(bits & gpio->int_regs.gtpe));
  102eb4:	0f 95 c1             	setne  %cl
DEFINE_MM_REG_SET_BIT(gtpe, GPIO_SCH_REG_GTPE)
  102eb7:	83 c0 0c             	add    $0xc,%eax
  102eba:	e8 ed fe ff ff       	call   102dac <_set_bit>
		_set_bit_gtne(info->regs, pin, !!(bits & gpio->int_regs.gtne));
  102ebf:	31 c9                	xor    %ecx,%ecx
DEFINE_MM_REG_SET_BIT(gtne, GPIO_SCH_REG_GTNE)
  102ec1:	8b 06                	mov    (%esi),%eax
		_set_bit_gtne(info->regs, pin, !!(bits & gpio->int_regs.gtne));
  102ec3:	85 bb 78 04 00 00    	test   %edi,0x478(%ebx)
DEFINE_MM_REG_SET_BIT(gtne, GPIO_SCH_REG_GTNE)
  102ec9:	8b 55 10             	mov    0x10(%ebp),%edx
		_set_bit_gtne(info->regs, pin, !!(bits & gpio->int_regs.gtne));
  102ecc:	0f 95 c1             	setne  %cl
DEFINE_MM_REG_SET_BIT(gtne, GPIO_SCH_REG_GTNE)
  102ecf:	83 c0 10             	add    $0x10,%eax
  102ed2:	e8 d5 fe ff ff       	call   102dac <_set_bit>
		gpio->cb_enabled |= bits;
  102ed7:	09 bb 7c 04 00 00    	or     %edi,0x47c(%ebx)
  102edd:	eb 27                	jmp    102f06 <gpio_sch_enable_callback+0x9a>
		_write_gtpe(gpio->int_regs.gtpe, info->regs);
  102edf:	8b 0e                	mov    (%esi),%ecx
  102ee1:	8b 83 74 04 00 00    	mov    0x474(%ebx),%eax
DEFINE_MM_REG_WRITE(gtpe, GPIO_SCH_REG_GTPE)
  102ee7:	8d 51 0c             	lea    0xc(%ecx),%edx
  102eea:	ef                   	out    %eax,(%dx)
  102eeb:	8b 83 78 04 00 00    	mov    0x478(%ebx),%eax
DEFINE_MM_REG_WRITE(gtne, GPIO_SCH_REG_GTNE)
  102ef1:	8d 51 10             	lea    0x10(%ecx),%edx
  102ef4:	ef                   	out    %eax,(%dx)
		gpio->cb_enabled = BIT_MASK(info->bits);
  102ef5:	b8 01 00 00 00       	mov    $0x1,%eax
  102efa:	8a 4d f0             	mov    -0x10(%ebp),%cl
  102efd:	d3 e0                	shl    %cl,%eax
  102eff:	48                   	dec    %eax
  102f00:	89 83 7c 04 00 00    	mov    %eax,0x47c(%ebx)
	_gpio_sch_manage_callback(dev);
  102f06:	8b 45 08             	mov    0x8(%ebp),%eax
  102f09:	e8 05 ff ff ff       	call   102e13 <_gpio_sch_manage_callback>
	return 0;
  102f0e:	31 c0                	xor    %eax,%eax
}
  102f10:	5a                   	pop    %edx
  102f11:	5b                   	pop    %ebx
  102f12:	5e                   	pop    %esi
  102f13:	5f                   	pop    %edi
  102f14:	5d                   	pop    %ebp
  102f15:	c3                   	ret    

00102f16 <gpio_sch_manage_callback>:
{
  102f16:	55                   	push   %ebp
  102f17:	89 e5                	mov    %esp,%ebp
  102f19:	56                   	push   %esi
  102f1a:	53                   	push   %ebx
	sys_snode_t *prev = NULL;
  102f1b:	31 f6                	xor    %esi,%esi
  102f1d:	8b 45 08             	mov    0x8(%ebp),%eax
  102f20:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	if (set) {
  102f23:	80 7d 10 00          	cmpb   $0x0,0x10(%ebp)
	struct gpio_sch_data *gpio = dev->driver_data;
  102f27:	8b 50 08             	mov    0x8(%eax),%edx
	node->next = list->head;
  102f2a:	8b 9a 38 04 00 00    	mov    0x438(%edx),%ebx
  102f30:	74 21                	je     102f53 <gpio_sch_manage_callback+0x3d>
  102f32:	89 19                	mov    %ebx,(%ecx)
	list->head = node;
  102f34:	89 8a 38 04 00 00    	mov    %ecx,0x438(%edx)
	if (!list->tail) {
  102f3a:	83 ba 3c 04 00 00 00 	cmpl   $0x0,0x43c(%edx)
  102f41:	75 48                	jne    102f8b <gpio_sch_manage_callback+0x75>
		list->tail = list->head;
  102f43:	89 8a 3c 04 00 00    	mov    %ecx,0x43c(%edx)
  102f49:	eb 40                	jmp    102f8b <gpio_sch_manage_callback+0x75>
		if (test == node) {
  102f4b:	39 d9                	cmp    %ebx,%ecx
  102f4d:	74 0a                	je     102f59 <gpio_sch_manage_callback+0x43>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
  102f4f:	89 de                	mov    %ebx,%esi
  102f51:	8b 1b                	mov    (%ebx),%ebx
  102f53:	85 db                	test   %ebx,%ebx
  102f55:	75 f4                	jne    102f4b <gpio_sch_manage_callback+0x35>
  102f57:	eb 32                	jmp    102f8b <gpio_sch_manage_callback+0x75>
	if (!prev_node) {
  102f59:	85 f6                	test   %esi,%esi
  102f5b:	8b 19                	mov    (%ecx),%ebx
  102f5d:	75 16                	jne    102f75 <gpio_sch_manage_callback+0x5f>
		list->head = node->next;
  102f5f:	89 9a 38 04 00 00    	mov    %ebx,0x438(%edx)
		if (list->tail == node) {
  102f65:	3b 8a 3c 04 00 00    	cmp    0x43c(%edx),%ecx
  102f6b:	75 18                	jne    102f85 <gpio_sch_manage_callback+0x6f>
			list->tail = list->head;
  102f6d:	89 9a 3c 04 00 00    	mov    %ebx,0x43c(%edx)
  102f73:	eb 10                	jmp    102f85 <gpio_sch_manage_callback+0x6f>
		prev_node->next = node->next;
  102f75:	89 1e                	mov    %ebx,(%esi)
		if (list->tail == node) {
  102f77:	3b 8a 3c 04 00 00    	cmp    0x43c(%edx),%ecx
  102f7d:	75 06                	jne    102f85 <gpio_sch_manage_callback+0x6f>
			list->tail = prev_node;
  102f7f:	89 b2 3c 04 00 00    	mov    %esi,0x43c(%edx)
	node->next = NULL;
  102f85:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	_gpio_sch_manage_callback(dev);
  102f8b:	e8 83 fe ff ff       	call   102e13 <_gpio_sch_manage_callback>
}
  102f90:	5b                   	pop    %ebx
  102f91:	31 c0                	xor    %eax,%eax
  102f93:	5e                   	pop    %esi
  102f94:	5d                   	pop    %ebp
  102f95:	c3                   	ret    

00102f96 <_gpio_sch_poll_status>:
{
  102f96:	55                   	push   %ebp
  102f97:	89 e5                	mov    %esp,%ebp
  102f99:	57                   	push   %edi
  102f9a:	56                   	push   %esi
  102f9b:	53                   	push   %ebx
  102f9c:	83 ec 08             	sub    $0x8,%esp
	const struct gpio_sch_config *info = dev->config->config_info;
  102f9f:	8b 45 08             	mov    0x8(%ebp),%eax
  102fa2:	8b 00                	mov    (%eax),%eax
  102fa4:	8b 70 08             	mov    0x8(%eax),%esi
	struct gpio_sch_data *gpio = dev->driver_data;
  102fa7:	8b 45 08             	mov    0x8(%ebp),%eax
  102faa:	8b 58 08             	mov    0x8(%eax),%ebx
DEFINE_MM_REG_READ(gts, GPIO_SCH_REG_GTS)
  102fad:	8b 06                	mov    (%esi),%eax
  102faf:	8d 50 1c             	lea    0x1c(%eax),%edx
	__asm__ volatile("inl	%w1, %0;\n\t"
  102fb2:	ed                   	in     (%dx),%eax
	__asm__ volatile("outl	%0, %w1;\n\t"
  102fb3:	ef                   	out    %eax,(%dx)
		k_timer_start(&gpio->poll_timer, GPIO_SCH_POLLING_MSEC, 0);
  102fb4:	8d bb 40 04 00 00    	lea    0x440(%ebx),%edi
	while (gpio->poll) {
  102fba:	80 bb 80 04 00 00 00 	cmpb   $0x0,0x480(%ebx)
  102fc1:	74 55                	je     103018 <_gpio_sch_poll_status+0x82>
DEFINE_MM_REG_READ(gts, GPIO_SCH_REG_GTS)
  102fc3:	8b 06                	mov    (%esi),%eax
  102fc5:	8d 50 1c             	lea    0x1c(%eax),%edx
	__asm__ volatile("inl	%w1, %0;\n\t"
  102fc8:	ed                   	in     (%dx),%eax
		if (!status) {
  102fc9:	85 c0                	test   %eax,%eax
  102fcb:	74 32                	je     102fff <_gpio_sch_poll_status+0x69>
  102fcd:	8b 93 38 04 00 00    	mov    0x438(%ebx),%edx
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
  102fd3:	85 d2                	test   %edx,%edx
  102fd5:	75 08                	jne    102fdf <_gpio_sch_poll_status+0x49>
DEFINE_MM_REG_WRITE(gts, GPIO_SCH_REG_GTS)
  102fd7:	8b 0e                	mov    (%esi),%ecx
  102fd9:	8d 51 1c             	lea    0x1c(%ecx),%edx
	__asm__ volatile("outl	%0, %w1;\n\t"
  102fdc:	ef                   	out    %eax,(%dx)
  102fdd:	eb 20                	jmp    102fff <_gpio_sch_poll_status+0x69>
		if (cb->pin_mask & pins) {
  102fdf:	85 42 08             	test   %eax,0x8(%edx)
  102fe2:	74 17                	je     102ffb <_gpio_sch_poll_status+0x65>
			cb->handler(port, cb, pins);
  102fe4:	50                   	push   %eax
  102fe5:	52                   	push   %edx
  102fe6:	ff 75 08             	pushl  0x8(%ebp)
  102fe9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102fec:	89 55 f0             	mov    %edx,-0x10(%ebp)
  102fef:	ff 52 04             	call   *0x4(%edx)
  102ff2:	83 c4 0c             	add    $0xc,%esp
  102ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102ff8:	8b 55 f0             	mov    -0x10(%ebp),%edx
	return node->next;
  102ffb:	8b 12                	mov    (%edx),%edx
  102ffd:	eb d4                	jmp    102fd3 <_gpio_sch_poll_status+0x3d>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_CUSTOM_DATA_SET, k_thread_custom_data_set, void *, value);

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
  102fff:	6a 00                	push   $0x0
  103001:	68 c8 00 00 00       	push   $0xc8
  103006:	57                   	push   %edi
  103007:	e8 33 30 00 00       	call   10603f <_impl_k_timer_start>
  10300c:	83 c4 0c             	add    $0xc,%esp

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_STATUS_GET, k_timer_status_get, u32_t, struct k_timer *, timer);

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_STATUS_SYNC, k_timer_status_sync, u32_t, struct k_timer *, timer);
  10300f:	57                   	push   %edi
  103010:	e8 8b 30 00 00       	call   1060a0 <_impl_k_timer_status_sync>
  103015:	58                   	pop    %eax
  103016:	eb a2                	jmp    102fba <_gpio_sch_poll_status+0x24>
}
  103018:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10301b:	5b                   	pop    %ebx
  10301c:	5e                   	pop    %esi
  10301d:	5f                   	pop    %edi
  10301e:	5d                   	pop    %ebp
  10301f:	c3                   	ret    

00103020 <_gpio_pin_config>:
{
  103020:	55                   	push   %ebp
  103021:	89 e5                	mov    %esp,%ebp
  103023:	57                   	push   %edi
  103024:	56                   	push   %esi
  103025:	53                   	push   %ebx
  103026:	53                   	push   %ebx
  103027:	89 55 f0             	mov    %edx,-0x10(%ebp)
	const struct gpio_sch_config *info = dev->config->config_info;
  10302a:	8b 10                	mov    (%eax),%edx
{
  10302c:	89 cb                	mov    %ecx,%ebx
	struct gpio_sch_data *gpio = dev->driver_data;
  10302e:	8b 70 08             	mov    0x8(%eax),%esi
DEFINE_MM_REG_SET_BIT(gen, GPIO_SCH_REG_GEN)
  103031:	b9 01 00 00 00       	mov    $0x1,%ecx
	const struct gpio_sch_config *info = dev->config->config_info;
  103036:	8b 7a 08             	mov    0x8(%edx),%edi
DEFINE_MM_REG_SET_BIT(gen, GPIO_SCH_REG_GEN)
  103039:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10303c:	8b 07                	mov    (%edi),%eax
  10303e:	e8 69 fd ff ff       	call   102dac <_set_bit>
DEFINE_MM_REG_SET_BIT(gio, GPIO_SCH_REG_GIO)
  103043:	89 d9                	mov    %ebx,%ecx
  103045:	8b 07                	mov    (%edi),%eax
  103047:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10304a:	f7 d1                	not    %ecx
  10304c:	83 e1 01             	and    $0x1,%ecx
  10304f:	83 c0 04             	add    $0x4,%eax
  103052:	e8 55 fd ff ff       	call   102dac <_set_bit>
	if (flags & GPIO_INT) {
  103057:	f6 c3 02             	test   $0x2,%bl
  10305a:	74 0e                	je     10306a <_gpio_pin_config+0x4a>
		if (flags & GPIO_INT_ACTIVE_HIGH) {
  10305c:	83 e3 04             	and    $0x4,%ebx
	u8_t active_low = 0;
  10305f:	83 fb 01             	cmp    $0x1,%ebx
  103062:	0f 92 c2             	setb   %dl
  103065:	19 c0                	sbb    %eax,%eax
  103067:	40                   	inc    %eax
  103068:	eb 04                	jmp    10306e <_gpio_pin_config+0x4e>
  10306a:	31 d2                	xor    %edx,%edx
	u8_t active_high = 0;
  10306c:	31 c0                	xor    %eax,%eax
	_set_data_reg(&gpio->int_regs.gtpe, pin, active_high);
  10306e:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
  103072:	0f b6 c0             	movzbl %al,%eax
	*reg &= ~(BIT(pin));
  103075:	8b be 74 04 00 00    	mov    0x474(%esi),%edi
  10307b:	bb 01 00 00 00       	mov    $0x1,%ebx
	*reg |= (set << pin) & BIT(pin);
  103080:	d3 e0                	shl    %cl,%eax
	*reg &= ~(BIT(pin));
  103082:	d3 e3                	shl    %cl,%ebx
	*reg |= (set << pin) & BIT(pin);
  103084:	31 f8                	xor    %edi,%eax
  103086:	21 d8                	and    %ebx,%eax
	_set_data_reg(&gpio->int_regs.gtne, pin, active_low);
  103088:	0f b6 d2             	movzbl %dl,%edx
	*reg |= (set << pin) & BIT(pin);
  10308b:	31 c7                	xor    %eax,%edi
	*reg &= ~(BIT(pin));
  10308d:	8b 86 78 04 00 00    	mov    0x478(%esi),%eax
	*reg |= (set << pin) & BIT(pin);
  103093:	d3 e2                	shl    %cl,%edx
  103095:	31 c2                	xor    %eax,%edx
  103097:	89 be 74 04 00 00    	mov    %edi,0x474(%esi)
  10309d:	21 da                	and    %ebx,%edx
  10309f:	31 c2                	xor    %eax,%edx
  1030a1:	89 96 78 04 00 00    	mov    %edx,0x478(%esi)
}
  1030a7:	58                   	pop    %eax
  1030a8:	5b                   	pop    %ebx
  1030a9:	5e                   	pop    %esi
  1030aa:	5f                   	pop    %edi
  1030ab:	5d                   	pop    %ebp
  1030ac:	c3                   	ret    

001030ad <gpio_sch_config>:
{
  1030ad:	55                   	push   %ebp
  1030ae:	89 e5                	mov    %esp,%ebp
  1030b0:	57                   	push   %edi
  1030b1:	56                   	push   %esi
  1030b2:	53                   	push   %ebx
  1030b3:	8b 75 08             	mov    0x8(%ebp),%esi
  1030b6:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  1030b9:	8b 55 10             	mov    0x10(%ebp),%edx
	if (access_op == GPIO_ACCESS_BY_PIN) {
  1030bc:	85 db                	test   %ebx,%ebx
	const struct gpio_sch_config *info = dev->config->config_info;
  1030be:	8b 06                	mov    (%esi),%eax
  1030c0:	8b 78 08             	mov    0x8(%eax),%edi
	if (access_op == GPIO_ACCESS_BY_PIN) {
  1030c3:	74 04                	je     1030c9 <gpio_sch_config+0x1c>
  1030c5:	31 db                	xor    %ebx,%ebx
  1030c7:	eb 14                	jmp    1030dd <gpio_sch_config+0x30>
		if (pin >= info->bits) {
  1030c9:	0f b6 47 04          	movzbl 0x4(%edi),%eax
  1030cd:	39 d0                	cmp    %edx,%eax
  1030cf:	76 27                	jbe    1030f8 <gpio_sch_config+0x4b>
		_gpio_pin_config(dev, pin, flags);
  1030d1:	8b 4d 14             	mov    0x14(%ebp),%ecx
  1030d4:	89 f0                	mov    %esi,%eax
  1030d6:	e8 45 ff ff ff       	call   103020 <_gpio_pin_config>
  1030db:	eb 20                	jmp    1030fd <gpio_sch_config+0x50>
	for (pin = 0; pin < info->bits; pin++) {
  1030dd:	0f b6 47 04          	movzbl 0x4(%edi),%eax
  1030e1:	39 c3                	cmp    %eax,%ebx
  1030e3:	7d 0f                	jge    1030f4 <gpio_sch_config+0x47>
		_gpio_pin_config(dev, pin, flags);
  1030e5:	89 da                	mov    %ebx,%edx
  1030e7:	8b 4d 14             	mov    0x14(%ebp),%ecx
  1030ea:	89 f0                	mov    %esi,%eax
	for (pin = 0; pin < info->bits; pin++) {
  1030ec:	43                   	inc    %ebx
		_gpio_pin_config(dev, pin, flags);
  1030ed:	e8 2e ff ff ff       	call   103020 <_gpio_pin_config>
  1030f2:	eb e9                	jmp    1030dd <gpio_sch_config+0x30>
	return 0;
  1030f4:	31 db                	xor    %ebx,%ebx
  1030f6:	eb 05                	jmp    1030fd <gpio_sch_config+0x50>
			return -EINVAL;
  1030f8:	bb ea ff ff ff       	mov    $0xffffffea,%ebx
}
  1030fd:	89 d8                	mov    %ebx,%eax
  1030ff:	5b                   	pop    %ebx
  103100:	5e                   	pop    %esi
  103101:	5f                   	pop    %edi
  103102:	5d                   	pop    %ebp
  103103:	c3                   	ret    

00103104 <gpio_sch_disable_callback>:
{
  103104:	55                   	push   %ebp
  103105:	89 e5                	mov    %esp,%ebp
  103107:	57                   	push   %edi
  103108:	56                   	push   %esi
  103109:	53                   	push   %ebx
  10310a:	8b 75 08             	mov    0x8(%ebp),%esi
	if (access_op == GPIO_ACCESS_BY_PIN) {
  10310d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
	const struct gpio_sch_config *info = dev->config->config_info;
  103111:	8b 06                	mov    (%esi),%eax
	struct gpio_sch_data *gpio = dev->driver_data;
  103113:	8b 7e 08             	mov    0x8(%esi),%edi
	const struct gpio_sch_config *info = dev->config->config_info;
  103116:	8b 58 08             	mov    0x8(%eax),%ebx
	if (access_op == GPIO_ACCESS_BY_PIN) {
  103119:	75 3e                	jne    103159 <gpio_sch_disable_callback+0x55>
		if (pin >= info->bits) {
  10311b:	0f b6 53 04          	movzbl 0x4(%ebx),%edx
			return -ENOTSUP;
  10311f:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
		if (pin >= info->bits) {
  103124:	3b 55 10             	cmp    0x10(%ebp),%edx
  103127:	76 4f                	jbe    103178 <gpio_sch_disable_callback+0x74>
DEFINE_MM_REG_SET_BIT(gtpe, GPIO_SCH_REG_GTPE)
  103129:	8b 03                	mov    (%ebx),%eax
  10312b:	31 c9                	xor    %ecx,%ecx
  10312d:	83 c0 0c             	add    $0xc,%eax
  103130:	8b 55 10             	mov    0x10(%ebp),%edx
  103133:	e8 74 fc ff ff       	call   102dac <_set_bit>
DEFINE_MM_REG_SET_BIT(gtne, GPIO_SCH_REG_GTNE)
  103138:	8b 03                	mov    (%ebx),%eax
  10313a:	83 c0 10             	add    $0x10,%eax
  10313d:	31 c9                	xor    %ecx,%ecx
  10313f:	8b 55 10             	mov    0x10(%ebp),%edx
  103142:	e8 65 fc ff ff       	call   102dac <_set_bit>
		gpio->cb_enabled &= ~BIT(pin);
  103147:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  10314c:	8a 4d 10             	mov    0x10(%ebp),%cl
  10314f:	d3 c0                	rol    %cl,%eax
  103151:	21 87 7c 04 00 00    	and    %eax,0x47c(%edi)
  103157:	eb 16                	jmp    10316f <gpio_sch_disable_callback+0x6b>
		_write_gtpe(0, info->regs);
  103159:	8b 0b                	mov    (%ebx),%ecx
  10315b:	31 c0                	xor    %eax,%eax
DEFINE_MM_REG_WRITE(gtpe, GPIO_SCH_REG_GTPE)
  10315d:	8d 51 0c             	lea    0xc(%ecx),%edx
  103160:	ef                   	out    %eax,(%dx)
DEFINE_MM_REG_WRITE(gtne, GPIO_SCH_REG_GTNE)
  103161:	8d 51 10             	lea    0x10(%ecx),%edx
  103164:	ef                   	out    %eax,(%dx)
		gpio->cb_enabled = 0;
  103165:	c7 87 7c 04 00 00 00 	movl   $0x0,0x47c(%edi)
  10316c:	00 00 00 
	_gpio_sch_manage_callback(dev);
  10316f:	89 f0                	mov    %esi,%eax
  103171:	e8 9d fc ff ff       	call   102e13 <_gpio_sch_manage_callback>
	return 0;
  103176:	31 c0                	xor    %eax,%eax
}
  103178:	5b                   	pop    %ebx
  103179:	5e                   	pop    %esi
  10317a:	5f                   	pop    %edi
  10317b:	5d                   	pop    %ebp
  10317c:	c3                   	ret    

0010317d <i2c_dw_runtime_configure>:

	return ret;
}

static int i2c_dw_runtime_configure(struct device *dev, u32_t config)
{
  10317d:	55                   	push   %ebp
  10317e:	89 e5                	mov    %esp,%ebp
  103180:	56                   	push   %esi
  103181:	53                   	push   %ebx
	struct i2c_dw_dev_config * const dw = dev->driver_data;
  103182:	8b 45 08             	mov    0x8(%ebp),%eax
{
  103185:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct i2c_dw_dev_config * const dw = dev->driver_data;
  103188:	8b 48 08             	mov    0x8(%eax),%ecx

	dw->app_config = config;

	/* Make sure we have a supported speed for the DesignWare model */
	/* and have setup the clock frequency and speed mode */
	switch (I2C_SPEED_GET(dw->app_config)) {
  10318b:	89 d8                	mov    %ebx,%eax
  10318d:	d1 e8                	shr    %eax
  10318f:	83 e0 07             	and    $0x7,%eax
	volatile struct i2c_dw_registers * const regs =
  103192:	8b 11                	mov    (%ecx),%edx
	dw->app_config = config;
  103194:	89 59 14             	mov    %ebx,0x14(%ecx)
	switch (I2C_SPEED_GET(dw->app_config)) {
  103197:	83 f8 03             	cmp    $0x3,%eax
  10319a:	77 0d                	ja     1031a9 <i2c_dw_runtime_configure+0x2c>
  10319c:	83 f8 02             	cmp    $0x2,%eax
  10319f:	73 45                	jae    1031e6 <i2c_dw_runtime_configure+0x69>
  1031a1:	48                   	dec    %eax
  1031a2:	74 0f                	je     1031b3 <i2c_dw_runtime_configure+0x36>
  1031a4:	e9 c7 00 00 00       	jmp    103270 <i2c_dw_runtime_configure+0xf3>
  1031a9:	83 f8 04             	cmp    $0x4,%eax
  1031ac:	74 73                	je     103221 <i2c_dw_runtime_configure+0xa4>
  1031ae:	e9 bd 00 00 00       	jmp    103270 <i2c_dw_runtime_configure+0xf3>
	case I2C_SPEED_STANDARD:
		/* Following the directions on DW spec page 59, IC_SS_SCL_LCNT
		 * must have register values larger than IC_FS_SPKLEN + 7
		 */
		if (I2C_STD_LCNT <= (regs->ic_fs_spklen + 7)) {
  1031b3:	8b b2 a0 00 00 00    	mov    0xa0(%edx),%esi
			value = regs->ic_fs_spklen + 8;
		} else {
			value = I2C_STD_LCNT;
  1031b9:	b8 7d 00 00 00       	mov    $0x7d,%eax
		if (I2C_STD_LCNT <= (regs->ic_fs_spklen + 7)) {
  1031be:	83 c6 07             	add    $0x7,%esi
  1031c1:	83 fe 7c             	cmp    $0x7c,%esi
  1031c4:	76 09                	jbe    1031cf <i2c_dw_runtime_configure+0x52>
			value = regs->ic_fs_spklen + 8;
  1031c6:	8b 82 a0 00 00 00    	mov    0xa0(%edx),%eax
  1031cc:	83 c0 08             	add    $0x8,%eax
		dw->lcnt = value;

		/* Following the directions on DW spec page 59, IC_SS_SCL_HCNT
		 * must have register values larger than IC_FS_SPKLEN + 5
		 */
		if (I2C_STD_HCNT <= (regs->ic_fs_spklen + 5)) {
  1031cf:	8b b2 a0 00 00 00    	mov    0xa0(%edx),%esi
		dw->lcnt = value;
  1031d5:	66 89 41 26          	mov    %ax,0x26(%ecx)
		if (I2C_STD_HCNT <= (regs->ic_fs_spklen + 5)) {
  1031d9:	83 c6 05             	add    $0x5,%esi
			value = regs->ic_fs_spklen + 6;
		} else {
			value = I2C_STD_HCNT;
  1031dc:	b8 64 00 00 00       	mov    $0x64,%eax
		if (I2C_STD_HCNT <= (regs->ic_fs_spklen + 5)) {
  1031e1:	83 fe 63             	cmp    $0x63,%esi
  1031e4:	eb 31                	jmp    103217 <i2c_dw_runtime_configure+0x9a>
	case I2C_SPEED_FAST_PLUS:
		/*
		 * Following the directions on DW spec page 59, IC_FS_SCL_LCNT
		 * must have register values larger than IC_FS_SPKLEN + 7
		 */
		if (I2C_FS_LCNT <= (regs->ic_fs_spklen + 7)) {
  1031e6:	8b b2 a0 00 00 00    	mov    0xa0(%edx),%esi
			value = regs->ic_fs_spklen + 8;
		} else {
			value = I2C_FS_LCNT;
  1031ec:	b8 15 00 00 00       	mov    $0x15,%eax
		if (I2C_FS_LCNT <= (regs->ic_fs_spklen + 7)) {
  1031f1:	83 c6 07             	add    $0x7,%esi
  1031f4:	83 fe 14             	cmp    $0x14,%esi
  1031f7:	76 09                	jbe    103202 <i2c_dw_runtime_configure+0x85>
			value = regs->ic_fs_spklen + 8;
  1031f9:	8b 82 a0 00 00 00    	mov    0xa0(%edx),%eax
  1031ff:	83 c0 08             	add    $0x8,%eax

		/*
		 * Following the directions on DW spec page 59, IC_FS_SCL_HCNT
		 * must have register values larger than IC_FS_SPKLEN + 5
		 */
		if (I2C_FS_HCNT <= (regs->ic_fs_spklen + 5)) {
  103202:	8b b2 a0 00 00 00    	mov    0xa0(%edx),%esi
		dw->lcnt = value;
  103208:	66 89 41 26          	mov    %ax,0x26(%ecx)
		if (I2C_FS_HCNT <= (regs->ic_fs_spklen + 5)) {
  10320c:	83 c6 05             	add    $0x5,%esi
			value = regs->ic_fs_spklen + 6;
		} else {
			value = I2C_FS_HCNT;
  10320f:	b8 12 00 00 00       	mov    $0x12,%eax
		if (I2C_FS_HCNT <= (regs->ic_fs_spklen + 5)) {
  103214:	83 fe 11             	cmp    $0x11,%esi
  103217:	76 4f                	jbe    103268 <i2c_dw_runtime_configure+0xeb>
			value = regs->ic_fs_spklen + 6;
  103219:	8b 82 a0 00 00 00    	mov    0xa0(%edx),%eax
  10321f:	eb 44                	jmp    103265 <i2c_dw_runtime_configure+0xe8>
				value = I2C_HS_HCNT;
			}

			dw->hcnt = value;
		} else {
			rc = -EINVAL;
  103221:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
		if (dw->support_hs_mode) {
  103226:	80 79 2b 00          	cmpb   $0x0,0x2b(%ecx)
  10322a:	74 49                	je     103275 <i2c_dw_runtime_configure+0xf8>
			if (I2C_HS_LCNT <= (regs->ic_hs_spklen + 7)) {
  10322c:	8b b2 a4 00 00 00    	mov    0xa4(%edx),%esi
				value = I2C_HS_LCNT;
  103232:	b8 15 00 00 00       	mov    $0x15,%eax
			if (I2C_HS_LCNT <= (regs->ic_hs_spklen + 7)) {
  103237:	83 c6 07             	add    $0x7,%esi
  10323a:	83 fe 14             	cmp    $0x14,%esi
  10323d:	76 09                	jbe    103248 <i2c_dw_runtime_configure+0xcb>
				value = regs->ic_hs_spklen + 8;
  10323f:	8b 82 a4 00 00 00    	mov    0xa4(%edx),%eax
  103245:	83 c0 08             	add    $0x8,%eax
			if (I2C_HS_HCNT <= (regs->ic_hs_spklen + 5)) {
  103248:	8b b2 a4 00 00 00    	mov    0xa4(%edx),%esi
			dw->lcnt = value;
  10324e:	66 89 41 26          	mov    %ax,0x26(%ecx)
			if (I2C_HS_HCNT <= (regs->ic_hs_spklen + 5)) {
  103252:	83 c6 05             	add    $0x5,%esi
				value = I2C_HS_HCNT;
  103255:	b8 12 00 00 00       	mov    $0x12,%eax
			if (I2C_HS_HCNT <= (regs->ic_hs_spklen + 5)) {
  10325a:	83 fe 11             	cmp    $0x11,%esi
  10325d:	76 09                	jbe    103268 <i2c_dw_runtime_configure+0xeb>
				value = regs->ic_hs_spklen + 6;
  10325f:	8b 82 a4 00 00 00    	mov    0xa4(%edx),%eax
  103265:	83 c0 06             	add    $0x6,%eax
			dw->hcnt = value;
  103268:	66 89 41 24          	mov    %ax,0x24(%ecx)
	u32_t	rc = 0;
  10326c:	31 c0                	xor    %eax,%eax
  10326e:	eb 05                	jmp    103275 <i2c_dw_runtime_configure+0xf8>
		}
		break;
	default:
		/* TODO change */
		rc = -EINVAL;
  103270:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	/*
	 * TEMPORARY HACK - The I2C does not work in any mode other than Master
	 * currently.  This "hack" forces us to always be configured for master
	 * mode, until we can verify that Slave mode works correctly.
	 */
	dw->app_config |= I2C_MODE_MASTER;
  103275:	83 cb 10             	or     $0x10,%ebx
	value = regs->ic_clr_intr;
  103278:	66 8b 52 40          	mov    0x40(%edx),%dx
	dw->app_config |= I2C_MODE_MASTER;
  10327c:	89 59 14             	mov    %ebx,0x14(%ecx)

	return rc;
}
  10327f:	5b                   	pop    %ebx
  103280:	5e                   	pop    %esi
  103281:	5d                   	pop    %ebp
  103282:	c3                   	ret    

00103283 <i2c_dw_isr>:
{
  103283:	55                   	push   %ebp
  103284:	89 e5                	mov    %esp,%ebp
  103286:	57                   	push   %edi
  103287:	56                   	push   %esi
  103288:	53                   	push   %ebx
  103289:	83 ec 10             	sub    $0x10,%esp
  10328c:	8b 45 08             	mov    0x8(%ebp),%eax
  10328f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct i2c_dw_dev_config * const dw = port->driver_data;
  103292:	8b 50 08             	mov    0x8(%eax),%edx
	volatile struct i2c_dw_registers * const regs =
  103295:	8b 3a                	mov    (%edx),%edi
	intr_stat.raw = regs->ic_intr_stat.raw;
  103297:	66 8b 47 2c          	mov    0x2c(%edi),%ax
	if (!intr_stat.raw) {
  10329b:	66 85 c0             	test   %ax,%ax
	intr_stat.raw = regs->ic_intr_stat.raw;
  10329e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
	if (!intr_stat.raw) {
  1032a2:	0f 84 d3 01 00 00    	je     10347b <i2c_dw_isr+0x1f8>
	if (regs->ic_con.bits.master_mode) {
  1032a8:	8b 07                	mov    (%edi),%eax
  1032aa:	a8 01                	test   $0x1,%al
  1032ac:	75 15                	jne    1032c3 <i2c_dw_isr+0x40>
	if (intr_stat.bits.stop_det) {
  1032ae:	66 f7 45 f2 00 02    	testw  $0x200,-0xe(%ebp)
  1032b4:	0f 84 c1 01 00 00    	je     10347b <i2c_dw_isr+0x1f8>
		value = regs->ic_clr_stop_det;
  1032ba:	66 8b 47 60          	mov    0x60(%edi),%ax
		goto done;
  1032be:	e9 93 01 00 00       	jmp    103456 <i2c_dw_isr+0x1d3>
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
  1032c3:	f6 45 f2 4b          	testb  $0x4b,-0xe(%ebp)
  1032c7:	74 09                	je     1032d2 <i2c_dw_isr+0x4f>
			dw->state = I2C_DW_CMD_ERROR;
  1032c9:	c6 42 28 04          	movb   $0x4,0x28(%edx)
			goto done;
  1032cd:	e9 84 01 00 00       	jmp    103456 <i2c_dw_isr+0x1d3>
		if (intr_stat.bits.rx_full) {
  1032d2:	f6 45 f2 04          	testb  $0x4,-0xe(%ebp)
  1032d6:	74 3a                	je     103312 <i2c_dw_isr+0x8f>
	while (regs->ic_status.bits.rfne && (dw->xfr_len > 0)) {
  1032d8:	8b 47 70             	mov    0x70(%edi),%eax
  1032db:	a8 08                	test   $0x8,%al
  1032dd:	75 11                	jne    1032f0 <i2c_dw_isr+0x6d>
	if (dw->xfr_len == 0) {
  1032df:	83 7a 1c 00          	cmpl   $0x0,0x1c(%edx)
  1032e3:	75 2d                	jne    103312 <i2c_dw_isr+0x8f>
		dw->state &= ~I2C_DW_CMD_RECV;
  1032e5:	8a 42 28             	mov    0x28(%edx),%al
  1032e8:	83 e0 fd             	and    $0xfffffffd,%eax
  1032eb:	88 42 28             	mov    %al,0x28(%edx)
  1032ee:	eb 22                	jmp    103312 <i2c_dw_isr+0x8f>
	while (regs->ic_status.bits.rfne && (dw->xfr_len > 0)) {
  1032f0:	83 7a 1c 00          	cmpl   $0x0,0x1c(%edx)
  1032f4:	74 e9                	je     1032df <i2c_dw_isr+0x5c>
		dw->xfr_buf[0] = regs->ic_data_cmd.raw;
  1032f6:	8b 42 18             	mov    0x18(%edx),%eax
  1032f9:	66 8b 4f 10          	mov    0x10(%edi),%cx
  1032fd:	88 08                	mov    %cl,(%eax)
		dw->xfr_len--;
  1032ff:	8b 42 1c             	mov    0x1c(%edx),%eax
		dw->xfr_buf++;
  103302:	ff 42 18             	incl   0x18(%edx)
		dw->xfr_len--;
  103305:	48                   	dec    %eax
		dw->rx_pending--;
  103306:	ff 4a 20             	decl   0x20(%edx)
		dw->xfr_len--;
  103309:	89 42 1c             	mov    %eax,0x1c(%edx)
		if (dw->xfr_len == 0) {
  10330c:	85 c0                	test   %eax,%eax
  10330e:	75 c8                	jne    1032d8 <i2c_dw_isr+0x55>
  103310:	eb cd                	jmp    1032df <i2c_dw_isr+0x5c>
		if (intr_stat.bits.tx_empty) {
  103312:	f6 45 f2 10          	testb  $0x10,-0xe(%ebp)
  103316:	74 96                	je     1032ae <i2c_dw_isr+0x2b>
  103318:	8b 45 e8             	mov    -0x18(%ebp),%eax
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
  10331b:	f6 42 2a 01          	testb  $0x1,0x2a(%edx)
  10331f:	8b 40 08             	mov    0x8(%eax),%eax
  103322:	0f 85 83 00 00 00    	jne    1033ab <i2c_dw_isr+0x128>
	volatile struct i2c_dw_registers * const regs =
  103328:	8b 18                	mov    (%eax),%ebx
	if (dw->xfr_len == 0) {
  10332a:	83 78 1c 00          	cmpl   $0x0,0x1c(%eax)
  10332e:	75 16                	jne    103346 <i2c_dw_isr+0xc3>
		regs->ic_intr_mask.bits.tx_empty = 0;
  103330:	66 8b 4b 30          	mov    0x30(%ebx),%cx
  103334:	83 e1 ef             	and    $0xffffffef,%ecx
  103337:	66 89 4b 30          	mov    %cx,0x30(%ebx)
		dw->state &= ~I2C_DW_CMD_SEND;
  10333b:	8a 48 28             	mov    0x28(%eax),%cl
  10333e:	83 e1 fe             	and    $0xfffffffe,%ecx
  103341:	88 48 28             	mov    %cl,0x28(%eax)
  103344:	eb 7a                	jmp    1033c0 <i2c_dw_isr+0x13d>
	while (regs->ic_status.bits.tfnf && (dw->xfr_len > 0)) {
  103346:	8b 4b 70             	mov    0x70(%ebx),%ecx
  103349:	80 e1 02             	and    $0x2,%cl
  10334c:	74 72                	je     1033c0 <i2c_dw_isr+0x13d>
  10334e:	8b 70 1c             	mov    0x1c(%eax),%esi
  103351:	89 75 ec             	mov    %esi,-0x14(%ebp)
  103354:	85 f6                	test   %esi,%esi
  103356:	74 68                	je     1033c0 <i2c_dw_isr+0x13d>
		data = dw->xfr_buf[0];
  103358:	8b 70 18             	mov    0x18(%eax),%esi
		if (dw->xfr_flags & I2C_MSG_RESTART) {
  10335b:	8a 48 2a             	mov    0x2a(%eax),%cl
		data = dw->xfr_buf[0];
  10335e:	89 75 e4             	mov    %esi,-0x1c(%ebp)
		if (dw->xfr_flags & I2C_MSG_RESTART) {
  103361:	f6 c1 04             	test   $0x4,%cl
		data = dw->xfr_buf[0];
  103364:	0f b6 36             	movzbl (%esi),%esi
		if (dw->xfr_flags & I2C_MSG_RESTART) {
  103367:	74 0c                	je     103375 <i2c_dw_isr+0xf2>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
  103369:	83 e1 fb             	and    $0xfffffffb,%ecx
			data |= IC_DATA_CMD_RESTART;
  10336c:	81 ce 00 04 00 00    	or     $0x400,%esi
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
  103372:	88 48 2a             	mov    %cl,0x2a(%eax)
		if ((dw->xfr_len == 1) && (dw->xfr_flags & I2C_MSG_STOP)) {
  103375:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
  103379:	75 0c                	jne    103387 <i2c_dw_isr+0x104>
  10337b:	f6 40 2a 02          	testb  $0x2,0x2a(%eax)
  10337f:	74 06                	je     103387 <i2c_dw_isr+0x104>
			data |= IC_DATA_CMD_STOP;
  103381:	81 ce 00 02 00 00    	or     $0x200,%esi
		dw->xfr_len--;
  103387:	8b 4d ec             	mov    -0x14(%ebp),%ecx
		regs->ic_data_cmd.raw = data;
  10338a:	66 89 73 10          	mov    %si,0x10(%ebx)
		dw->xfr_len--;
  10338e:	49                   	dec    %ecx
  10338f:	89 48 1c             	mov    %ecx,0x1c(%eax)
		dw->xfr_buf++;
  103392:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103395:	41                   	inc    %ecx
  103396:	89 48 18             	mov    %ecx,0x18(%eax)
		if (regs->ic_intr_stat.bits.tx_abrt) {
  103399:	8b 4b 2c             	mov    0x2c(%ebx),%ecx
  10339c:	80 e1 40             	and    $0x40,%cl
  10339f:	74 a5                	je     103346 <i2c_dw_isr+0xc3>
			return -EIO;
  1033a1:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  1033a6:	e9 97 00 00 00       	jmp    103442 <i2c_dw_isr+0x1bf>
	if (dw->request_bytes == 0) {
  1033ab:	0f b6 48 29          	movzbl 0x29(%eax),%ecx
	volatile struct i2c_dw_registers * const regs =
  1033af:	8b 30                	mov    (%eax),%esi
	if (dw->request_bytes == 0) {
  1033b1:	84 c9                	test   %cl,%cl
  1033b3:	75 0f                	jne    1033c4 <i2c_dw_isr+0x141>
		regs->ic_intr_mask.bits.tx_empty = 0;
  1033b5:	66 8b 46 30          	mov    0x30(%esi),%ax
  1033b9:	83 e0 ef             	and    $0xffffffef,%eax
  1033bc:	66 89 46 30          	mov    %ax,0x30(%esi)
	int ret = 0;
  1033c0:	31 c0                	xor    %eax,%eax
  1033c2:	eb 7e                	jmp    103442 <i2c_dw_isr+0x1bf>
	rx_empty = (I2C_DW_FIFO_DEPTH - regs->ic_rxflr) - dw->rx_pending;
  1033c4:	8b 5e 78             	mov    0x78(%esi),%ebx
  1033c7:	89 5d ec             	mov    %ebx,-0x14(%ebp)
  1033ca:	b3 10                	mov    $0x10,%bl
  1033cc:	2b 58 20             	sub    0x20(%eax),%ebx
	if (rx_empty < 0) {
  1033cf:	2a 5d ec             	sub    -0x14(%ebp),%bl
  1033d2:	88 5d ec             	mov    %bl,-0x14(%ebp)
  1033d5:	78 e9                	js     1033c0 <i2c_dw_isr+0x13d>
	tx_empty = I2C_DW_FIFO_DEPTH - regs->ic_txflr;
  1033d7:	8b 5e 74             	mov    0x74(%esi),%ebx
	cnt = min(I2C_DW_FIFO_DEPTH, dw->request_bytes);
  1033da:	80 f9 10             	cmp    $0x10,%cl
	tx_empty = I2C_DW_FIFO_DEPTH - regs->ic_txflr;
  1033dd:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
	cnt = min(I2C_DW_FIFO_DEPTH, dw->request_bytes);
  1033e0:	76 05                	jbe    1033e7 <i2c_dw_isr+0x164>
  1033e2:	b9 10 00 00 00       	mov    $0x10,%ecx
	tx_empty = I2C_DW_FIFO_DEPTH - regs->ic_txflr;
  1033e7:	b3 10                	mov    $0x10,%bl
  1033e9:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
	cnt = min(min(tx_empty, rx_empty), cnt);
  1033ec:	0f b6 db             	movzbl %bl,%ebx
  1033ef:	39 d9                	cmp    %ebx,%ecx
  1033f1:	7e 02                	jle    1033f5 <i2c_dw_isr+0x172>
  1033f3:	89 d9                	mov    %ebx,%ecx
  1033f5:	0f be 5d ec          	movsbl -0x14(%ebp),%ebx
  1033f9:	39 d9                	cmp    %ebx,%ecx
  1033fb:	7e 34                	jle    103431 <i2c_dw_isr+0x1ae>
  1033fd:	89 d9                	mov    %ebx,%ecx
  1033ff:	eb 30                	jmp    103431 <i2c_dw_isr+0x1ae>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
  103401:	8a 58 2a             	mov    0x2a(%eax),%bl
  103404:	88 5d ec             	mov    %bl,-0x14(%ebp)
		data = IC_DATA_CMD_CMD;
  103407:	bb 00 01 00 00       	mov    $0x100,%ebx
		if (dw->xfr_flags & I2C_MSG_RESTART) {
  10340c:	f6 45 ec 04          	testb  $0x4,-0x14(%ebp)
  103410:	74 0e                	je     103420 <i2c_dw_isr+0x19d>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
  103412:	8a 5d ec             	mov    -0x14(%ebp),%bl
  103415:	83 e3 fb             	and    $0xfffffffb,%ebx
  103418:	88 58 2a             	mov    %bl,0x2a(%eax)
			data |= IC_DATA_CMD_RESTART;
  10341b:	bb 00 05 00 00       	mov    $0x500,%ebx
		if ((dw->xfr_flags & I2C_MSG_STOP)
  103420:	f6 40 2a 02          	testb  $0x2,0x2a(%eax)
  103424:	75 11                	jne    103437 <i2c_dw_isr+0x1b4>
		regs->ic_data_cmd.raw = data;
  103426:	66 89 5e 10          	mov    %bx,0x10(%esi)
		cnt--;
  10342a:	49                   	dec    %ecx
		dw->rx_pending++;
  10342b:	ff 40 20             	incl   0x20(%eax)
		dw->request_bytes--;
  10342e:	fe 48 29             	decb   0x29(%eax)
	while (cnt > 0) {
  103431:	84 c9                	test   %cl,%cl
  103433:	75 cc                	jne    103401 <i2c_dw_isr+0x17e>
  103435:	eb 89                	jmp    1033c0 <i2c_dw_isr+0x13d>
		    && (dw->request_bytes == 1)) {
  103437:	80 78 29 01          	cmpb   $0x1,0x29(%eax)
  10343b:	75 e9                	jne    103426 <i2c_dw_isr+0x1a3>
			data |= IC_DATA_CMD_STOP;
  10343d:	80 cf 02             	or     $0x2,%bh
  103440:	eb e4                	jmp    103426 <i2c_dw_isr+0x1a3>
			if (((dw->xfr_len == 0)
  103442:	83 7a 1c 00          	cmpl   $0x0,0x1c(%edx)
  103446:	75 06                	jne    10344e <i2c_dw_isr+0x1cb>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
  103448:	f6 42 2a 02          	testb  $0x2,0x2a(%edx)
  10344c:	74 08                	je     103456 <i2c_dw_isr+0x1d3>
			    || (ret != 0)) {
  10344e:	85 c0                	test   %eax,%eax
  103450:	0f 84 58 fe ff ff    	je     1032ae <i2c_dw_isr+0x2b>
  103456:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103459:	8b 40 08             	mov    0x8(%eax),%eax
	k_sem_give(&dw->device_sync_sem);
  10345c:	83 c0 04             	add    $0x4,%eax
	volatile struct i2c_dw_registers * const regs =
  10345f:	8b 50 fc             	mov    -0x4(%eax),%edx
	regs->ic_intr_mask.raw = DW_DISABLE_ALL_I2C_INT;
  103462:	66 c7 42 30 00 00    	movw   $0x0,0x30(%edx)
	value = regs->ic_clr_intr;
  103468:	66 8b 52 40          	mov    0x40(%edx),%dx
	k_sem_give(&dw->device_sync_sem);
  10346c:	89 45 08             	mov    %eax,0x8(%ebp)
}
  10346f:	83 c4 10             	add    $0x10,%esp
  103472:	5b                   	pop    %ebx
  103473:	5e                   	pop    %esi
  103474:	5f                   	pop    %edi
  103475:	5d                   	pop    %ebp

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
  103476:	e9 62 24 00 00       	jmp    1058dd <_impl_k_sem_give>
  10347b:	83 c4 10             	add    $0x10,%esp
  10347e:	5b                   	pop    %ebx
  10347f:	5e                   	pop    %esi
  103480:	5f                   	pop    %edi
  103481:	5d                   	pop    %ebp
  103482:	c3                   	ret    

00103483 <i2c_dw_initialize>:
#else
#define i2c_dw_pci_setup(_unused_) (1)
#endif /* CONFIG_PCI */

static int i2c_dw_initialize(struct device *port)
{
  103483:	55                   	push   %ebp
  103484:	89 e5                	mov    %esp,%ebp
  103486:	57                   	push   %edi
  103487:	56                   	push   %esi
  103488:	53                   	push   %ebx
  103489:	53                   	push   %ebx
  10348a:	8b 75 08             	mov    0x8(%ebp),%esi
	const struct i2c_dw_rom_config * const rom = port->config->config_info;
  10348d:	8b 06                	mov    (%esi),%eax
	struct i2c_dw_dev_config * const dev = port->driver_data;
  10348f:	8b 5e 08             	mov    0x8(%esi),%ebx
	const struct i2c_dw_rom_config * const rom = port->config->config_info;
  103492:	8b 78 08             	mov    0x8(%eax),%edi
	pci_bus_scan_init();
  103495:	e8 16 03 00 00       	call   1037b0 <pci_bus_scan_init>
	if (!pci_bus_scan(&dw->pci_dev)) {
  10349a:	8d 53 2c             	lea    0x2c(%ebx),%edx
  10349d:	52                   	push   %edx
  10349e:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1034a1:	e8 78 03 00 00       	call   10381e <pci_bus_scan>
  1034a6:	5a                   	pop    %edx
  1034a7:	85 c0                	test   %eax,%eax
  1034a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1034ac:	74 30                	je     1034de <i2c_dw_initialize+0x5b>
	dw->base_address = dw->pci_dev.addr;
  1034ae:	8b 43 2c             	mov    0x2c(%ebx),%eax
  1034b1:	89 03                	mov    %eax,(%ebx)
	pci_enable_regs(&dw->pci_dev);
  1034b3:	52                   	push   %edx
  1034b4:	e8 34 09 00 00       	call   103ded <pci_enable_regs>
	if (!i2c_dw_pci_setup(port)) {
		port->driver_api = NULL;
		return -EIO;
	}

	k_sem_init(&dev->device_sync_sem, 0, UINT_MAX);
  1034b9:	8d 43 04             	lea    0x4(%ebx),%eax
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
  1034bc:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
  1034c3:	6a 00                	push   $0x0
  1034c5:	50                   	push   %eax
  1034c6:	e8 f9 23 00 00       	call   1058c4 <_impl_k_sem_init>

	regs = (struct i2c_dw_registers *) dev->base_address;
  1034cb:	8b 03                	mov    (%ebx),%eax
  1034cd:	83 c4 0c             	add    $0xc,%esp

	/* verify that we have a valid DesignWare register first */
	if (regs->ic_comp_type != I2C_DW_MAGIC_KEY) {
  1034d0:	8b 90 fc 00 00 00    	mov    0xfc(%eax),%edx
  1034d6:	81 fa 40 01 57 44    	cmp    $0x44570140,%edx
  1034dc:	74 09                	je     1034e7 <i2c_dw_initialize+0x64>
		port->driver_api = NULL;
  1034de:	c7 46 04 00 00 00 00 	movl   $0x0,0x4(%esi)
  1034e5:	eb 25                	jmp    10350c <i2c_dw_initialize+0x89>
	/*
	 * grab the default value on initialization.  This should be set to the
	 * IC_MAX_SPEED_MODE in the hardware.  If it does support high speed we
	 * can move provide support for it
	 */
	if (regs->ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
  1034e7:	8b 00                	mov    (%eax),%eax
  1034e9:	83 f0 06             	xor    $0x6,%eax
		SYS_LOG_DBG("I2C: high speed supported");
		dev->support_hs_mode = true;
  1034ec:	a8 06                	test   $0x6,%al
  1034ee:	0f 94 43 2b          	sete   0x2b(%ebx)
	} else {
		SYS_LOG_DBG("I2C: high speed NOT supported");
		dev->support_hs_mode = false;
	}

	rom->config_func(port);
  1034f2:	56                   	push   %esi
  1034f3:	ff 57 08             	call   *0x8(%edi)
  1034f6:	58                   	pop    %eax

	if (i2c_dw_runtime_configure(port, dev->app_config) != 0) {
  1034f7:	ff 73 14             	pushl  0x14(%ebx)
  1034fa:	56                   	push   %esi
  1034fb:	e8 7d fc ff ff       	call   10317d <i2c_dw_runtime_configure>
  103500:	5a                   	pop    %edx
  103501:	85 c0                	test   %eax,%eax
  103503:	59                   	pop    %ecx
  103504:	75 06                	jne    10350c <i2c_dw_initialize+0x89>
		SYS_LOG_DBG("I2C: Cannot set default configuration 0x%x",
		    dev->app_config);
		return -EIO;
	}

	dev->state = I2C_DW_STATE_READY;
  103506:	c6 43 28 00          	movb   $0x0,0x28(%ebx)

	return 0;
  10350a:	eb 05                	jmp    103511 <i2c_dw_initialize+0x8e>
		return -EIO;
  10350c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  103511:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103514:	5b                   	pop    %ebx
  103515:	5e                   	pop    %esi
  103516:	5f                   	pop    %edi
  103517:	5d                   	pop    %ebp
  103518:	c3                   	ret    

00103519 <i2c_config_0>:
		    &i2c_0_runtime, &i2c_config_dw_0,
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &funcs);

static void i2c_config_0(struct device *port)
{
  103519:	55                   	push   %ebp
  10351a:	89 e5                	mov    %esp,%ebp
  10351c:	56                   	push   %esi
  10351d:	53                   	push   %ebx
  10351e:	8b 75 08             	mov    0x8(%ebp),%esi
#if defined(CONFIG_I2C_DW_0_IRQ_DIRECT)
	IRQ_CONNECT(I2C_DW_0_IRQ, CONFIG_I2C_0_IRQ_PRI,
		    i2c_dw_isr, DEVICE_GET(i2c_0), I2C_DW_IRQ_FLAGS);
	irq_enable(I2C_DW_0_IRQ);
#elif defined(CONFIG_I2C_DW_0_IRQ_SHARED)
	const struct i2c_dw_rom_config * const config =
  103521:	8b 06                	mov    (%esi),%eax
		port->config->config_info;
	struct device *shared_irq_dev;

	shared_irq_dev = device_get_binding(config->shared_irq_dev_name);
  103523:	8b 40 08             	mov    0x8(%eax),%eax
  103526:	ff 70 0c             	pushl  0xc(%eax)
  103529:	e8 34 1b 00 00       	call   105062 <device_get_binding>
  10352e:	89 c3                	mov    %eax,%ebx
	return api->isr_register(dev, isr_func, isr_dev);
  103530:	8b 40 04             	mov    0x4(%eax),%eax
  103533:	89 34 24             	mov    %esi,(%esp)
  103536:	68 83 32 10 00       	push   $0x103283
  10353b:	53                   	push   %ebx
  10353c:	ff 10                	call   *(%eax)
  10353e:	83 c4 0c             	add    $0xc,%esp
	return api->enable(dev, isr_dev);
  103541:	8b 43 04             	mov    0x4(%ebx),%eax
  103544:	56                   	push   %esi
  103545:	53                   	push   %ebx
  103546:	ff 50 04             	call   *0x4(%eax)
  103549:	58                   	pop    %eax
  10354a:	5a                   	pop    %edx
	shared_irq_isr_register(shared_irq_dev, (isr_t)i2c_dw_isr, port);
	shared_irq_enable(shared_irq_dev, port);
#endif
}
  10354b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10354e:	5b                   	pop    %ebx
  10354f:	5e                   	pop    %esi
  103550:	5d                   	pop    %ebp
  103551:	c3                   	ret    

00103552 <i2c_dw_transfer>:
{
  103552:	55                   	push   %ebp
  103553:	89 e5                	mov    %esp,%ebp
  103555:	57                   	push   %edi
  103556:	56                   	push   %esi
  103557:	53                   	push   %ebx
  103558:	50                   	push   %eax
		return 0;
  103559:	31 ff                	xor    %edi,%edi
{
  10355b:	8b 45 10             	mov    0x10(%ebp),%eax
  10355e:	8b 4d 14             	mov    0x14(%ebp),%ecx
  103561:	88 45 f3             	mov    %al,-0xd(%ebp)
	if (!num_msgs) {
  103564:	84 c0                	test   %al,%al
  103566:	0f 84 e3 01 00 00    	je     10374f <i2c_dw_transfer+0x1fd>
	struct i2c_dw_dev_config * const dw = dev->driver_data;
  10356c:	8b 45 08             	mov    0x8(%ebp),%eax
		return -EIO;
  10356f:	bf fb ff ff ff       	mov    $0xfffffffb,%edi
	struct i2c_dw_dev_config * const dw = dev->driver_data;
  103574:	8b 58 08             	mov    0x8(%eax),%ebx
	volatile struct i2c_dw_registers * const regs =
  103577:	8b 33                	mov    (%ebx),%esi
	if ((regs->ic_status.bits.activity) || (dw->state & I2C_DW_BUSY)) {
  103579:	8b 46 70             	mov    0x70(%esi),%eax
  10357c:	a8 01                	test   $0x1,%al
  10357e:	0f 85 cb 01 00 00    	jne    10374f <i2c_dw_transfer+0x1fd>
  103584:	8a 43 28             	mov    0x28(%ebx),%al
  103587:	a8 08                	test   $0x8,%al
  103589:	0f 85 c0 01 00 00    	jne    10374f <i2c_dw_transfer+0x1fd>
	dw->state |= I2C_DW_BUSY;
  10358f:	8a 43 28             	mov    0x28(%ebx),%al
  103592:	83 c8 08             	or     $0x8,%eax
  103595:	88 43 28             	mov    %al,0x28(%ebx)
	regs->ic_enable.bits.enable = 0;
  103598:	66 8b 46 6c          	mov    0x6c(%esi),%ax
  10359c:	83 e0 fe             	and    $0xfffffffe,%eax
  10359f:	66 89 46 6c          	mov    %ax,0x6c(%esi)
	regs->ic_intr_mask.raw = 0;
  1035a3:	66 c7 46 30 00 00    	movw   $0x0,0x30(%esi)
	if (I2C_MODE_MASTER & dw->app_config) {
  1035a9:	8b 53 14             	mov    0x14(%ebx),%edx
	value = regs->ic_clr_intr;
  1035ac:	66 8b 46 40          	mov    0x40(%esi),%ax
	if (I2C_MODE_MASTER & dw->app_config) {
  1035b0:	f6 c2 10             	test   $0x10,%dl
  1035b3:	0f 84 8d 01 00 00    	je     103746 <i2c_dw_transfer+0x1f4>
	if (I2C_ADDR_10_BITS & dw->app_config) {
  1035b9:	89 d7                	mov    %edx,%edi
	ic_con.bits.restart_en = 1;
  1035bb:	b8 61 00 00 00       	mov    $0x61,%eax
	if (I2C_ADDR_10_BITS & dw->app_config) {
  1035c0:	83 e7 01             	and    $0x1,%edi
  1035c3:	74 05                	je     1035ca <i2c_dw_transfer+0x78>
		ic_con.bits.addr_slave_10bit = 1;
  1035c5:	b8 79 00 00 00       	mov    $0x79,%eax
	switch (I2C_SPEED_GET(dw->app_config)) {
  1035ca:	d1 ea                	shr    %edx
  1035cc:	83 e2 07             	and    $0x7,%edx
  1035cf:	83 fa 03             	cmp    $0x3,%edx
  1035d2:	77 23                	ja     1035f7 <i2c_dw_transfer+0xa5>
  1035d4:	83 fa 02             	cmp    $0x2,%edx
  1035d7:	73 28                	jae    103601 <i2c_dw_transfer+0xaf>
  1035d9:	4a                   	dec    %edx
  1035da:	0f 85 66 01 00 00    	jne    103746 <i2c_dw_transfer+0x1f4>
		regs->ic_ss_scl_lcnt = dw->lcnt;
  1035e0:	66 8b 53 26          	mov    0x26(%ebx),%dx
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
  1035e4:	83 e0 f9             	and    $0xfffffff9,%eax
		regs->ic_ss_scl_lcnt = dw->lcnt;
  1035e7:	66 89 56 18          	mov    %dx,0x18(%esi)
		regs->ic_ss_scl_hcnt = dw->hcnt;
  1035eb:	8b 53 24             	mov    0x24(%ebx),%edx
  1035ee:	66 89 56 14          	mov    %dx,0x14(%esi)
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
  1035f2:	83 c8 02             	or     $0x2,%eax
  1035f5:	eb 3d                	jmp    103634 <i2c_dw_transfer+0xe2>
	switch (I2C_SPEED_GET(dw->app_config)) {
  1035f7:	83 fa 04             	cmp    $0x4,%edx
  1035fa:	74 1c                	je     103618 <i2c_dw_transfer+0xc6>
  1035fc:	e9 45 01 00 00       	jmp    103746 <i2c_dw_transfer+0x1f4>
		regs->ic_fs_scl_lcnt = dw->lcnt;
  103601:	66 8b 53 26          	mov    0x26(%ebx),%dx
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
  103605:	83 e0 f9             	and    $0xfffffff9,%eax
		regs->ic_fs_scl_lcnt = dw->lcnt;
  103608:	66 89 56 20          	mov    %dx,0x20(%esi)
		regs->ic_fs_scl_hcnt = dw->hcnt;
  10360c:	8b 53 24             	mov    0x24(%ebx),%edx
  10360f:	66 89 56 1c          	mov    %dx,0x1c(%esi)
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
  103613:	83 c8 04             	or     $0x4,%eax
  103616:	eb 1c                	jmp    103634 <i2c_dw_transfer+0xe2>
		if (!dw->support_hs_mode) {
  103618:	80 7b 2b 00          	cmpb   $0x0,0x2b(%ebx)
  10361c:	0f 84 24 01 00 00    	je     103746 <i2c_dw_transfer+0x1f4>
		regs->ic_hs_scl_lcnt = dw->lcnt;
  103622:	66 8b 53 26          	mov    0x26(%ebx),%dx
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
  103626:	83 c8 06             	or     $0x6,%eax
		regs->ic_hs_scl_lcnt = dw->lcnt;
  103629:	66 89 56 28          	mov    %dx,0x28(%esi)
		regs->ic_hs_scl_hcnt = dw->hcnt;
  10362d:	8b 53 24             	mov    0x24(%ebx),%edx
  103630:	66 89 56 24          	mov    %dx,0x24(%esi)
		regs->ic_tar.bits.ic_tar = slave_address;
  103634:	66 81 e1 ff 03       	and    $0x3ff,%cx
	regs->ic_con = ic_con;
  103639:	66 89 06             	mov    %ax,(%esi)
	regs->ic_rx_tl = 0;
  10363c:	66 c7 46 38 00 00    	movw   $0x0,0x38(%esi)
	regs->ic_tx_tl = 0;
  103642:	66 c7 46 3c 00 00    	movw   $0x0,0x3c(%esi)
	if (regs->ic_con.bits.master_mode) {
  103648:	8b 06                	mov    (%esi),%eax
  10364a:	a8 01                	test   $0x1,%al
  10364c:	74 10                	je     10365e <i2c_dw_transfer+0x10c>
		regs->ic_tar.bits.ic_tar = slave_address;
  10364e:	66 8b 46 04          	mov    0x4(%esi),%ax
  103652:	66 25 00 fc          	and    $0xfc00,%ax
  103656:	09 c1                	or     %eax,%ecx
  103658:	66 89 4e 04          	mov    %cx,0x4(%esi)
  10365c:	eb 0e                	jmp    10366c <i2c_dw_transfer+0x11a>
		regs->ic_sar.bits.ic_sar = slave_address;
  10365e:	66 8b 46 08          	mov    0x8(%esi),%ax
  103662:	66 25 00 fc          	and    $0xfc00,%ax
  103666:	09 c1                	or     %eax,%ecx
  103668:	66 89 4e 08          	mov    %cx,0x8(%esi)
			regs->ic_tar.bits.ic_10bitaddr_master = 1;
  10366c:	66 8b 46 04          	mov    0x4(%esi),%ax
		if (I2C_ADDR_10_BITS & dw->app_config) {
  103670:	85 ff                	test   %edi,%edi
  103672:	74 05                	je     103679 <i2c_dw_transfer+0x127>
			regs->ic_tar.bits.ic_10bitaddr_master = 1;
  103674:	80 cc 10             	or     $0x10,%ah
  103677:	eb 03                	jmp    10367c <i2c_dw_transfer+0x12a>
			regs->ic_tar.bits.ic_10bitaddr_master = 0;
  103679:	80 e4 ef             	and    $0xef,%ah
  10367c:	66 89 46 04          	mov    %ax,0x4(%esi)
		k_sem_take(&dw->device_sync_sem, K_FOREVER);
  103680:	8d 7b 04             	lea    0x4(%ebx),%edi
	regs->ic_enable.bits.enable = 1;
  103683:	66 8b 46 6c          	mov    0x6c(%esi),%ax
  103687:	83 c8 01             	or     $0x1,%eax
  10368a:	66 89 46 6c          	mov    %ax,0x6c(%esi)
	device_busy_set(dev);
  10368e:	ff 75 08             	pushl  0x8(%ebp)
  103691:	e8 0e 1a 00 00       	call   1050a4 <device_busy_set>
  103696:	58                   	pop    %eax
		dw->xfr_buf = cur_msg->buf;
  103697:	8b 45 0c             	mov    0xc(%ebp),%eax
		pflags = dw->xfr_flags;
  10369a:	8a 53 2a             	mov    0x2a(%ebx),%dl
		dw->xfr_buf = cur_msg->buf;
  10369d:	8b 00                	mov    (%eax),%eax
  10369f:	89 43 18             	mov    %eax,0x18(%ebx)
		dw->xfr_len = cur_msg->len;
  1036a2:	8b 45 0c             	mov    0xc(%ebp),%eax
  1036a5:	8b 48 04             	mov    0x4(%eax),%ecx
  1036a8:	89 4b 1c             	mov    %ecx,0x1c(%ebx)
		dw->xfr_flags = cur_msg->flags;
  1036ab:	8a 40 08             	mov    0x8(%eax),%al
		dw->rx_pending = 0;
  1036ae:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
  1036b5:	31 c2                	xor    %eax,%edx
		dw->xfr_flags = cur_msg->flags;
  1036b7:	88 43 2a             	mov    %al,0x2a(%ebx)
		if ((pflags & I2C_MSG_RW_MASK)
  1036ba:	80 e2 01             	and    $0x1,%dl
  1036bd:	74 06                	je     1036c5 <i2c_dw_transfer+0x173>
			dw->xfr_flags |= I2C_MSG_RESTART;
  1036bf:	83 c8 04             	or     $0x4,%eax
  1036c2:	88 43 2a             	mov    %al,0x2a(%ebx)
		if (msg_left == 1) {
  1036c5:	80 7d f3 01          	cmpb   $0x1,-0xd(%ebp)
  1036c9:	75 04                	jne    1036cf <i2c_dw_transfer+0x17d>
			dw->xfr_flags |= I2C_MSG_STOP;
  1036cb:	80 4b 2a 02          	orb    $0x2,0x2a(%ebx)
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
  1036cf:	8a 43 28             	mov    0x28(%ebx),%al
  1036d2:	83 e0 fc             	and    $0xfffffffc,%eax
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
  1036d5:	f6 43 2a 01          	testb  $0x1,0x2a(%ebx)
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
  1036d9:	88 43 28             	mov    %al,0x28(%ebx)
			dw->state |= I2C_DW_CMD_SEND;
  1036dc:	8a 43 28             	mov    0x28(%ebx),%al
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
  1036df:	75 0c                	jne    1036ed <i2c_dw_transfer+0x19b>
			dw->state |= I2C_DW_CMD_SEND;
  1036e1:	83 c8 01             	or     $0x1,%eax
			dw->request_bytes = 0;
  1036e4:	c6 43 29 00          	movb   $0x0,0x29(%ebx)
			dw->state |= I2C_DW_CMD_SEND;
  1036e8:	88 43 28             	mov    %al,0x28(%ebx)
  1036eb:	eb 09                	jmp    1036f6 <i2c_dw_transfer+0x1a4>
			dw->state |= I2C_DW_CMD_RECV;
  1036ed:	83 c8 02             	or     $0x2,%eax
			dw->request_bytes = dw->xfr_len;
  1036f0:	88 4b 29             	mov    %cl,0x29(%ebx)
			dw->state |= I2C_DW_CMD_RECV;
  1036f3:	88 43 28             	mov    %al,0x28(%ebx)
		if (regs->ic_con.bits.master_mode) {
  1036f6:	8b 06                	mov    (%esi),%eax
  1036f8:	a8 01                	test   $0x1,%al
  1036fa:	74 08                	je     103704 <i2c_dw_transfer+0x1b2>
			regs->ic_intr_mask.raw = (DW_ENABLE_TX_INT_I2C_MASTER |
  1036fc:	66 c7 46 30 5f 02    	movw   $0x25f,0x30(%esi)
  103702:	eb 06                	jmp    10370a <i2c_dw_transfer+0x1b8>
			regs->ic_intr_mask.raw = DW_ENABLE_TX_INT_I2C_SLAVE;
  103704:	66 c7 46 30 60 02    	movw   $0x260,0x30(%esi)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
  10370a:	6a ff                	push   $0xffffffff
  10370c:	57                   	push   %edi
  10370d:	e8 49 22 00 00       	call   10595b <_impl_k_sem_take>
  103712:	59                   	pop    %ecx
  103713:	58                   	pop    %eax
		if (dw->state & I2C_DW_CMD_ERROR) {
  103714:	8a 43 28             	mov    0x28(%ebx),%al
  103717:	a8 04                	test   $0x4,%al
  103719:	75 17                	jne    103732 <i2c_dw_transfer+0x1e0>
		if (dw->xfr_len > 0) {
  10371b:	83 7b 1c 00          	cmpl   $0x0,0x1c(%ebx)
  10371f:	75 11                	jne    103732 <i2c_dw_transfer+0x1e0>
		cur_msg++;
  103721:	83 45 0c 0c          	addl   $0xc,0xc(%ebp)
	while (msg_left > 0) {
  103725:	fe 4d f3             	decb   -0xd(%ebp)
  103728:	0f 85 69 ff ff ff    	jne    103697 <i2c_dw_transfer+0x145>
  10372e:	31 ff                	xor    %edi,%edi
  103730:	eb 05                	jmp    103737 <i2c_dw_transfer+0x1e5>
			ret = -EIO;
  103732:	bf fb ff ff ff       	mov    $0xfffffffb,%edi
	device_busy_clear(dev);
  103737:	ff 75 08             	pushl  0x8(%ebp)
  10373a:	e8 6a 19 00 00       	call   1050a9 <device_busy_clear>
  10373f:	5a                   	pop    %edx
	dw->state = I2C_DW_STATE_READY;
  103740:	c6 43 28 00          	movb   $0x0,0x28(%ebx)
	return ret;
  103744:	eb 09                	jmp    10374f <i2c_dw_transfer+0x1fd>
		dw->state = I2C_DW_STATE_READY;
  103746:	c6 43 28 00          	movb   $0x0,0x28(%ebx)
		return ret;
  10374a:	bf ea ff ff ff       	mov    $0xffffffea,%edi
}
  10374f:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103752:	89 f8                	mov    %edi,%eax
  103754:	5b                   	pop    %ebx
  103755:	5e                   	pop    %esi
  103756:	5f                   	pop    %edi
  103757:	5d                   	pop    %ebp
  103758:	c3                   	ret    

00103759 <pci_set_command_bits>:
	return 0;
}
#endif /* CONFIG_PCI_ENUMERATION */

static void pci_set_command_bits(struct pci_dev_info *dev_info, u32_t bits)
{
  103759:	55                   	push   %ebp
  10375a:	89 e5                	mov    %esp,%ebp
  10375c:	56                   	push   %esi
  10375d:	53                   	push   %ebx
  10375e:	51                   	push   %ecx
	union pci_addr_reg pci_ctrl_addr;
	u32_t pci_data;

	pci_ctrl_addr.value = 0;
	pci_ctrl_addr.field.func = dev_info->function;
  10375f:	8b 58 0c             	mov    0xc(%eax),%ebx
{
  103762:	89 d6                	mov    %edx,%esi
	pci_ctrl_addr.field.bus = dev_info->bus;
  103764:	0f b6 50 0c          	movzbl 0xc(%eax),%edx
	pci_ctrl_addr.field.func = dev_info->function;
  103768:	c1 eb 05             	shr    $0x5,%ebx
	pci_ctrl_addr.field.device = dev_info->dev;
  10376b:	8a 40 0d             	mov    0xd(%eax),%al
	pci_ctrl_addr.field.bus = dev_info->bus;
  10376e:	c1 e2 10             	shl    $0x10,%edx
  103771:	81 e3 00 07 00 00    	and    $0x700,%ebx
	pci_ctrl_addr.field.device = dev_info->dev;
  103777:	83 e0 1f             	and    $0x1f,%eax
  10377a:	09 d3                	or     %edx,%ebx
  10377c:	c1 e0 0b             	shl    $0xb,%eax
	pci_ctrl_addr.field.reg = 1;
  10377f:	09 c3                	or     %eax,%ebx

#ifdef CONFIG_PCI_DEBUG
	printk("pci_set_command_bits 0x%x\n", pci_ctrl_addr.value);
#endif

	pci_read(DEFAULT_PCI_CONTROLLER,
  103781:	8d 45 f4             	lea    -0xc(%ebp),%eax
	pci_ctrl_addr.field.reg = 1;
  103784:	83 cb 04             	or     $0x4,%ebx
	pci_read(DEFAULT_PCI_CONTROLLER,
  103787:	50                   	push   %eax
  103788:	6a 02                	push   $0x2
  10378a:	53                   	push   %ebx
  10378b:	6a 00                	push   $0x0
  10378d:	e8 6c 06 00 00       	call   103dfe <pci_read>
  103792:	83 c4 10             	add    $0x10,%esp
			pci_ctrl_addr,
			sizeof(u16_t),
			&pci_data);

	pci_data = pci_data | bits;
  103795:	0b 75 f4             	or     -0xc(%ebp),%esi

	pci_write(DEFAULT_PCI_CONTROLLER,
  103798:	56                   	push   %esi
  103799:	6a 02                	push   $0x2
  10379b:	53                   	push   %ebx
  10379c:	6a 00                	push   $0x0
	pci_data = pci_data | bits;
  10379e:	89 75 f4             	mov    %esi,-0xc(%ebp)
	pci_write(DEFAULT_PCI_CONTROLLER,
  1037a1:	e8 c8 06 00 00       	call   103e6e <pci_write>
  1037a6:	83 c4 10             	add    $0x10,%esp
			pci_ctrl_addr,
			sizeof(u16_t),
			pci_data);
}
  1037a9:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1037ac:	5b                   	pop    %ebx
  1037ad:	5e                   	pop    %esi
  1037ae:	5d                   	pop    %ebp
  1037af:	c3                   	ret    

001037b0 <pci_bus_scan_init>:
	lookup.bus = 0;
  1037b0:	66 81 25 d4 a9 10 00 	andw   $0xfe00,0x10a9d4
  1037b7:	00 fe 
	lookup.info.class_type = 0;
  1037b9:	66 81 25 ce a9 10 00 	andw   $0xfc03,0x10a9ce
  1037c0:	03 fc 
	lookup.dev = 0;
  1037c2:	80 25 d5 a9 10 00 81 	andb   $0x81,0x10a9d5
	lookup.info.function = PCI_FUNCTION_ANY;
  1037c9:	a1 cc a9 10 00       	mov    0x10a9cc,%eax
{
  1037ce:	55                   	push   %ebp
	lookup.func = 0;
  1037cf:	81 25 d4 a9 10 00 ff 	andl   $0xfff87fff,0x10a9d4
  1037d6:	7f f8 ff 
	lookup.info.function = PCI_FUNCTION_ANY;
  1037d9:	25 ff 1f fe ff       	and    $0xfffe1fff,%eax
{
  1037de:	89 e5                	mov    %esp,%ebp
	lookup.info.function = PCI_FUNCTION_ANY;
  1037e0:	0d 00 00 01 00       	or     $0x10000,%eax
	lookup.info.vendor_id = 0;
  1037e5:	66 c7 05 d0 a9 10 00 	movw   $0x0,0x10a9d0
  1037ec:	00 00 
	lookup.info.function = PCI_FUNCTION_ANY;
  1037ee:	a3 cc a9 10 00       	mov    %eax,0x10a9cc
	lookup.info.device_id = 0;
  1037f3:	66 c7 05 d2 a9 10 00 	movw   $0x0,0x10a9d2
  1037fa:	00 00 
	lookup.info.bar = PCI_BAR_ANY;
  1037fc:	a0 cf a9 10 00       	mov    0x10a9cf,%al
}
  103801:	5d                   	pop    %ebp
	lookup.baridx = 0;
  103802:	80 25 d6 a9 10 00 c7 	andb   $0xc7,0x10a9d6
	lookup.info.bar = PCI_BAR_ANY;
  103809:	83 e0 e3             	and    $0xffffffe3,%eax
  10380c:	83 c8 18             	or     $0x18,%eax
  10380f:	a2 cf a9 10 00       	mov    %al,0x10a9cf
	lookup.barofs = 0;
  103814:	66 81 25 d6 a9 10 00 	andw   $0xfe3f,0x10a9d6
  10381b:	3f fe 
}
  10381d:	c3                   	ret    

0010381e <pci_bus_scan>:
{
  10381e:	55                   	push   %ebp
  10381f:	89 e5                	mov    %esp,%ebp
  103821:	57                   	push   %edi
  103822:	56                   	push   %esi
  103823:	53                   	push   %ebx
  103824:	83 ec 2c             	sub    $0x2c,%esp
		!lookup.info.class_type &&
  103827:	66 a1 ce a9 10 00    	mov    0x10a9ce,%ax
{
  10382d:	8b 5d 08             	mov    0x8(%ebp),%ebx
		lookup.info.bar == PCI_BAR_ANY &&
  103830:	66 a9 fc 03          	test   $0x3fc,%ax
  103834:	75 21                	jne    103857 <pci_bus_scan+0x39>
		!lookup.info.vendor_id &&
  103836:	83 3d d0 a9 10 00 00 	cmpl   $0x0,0x10a9d0
  10383d:	75 18                	jne    103857 <pci_bus_scan+0x39>
		lookup.info.bar == PCI_BAR_ANY &&
  10383f:	8b 15 cc a9 10 00    	mov    0x10a9cc,%edx
  103845:	81 e2 00 e0 01 1c    	and    $0x1c01e000,%edx
  10384b:	81 fa 00 00 01 18    	cmp    $0x18010000,%edx
  103851:	0f 84 89 03 00 00    	je     103be0 <pci_bus_scan+0x3c2>
	if (lookup.info.function != PCI_FUNCTION_ANY) {
  103857:	a1 cc a9 10 00       	mov    0x10a9cc,%eax
	pci_ctrl_addr.value = 0;
  10385c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	if (lookup.info.function != PCI_FUNCTION_ANY) {
  103863:	89 c2                	mov    %eax,%edx
  103865:	81 e2 00 e0 01 00    	and    $0x1e000,%edx
  10386b:	81 fa 00 00 01 00    	cmp    $0x10000,%edx
  103871:	0f 84 e7 00 00 00    	je     10395e <pci_bus_scan+0x140>
		lookup.func = lookup.info.function;
  103877:	c1 e0 02             	shl    $0x2,%eax
  10387a:	8b 15 d4 a9 10 00    	mov    0x10a9d4,%edx
  103880:	25 00 80 07 00       	and    $0x78000,%eax
  103885:	81 e2 ff 7f f8 ff    	and    $0xfff87fff,%edx
  10388b:	09 d0                	or     %edx,%eax
  10388d:	a3 d4 a9 10 00       	mov    %eax,0x10a9d4
  103892:	e9 c7 00 00 00       	jmp    10395e <pci_bus_scan+0x140>
			pci_ctrl_addr.field.bus = lookup.bus;
  103897:	0f b6 15 d4 a9 10 00 	movzbl 0x10a9d4,%edx
  10389e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
			pci_ctrl_addr.field.device = lookup.dev;
  1038a1:	83 e0 1f             	and    $0x1f,%eax
			pci_ctrl_addr.field.bus = lookup.bus;
  1038a4:	c1 e2 10             	shl    $0x10,%edx
  1038a7:	81 e1 ff 07 00 ff    	and    $0xff0007ff,%ecx
			pci_ctrl_addr.field.device = lookup.dev;
  1038ad:	c1 e0 0b             	shl    $0xb,%eax
  1038b0:	09 ca                	or     %ecx,%edx
  1038b2:	09 c2                	or     %eax,%edx
	pci_read(DEFAULT_PCI_CONTROLLER,
  1038b4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  1038b7:	89 d7                	mov    %edx,%edi
  1038b9:	50                   	push   %eax
  1038ba:	81 e7 ff f8 ff ff    	and    $0xfffff8ff,%edi
  1038c0:	6a 04                	push   $0x4
  1038c2:	57                   	push   %edi
  1038c3:	6a 00                	push   $0x0
			pci_ctrl_addr.field.device = lookup.dev;
  1038c5:	89 55 dc             	mov    %edx,-0x24(%ebp)
	pci_read(DEFAULT_PCI_CONTROLLER,
  1038c8:	e8 31 05 00 00       	call   103dfe <pci_read>
  1038cd:	83 c4 10             	add    $0x10,%esp
	if (pci_data == 0xffffffff) {
  1038d0:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
  1038d4:	0f 85 17 01 00 00    	jne    1039f1 <pci_bus_scan+0x1d3>
			if (lookup.info.function != PCI_FUNCTION_ANY) {
  1038da:	8b 15 cc a9 10 00    	mov    0x10a9cc,%edx
  1038e0:	89 d0                	mov    %edx,%eax
  1038e2:	25 00 e0 01 00       	and    $0x1e000,%eax
  1038e7:	3d 00 00 01 00       	cmp    $0x10000,%eax
  1038ec:	a1 d4 a9 10 00       	mov    0x10a9d4,%eax
  1038f1:	0f 84 df 04 00 00    	je     103dd6 <pci_bus_scan+0x5b8>
				lookup.func = lookup.info.function;
  1038f7:	c1 e2 02             	shl    $0x2,%edx
  1038fa:	25 ff 7f f8 ff       	and    $0xfff87fff,%eax
  1038ff:	81 e2 00 80 07 00    	and    $0x78000,%edx
  103905:	09 c2                	or     %eax,%edx
  103907:	89 15 d4 a9 10 00    	mov    %edx,0x10a9d4
		for (; (lookup.dev < LSPCI_MAX_DEV); lookup.dev++) {
  10390d:	a0 d5 a9 10 00       	mov    0x10a9d5,%al
  103912:	88 c2                	mov    %al,%dl
  103914:	83 e0 81             	and    $0xffffff81,%eax
  103917:	d0 ea                	shr    %dl
  103919:	42                   	inc    %edx
  10391a:	83 e2 3f             	and    $0x3f,%edx
  10391d:	01 d2                	add    %edx,%edx
  10391f:	09 d0                	or     %edx,%eax
  103921:	a2 d5 a9 10 00       	mov    %al,0x10a9d5
  103926:	8a 15 d5 a9 10 00    	mov    0x10a9d5,%dl
  10392c:	88 d0                	mov    %dl,%al
  10392e:	d0 e8                	shr    %al
  103930:	83 e0 3f             	and    $0x3f,%eax
  103933:	83 f8 1f             	cmp    $0x1f,%eax
  103936:	0f 8e 5b ff ff ff    	jle    103897 <pci_bus_scan+0x79>
		lookup.dev = 0;
  10393c:	83 e2 81             	and    $0xffffff81,%edx
  10393f:	88 15 d5 a9 10 00    	mov    %dl,0x10a9d5
	for (; lookup.bus < LSPCI_MAX_BUS; lookup.bus++) {
  103945:	a1 d4 a9 10 00       	mov    0x10a9d4,%eax
  10394a:	8d 50 01             	lea    0x1(%eax),%edx
  10394d:	66 81 e2 ff 01       	and    $0x1ff,%dx
  103952:	66 25 00 fe          	and    $0xfe00,%ax
  103956:	09 d0                	or     %edx,%eax
  103958:	66 a3 d4 a9 10 00    	mov    %ax,0x10a9d4
  10395e:	a1 d4 a9 10 00       	mov    0x10a9d4,%eax
  103963:	25 ff 01 00 00       	and    $0x1ff,%eax
  103968:	48                   	dec    %eax
  103969:	7e bb                	jle    103926 <pci_bus_scan+0x108>
  10396b:	e9 69 02 00 00       	jmp    103bd9 <pci_bus_scan+0x3bb>
		if (lookup.info.function != PCI_FUNCTION_ANY &&
  103970:	8b 15 cc a9 10 00    	mov    0x10a9cc,%edx
  103976:	89 d6                	mov    %edx,%esi
  103978:	81 e6 00 e0 01 00    	and    $0x1e000,%esi
  10397e:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
  103984:	0f 85 88 00 00 00    	jne    103a12 <pci_bus_scan+0x1f4>
		pci_ctrl_addr.field.func = lookup.func;
  10398a:	83 e0 07             	and    $0x7,%eax
		if (lookup.func != 0) {
  10398d:	81 e1 00 80 07 00    	and    $0x78000,%ecx
		pci_ctrl_addr.field.func = lookup.func;
  103993:	89 c6                	mov    %eax,%esi
		if (lookup.func != 0) {
  103995:	0f 84 8a 00 00 00    	je     103a25 <pci_bus_scan+0x207>
			pci_read(DEFAULT_PCI_CONTROLLER,
  10399b:	89 f0                	mov    %esi,%eax
  10399d:	81 e7 ff f8 ff ff    	and    $0xfffff8ff,%edi
  1039a3:	83 e0 07             	and    $0x7,%eax
  1039a6:	c1 e0 08             	shl    $0x8,%eax
  1039a9:	09 c7                	or     %eax,%edi
  1039ab:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  1039ae:	50                   	push   %eax
  1039af:	6a 04                	push   $0x4
  1039b1:	57                   	push   %edi
  1039b2:	6a 00                	push   $0x0
  1039b4:	e8 45 04 00 00       	call   103dfe <pci_read>
  1039b9:	83 c4 10             	add    $0x10,%esp
			if (pci_data == 0xffffffff) {
  1039bc:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
  1039c0:	75 63                	jne    103a25 <pci_bus_scan+0x207>
	     lookup.baridx = 0, lookup.barofs = 0, lookup.func++) {
  1039c2:	80 25 d6 a9 10 00 c7 	andb   $0xc7,0x10a9d6
  1039c9:	66 81 25 d6 a9 10 00 	andw   $0xfe3f,0x10a9d6
  1039d0:	3f fe 
  1039d2:	8b 15 d4 a9 10 00    	mov    0x10a9d4,%edx
  1039d8:	89 d0                	mov    %edx,%eax
  1039da:	81 e2 ff 7f f8 ff    	and    $0xfff87fff,%edx
  1039e0:	c1 e8 0f             	shr    $0xf,%eax
  1039e3:	40                   	inc    %eax
  1039e4:	83 e0 0f             	and    $0xf,%eax
  1039e7:	c1 e0 0f             	shl    $0xf,%eax
  1039ea:	09 d0                	or     %edx,%eax
  1039ec:	a3 d4 a9 10 00       	mov    %eax,0x10a9d4
	for (; lookup.func < LSPCI_MAX_FUNC;
  1039f1:	8b 0d d4 a9 10 00    	mov    0x10a9d4,%ecx
  1039f7:	89 ce                	mov    %ecx,%esi
  1039f9:	c1 ee 0f             	shr    $0xf,%esi
  1039fc:	89 f0                	mov    %esi,%eax
  1039fe:	83 e0 0f             	and    $0xf,%eax
  103a01:	0f b6 d0             	movzbl %al,%edx
  103a04:	83 fa 07             	cmp    $0x7,%edx
  103a07:	0f 8e 63 ff ff ff    	jle    103970 <pci_bus_scan+0x152>
  103a0d:	e9 c8 fe ff ff       	jmp    1038da <pci_bus_scan+0xbc>
		    lookup.func != lookup.info.function) {
  103a12:	c1 ea 0d             	shr    $0xd,%edx
  103a15:	83 e2 0f             	and    $0xf,%edx
		if (lookup.info.function != PCI_FUNCTION_ANY &&
  103a18:	38 c2                	cmp    %al,%dl
  103a1a:	0f 84 6a ff ff ff    	je     10398a <pci_bus_scan+0x16c>
  103a20:	e9 b5 fe ff ff       	jmp    1038da <pci_bus_scan+0xbc>
		pci_header_get(DEFAULT_PCI_CONTROLLER,
  103a25:	89 f0                	mov    %esi,%eax
  103a27:	81 e7 ff f8 ff ff    	and    $0xfffff8ff,%edi
  103a2d:	83 e0 07             	and    $0x7,%eax
  103a30:	68 00 9d 10 00       	push   $0x109d00
  103a35:	c1 e0 08             	shl    $0x8,%eax
  103a38:	09 c7                	or     %eax,%edi
  103a3a:	57                   	push   %edi
  103a3b:	6a 00                	push   $0x0
  103a3d:	e8 96 04 00 00       	call   103ed8 <pci_header_get>
		if (lookup.info.class_type &&
  103a42:	66 a1 ce a9 10 00    	mov    0x10a9ce,%ax
		pci_header_get(DEFAULT_PCI_CONTROLLER,
  103a48:	83 c4 0c             	add    $0xc,%esp
		if (lookup.info.class_type &&
  103a4b:	66 a9 fc 03          	test   $0x3fc,%ax
  103a4f:	74 10                	je     103a61 <pci_bus_scan+0x243>
		    pci_dev_header.field.class != lookup.info.class_type) {
  103a51:	66 c1 e8 02          	shr    $0x2,%ax
		if (lookup.info.class_type &&
  103a55:	38 05 0b 9d 10 00    	cmp    %al,0x109d0b
  103a5b:	0f 85 61 ff ff ff    	jne    1039c2 <pci_bus_scan+0x1a4>
		if (lookup.info.vendor_id && lookup.info.device_id &&
  103a61:	66 83 3d d0 a9 10 00 	cmpw   $0x0,0x10a9d0
  103a68:	00 
  103a69:	74 1b                	je     103a86 <pci_bus_scan+0x268>
  103a6b:	66 83 3d d2 a9 10 00 	cmpw   $0x0,0x10a9d2
  103a72:	00 
  103a73:	74 11                	je     103a86 <pci_bus_scan+0x268>
  103a75:	a1 00 9d 10 00       	mov    0x109d00,%eax
  103a7a:	39 05 d0 a9 10 00    	cmp    %eax,0x10a9d0
  103a80:	0f 85 3c ff ff ff    	jne    1039c2 <pci_bus_scan+0x1a4>
		if ((pci_dev_header.field.hdr_type & 0x7f) == 1) {
  103a86:	a0 0e 9d 10 00       	mov    0x109d0e,%al
  103a8b:	83 e0 7f             	and    $0x7f,%eax
			max_bars = PCI_MAX_BARS;
  103a8e:	fe c8                	dec    %al
  103a90:	0f 95 c0             	setne  %al
  103a93:	0f b6 c0             	movzbl %al,%eax
  103a96:	8d 04 85 02 00 00 00 	lea    0x2(,%eax,4),%eax
  103a9d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  103aa0:	89 f0                	mov    %esi,%eax
  103aa2:	83 e0 07             	and    $0x7,%eax
  103aa5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (; lookup.barofs < max_bars;
  103aa8:	66 a1 d6 a9 10 00    	mov    0x10a9d6,%ax
  103aae:	66 c1 e8 06          	shr    $0x6,%ax
  103ab2:	83 e0 07             	and    $0x7,%eax
  103ab5:	0f b6 d0             	movzbl %al,%edx
  103ab8:	3b 55 e0             	cmp    -0x20(%ebp),%edx
  103abb:	0f 8d 01 ff ff ff    	jge    1039c2 <pci_bus_scan+0x1a4>
	pci_ctrl_addr.field.reg = 4 + lookup.barofs;
  103ac1:	83 c0 04             	add    $0x4,%eax
  103ac4:	8b 55 c8             	mov    -0x38(%ebp),%edx
  103ac7:	c1 e2 08             	shl    $0x8,%edx
  103aca:	88 45 cc             	mov    %al,-0x34(%ebp)
  103acd:	81 e7 ff f8 ff ff    	and    $0xfffff8ff,%edi
	pci_read(DEFAULT_PCI_CONTROLLER,
  103ad3:	8b 75 cc             	mov    -0x34(%ebp),%esi
  103ad6:	09 d7                	or     %edx,%edi
  103ad8:	83 e6 0f             	and    $0xf,%esi
  103adb:	c1 e6 02             	shl    $0x2,%esi
  103ade:	89 f8                	mov    %edi,%eax
  103ae0:	25 03 f8 ff ff       	and    $0xfffff803,%eax
  103ae5:	09 c6                	or     %eax,%esi
  103ae7:	8d 45 e8             	lea    -0x18(%ebp),%eax
  103aea:	09 d6                	or     %edx,%esi
  103aec:	50                   	push   %eax
  103aed:	6a 04                	push   $0x4
  103aef:	56                   	push   %esi
  103af0:	6a 00                	push   $0x0
  103af2:	e8 07 03 00 00       	call   103dfe <pci_read>
  103af7:	83 c4 10             	add    $0x10,%esp
	pci_read(DEFAULT_PCI_CONTROLLER,
  103afa:	8d 45 f0             	lea    -0x10(%ebp),%eax
  103afd:	50                   	push   %eax
  103afe:	6a 04                	push   $0x4
  103b00:	56                   	push   %esi
  103b01:	6a 00                	push   $0x0
  103b03:	e8 f6 02 00 00       	call   103dfe <pci_read>
  103b08:	83 c4 10             	add    $0x10,%esp
	pci_write(DEFAULT_PCI_CONTROLLER,
  103b0b:	6a ff                	push   $0xffffffff
  103b0d:	6a 04                	push   $0x4
  103b0f:	56                   	push   %esi
  103b10:	6a 00                	push   $0x0
  103b12:	e8 57 03 00 00       	call   103e6e <pci_write>
  103b17:	83 c4 10             	add    $0x10,%esp
	pci_read(DEFAULT_PCI_CONTROLLER,
  103b1a:	8d 45 ec             	lea    -0x14(%ebp),%eax
  103b1d:	50                   	push   %eax
  103b1e:	6a 04                	push   $0x4
  103b20:	56                   	push   %esi
  103b21:	6a 00                	push   $0x0
  103b23:	e8 d6 02 00 00       	call   103dfe <pci_read>
  103b28:	83 c4 10             	add    $0x10,%esp
	pci_write(DEFAULT_PCI_CONTROLLER,
  103b2b:	ff 75 f0             	pushl  -0x10(%ebp)
  103b2e:	6a 04                	push   $0x4
  103b30:	56                   	push   %esi
  103b31:	6a 00                	push   $0x0
  103b33:	e8 36 03 00 00       	call   103e6e <pci_write>
	if (*config != 0xffffffff && *config != 0) {
  103b38:	8b 55 ec             	mov    -0x14(%ebp),%edx
	pci_write(DEFAULT_PCI_CONTROLLER,
  103b3b:	83 c4 10             	add    $0x10,%esp
	if (*config != 0xffffffff && *config != 0) {
  103b3e:	8d 42 ff             	lea    -0x1(%edx),%eax
  103b41:	83 f8 fd             	cmp    $0xfffffffd,%eax
  103b44:	77 51                	ja     103b97 <pci_bus_scan+0x379>
	if (BAR_SPACE(bar_config) == BAR_SPACE_MEM) {
  103b46:	f6 c2 01             	test   $0x1,%dl
  103b49:	8a 43 0e             	mov    0xe(%ebx),%al
  103b4c:	0f 85 1e 01 00 00    	jne    103c70 <pci_bus_scan+0x452>
		dev_info->mem_type = BAR_SPACE_MEM;
  103b52:	83 e0 fd             	and    $0xfffffffd,%eax
		if (BAR_TYPE(bar_config) == BAR_TYPE_64BIT) {
  103b55:	83 e2 06             	and    $0x6,%edx
		dev_info->mem_type = BAR_SPACE_MEM;
  103b58:	88 43 0e             	mov    %al,0xe(%ebx)
		if (BAR_TYPE(bar_config) == BAR_TYPE_64BIT) {
  103b5b:	83 fa 04             	cmp    $0x4,%edx
  103b5e:	0f 85 05 01 00 00    	jne    103c69 <pci_bus_scan+0x44b>
			if (++lookup.barofs >= max_bars)
  103b64:	66 8b 15 d6 a9 10 00 	mov    0x10a9d6,%dx
  103b6b:	89 d0                	mov    %edx,%eax
  103b6d:	66 c1 e8 06          	shr    $0x6,%ax
  103b71:	66 81 e2 3f fe       	and    $0xfe3f,%dx
  103b76:	40                   	inc    %eax
  103b77:	83 e0 07             	and    $0x7,%eax
  103b7a:	89 c1                	mov    %eax,%ecx
  103b7c:	83 e1 07             	and    $0x7,%ecx
  103b7f:	c1 e1 06             	shl    $0x6,%ecx
  103b82:	09 ca                	or     %ecx,%edx
  103b84:	0f b6 c0             	movzbl %al,%eax
  103b87:	66 89 15 d6 a9 10 00 	mov    %dx,0x10a9d6
  103b8e:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  103b91:	0f 8f a5 00 00 00    	jg     103c3c <pci_bus_scan+0x41e>
		     lookup.baridx++, lookup.barofs++) {
  103b97:	8a 15 d6 a9 10 00    	mov    0x10a9d6,%dl
  103b9d:	88 d0                	mov    %dl,%al
  103b9f:	83 e2 c7             	and    $0xffffffc7,%edx
  103ba2:	c0 e8 03             	shr    $0x3,%al
  103ba5:	40                   	inc    %eax
  103ba6:	83 e0 07             	and    $0x7,%eax
  103ba9:	c1 e0 03             	shl    $0x3,%eax
  103bac:	09 d0                	or     %edx,%eax
  103bae:	a2 d6 a9 10 00       	mov    %al,0x10a9d6
  103bb3:	66 8b 15 d6 a9 10 00 	mov    0x10a9d6,%dx
  103bba:	89 d0                	mov    %edx,%eax
  103bbc:	66 c1 e8 06          	shr    $0x6,%ax
  103bc0:	66 81 e2 3f fe       	and    $0xfe3f,%dx
  103bc5:	40                   	inc    %eax
  103bc6:	83 e0 07             	and    $0x7,%eax
  103bc9:	c1 e0 06             	shl    $0x6,%eax
  103bcc:	09 d0                	or     %edx,%eax
  103bce:	66 a3 d6 a9 10 00    	mov    %ax,0x10a9d6
  103bd4:	e9 cf fe ff ff       	jmp    103aa8 <pci_bus_scan+0x28a>
	return 0;
  103bd9:	31 c0                	xor    %eax,%eax
  103bdb:	e9 05 02 00 00       	jmp    103de5 <pci_bus_scan+0x5c7>
		lookup.info.class_type = dev_info->class_type;
  103be0:	66 25 03 fc          	and    $0xfc03,%ax
  103be4:	66 8b 53 0e          	mov    0xe(%ebx),%dx
  103be8:	66 81 e2 fc 03       	and    $0x3fc,%dx
  103bed:	09 d0                	or     %edx,%eax
  103bef:	66 a3 ce a9 10 00    	mov    %ax,0x10a9ce
		lookup.info.vendor_id = dev_info->vendor_id;
  103bf5:	8b 43 10             	mov    0x10(%ebx),%eax
		lookup.info.function = dev_info->function;
  103bf8:	8b 53 0c             	mov    0xc(%ebx),%edx
		lookup.info.vendor_id = dev_info->vendor_id;
  103bfb:	66 a3 d0 a9 10 00    	mov    %ax,0x10a9d0
		lookup.info.device_id = dev_info->device_id;
  103c01:	66 8b 43 12          	mov    0x12(%ebx),%ax
  103c05:	66 a3 d2 a9 10 00    	mov    %ax,0x10a9d2
		lookup.info.function = dev_info->function;
  103c0b:	a1 cc a9 10 00       	mov    0x10a9cc,%eax
  103c10:	81 e2 00 e0 01 00    	and    $0x1e000,%edx
  103c16:	25 ff 1f fe ff       	and    $0xfffe1fff,%eax
  103c1b:	09 d0                	or     %edx,%eax
  103c1d:	a3 cc a9 10 00       	mov    %eax,0x10a9cc
		lookup.info.bar = dev_info->bar;
  103c22:	8a 53 0f             	mov    0xf(%ebx),%dl
  103c25:	a0 cf a9 10 00       	mov    0x10a9cf,%al
  103c2a:	83 e2 1c             	and    $0x1c,%edx
  103c2d:	83 e0 e3             	and    $0xffffffe3,%eax
  103c30:	09 d0                	or     %edx,%eax
  103c32:	a2 cf a9 10 00       	mov    %al,0x10a9cf
  103c37:	e9 1b fc ff ff       	jmp    103857 <pci_bus_scan+0x39>
			pci_ctrl_addr.field.reg++;
  103c3c:	8a 45 cc             	mov    -0x34(%ebp),%al
			pci_read(DEFAULT_PCI_CONTROLLER,
  103c3f:	81 e6 03 ff ff ff    	and    $0xffffff03,%esi
			pci_ctrl_addr.field.reg++;
  103c45:	40                   	inc    %eax
			pci_read(DEFAULT_PCI_CONTROLLER,
  103c46:	83 e0 1f             	and    $0x1f,%eax
  103c49:	c1 e0 02             	shl    $0x2,%eax
  103c4c:	09 c6                	or     %eax,%esi
  103c4e:	8d 45 f0             	lea    -0x10(%ebp),%eax
  103c51:	50                   	push   %eax
  103c52:	6a 04                	push   $0x4
  103c54:	56                   	push   %esi
  103c55:	6a 00                	push   $0x0
  103c57:	e8 a2 01 00 00       	call   103dfe <pci_read>
  103c5c:	83 c4 10             	add    $0x10,%esp
			if (bar_hival)
  103c5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  103c63:	0f 85 2e ff ff ff    	jne    103b97 <pci_bus_scan+0x379>
		mask = ~0xf;
  103c69:	b9 f0 ff ff ff       	mov    $0xfffffff0,%ecx
  103c6e:	eb 0b                	jmp    103c7b <pci_bus_scan+0x45d>
		dev_info->mem_type = BAR_SPACE_IO;
  103c70:	83 c8 02             	or     $0x2,%eax
		mask = ~0x3;
  103c73:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
		dev_info->mem_type = BAR_SPACE_IO;
  103c78:	88 43 0e             	mov    %al,0xe(%ebx)
	dev_info->addr = bar_value & mask;
  103c7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103c7e:	21 c8                	and    %ecx,%eax
	if (addr != 0) {
  103c80:	23 4d ec             	and    -0x14(%ebp),%ecx
	dev_info->addr = bar_value & mask;
  103c83:	89 03                	mov    %eax,(%ebx)
	if (addr != 0) {
  103c85:	74 14                	je     103c9b <pci_bus_scan+0x47d>
	__asm__ volatile (
  103c87:	0f bc c9             	bsf    %ecx,%ecx
  103c8a:	75 05                	jne    103c91 <pci_bus_scan+0x473>
  103c8c:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
		dev_info->size = 1 << (find_lsb_set(addr) - 1);
  103c91:	b8 01 00 00 00       	mov    $0x1,%eax
  103c96:	d3 e0                	shl    %cl,%eax
  103c98:	89 43 04             	mov    %eax,0x4(%ebx)
			} else if (lookup.info.bar != PCI_BAR_ANY &&
  103c9b:	a0 cf a9 10 00       	mov    0x10a9cf,%al
  103ca0:	88 c2                	mov    %al,%dl
  103ca2:	83 e2 1c             	and    $0x1c,%edx
  103ca5:	80 fa 18             	cmp    $0x18,%dl
  103ca8:	74 1a                	je     103cc4 <pci_bus_scan+0x4a6>
				   lookup.baridx != lookup.info.bar) {
  103caa:	c0 e8 02             	shr    $0x2,%al
  103cad:	8a 15 d6 a9 10 00    	mov    0x10a9d6,%dl
  103cb3:	c0 ea 03             	shr    $0x3,%dl
  103cb6:	83 e0 07             	and    $0x7,%eax
  103cb9:	83 e2 07             	and    $0x7,%edx
			} else if (lookup.info.bar != PCI_BAR_ANY &&
  103cbc:	38 c2                	cmp    %al,%dl
  103cbe:	0f 85 d3 fe ff ff    	jne    103b97 <pci_bus_scan+0x379>
				dev_info->bus = lookup.bus;
  103cc4:	8b 15 d4 a9 10 00    	mov    0x10a9d4,%edx
				dev_info->dev = lookup.dev;
  103cca:	8a 0d d5 a9 10 00    	mov    0x10a9d5,%cl
				dev_info->bus = lookup.bus;
  103cd0:	66 81 e2 ff 01       	and    $0x1ff,%dx
  103cd5:	0f b6 f2             	movzbl %dl,%esi
  103cd8:	88 53 0c             	mov    %dl,0xc(%ebx)
				dev_info->dev = lookup.dev;
  103cdb:	8a 53 0d             	mov    0xd(%ebx),%dl
  103cde:	d0 e9                	shr    %cl
  103ce0:	83 e2 e0             	and    $0xffffffe0,%edx
  103ce3:	83 e1 1f             	and    $0x1f,%ecx
				dev_info->bus = lookup.bus;
  103ce6:	89 f0                	mov    %esi,%eax
				dev_info->dev = lookup.dev;
  103ce8:	09 ca                	or     %ecx,%edx
  103cea:	88 53 0d             	mov    %dl,0xd(%ebx)
				dev_info->vendor_id =
  103ced:	8b 15 00 9d 10 00    	mov    0x109d00,%edx
  103cf3:	66 89 53 10          	mov    %dx,0x10(%ebx)
				dev_info->device_id =
  103cf7:	66 8b 15 02 9d 10 00 	mov    0x109d02,%dx
  103cfe:	66 89 53 12          	mov    %dx,0x12(%ebx)
				dev_info->class_type =
  103d02:	0f b6 15 0b 9d 10 00 	movzbl 0x109d0b,%edx
  103d09:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
  103d10:	66 8b 53 0e          	mov    0xe(%ebx),%dx
  103d14:	66 81 e2 03 fc       	and    $0xfc03,%dx
  103d19:	09 ca                	or     %ecx,%edx
static inline int pci_pin2irq(int bus, int dev, int pin)
{
	ARG_UNUSED(dev);

	if (bus < 0 || bus > 1) {
		return -1;
  103d1b:	83 c9 ff             	or     $0xffffffff,%ecx
  103d1e:	66 89 53 0e          	mov    %dx,0xe(%ebx)
	if (bus < 0 || bus > 1) {
  103d22:	3c 01                	cmp    $0x1,%al
				dev_info->irq = pci_pin2irq(dev_info->bus,
  103d24:	0f b6 15 3d 9d 10 00 	movzbl 0x109d3d,%edx
  103d2b:	77 10                	ja     103d3d <pci_bus_scan+0x51f>
	}
	if ((pin < PCI_INTA) || (pin > PCI_INTD)) {
  103d2d:	8d 42 ff             	lea    -0x1(%edx),%eax
  103d30:	83 f8 03             	cmp    $0x3,%eax
  103d33:	77 08                	ja     103d3d <pci_bus_scan+0x51f>
		return -1;
	}
	return NUM_STD_IRQS + ((pin - 1 + bus) & 3);
  103d35:	01 f0                	add    %esi,%eax
  103d37:	83 e0 03             	and    $0x3,%eax
  103d3a:	8d 48 10             	lea    0x10(%eax),%ecx
				dev_info->function = lookup.func;
  103d3d:	a1 d4 a9 10 00       	mov    0x10a9d4,%eax
				dev_info->irq = pci_pin2irq(dev_info->bus,
  103d42:	89 4b 08             	mov    %ecx,0x8(%ebx)
				dev_info->function = lookup.func;
  103d45:	c1 e8 02             	shr    $0x2,%eax
  103d48:	25 00 e0 01 00       	and    $0x1e000,%eax
  103d4d:	89 c2                	mov    %eax,%edx
  103d4f:	8b 43 0c             	mov    0xc(%ebx),%eax
  103d52:	25 ff 1f fe ff       	and    $0xfffe1fff,%eax
  103d57:	09 d0                	or     %edx,%eax
  103d59:	89 43 0c             	mov    %eax,0xc(%ebx)
				dev_info->bar = lookup.baridx;
  103d5c:	a0 d6 a9 10 00       	mov    0x10a9d6,%al
  103d61:	8a 53 0f             	mov    0xf(%ebx),%dl
  103d64:	c0 e8 03             	shr    $0x3,%al
  103d67:	83 e2 e3             	and    $0xffffffe3,%edx
  103d6a:	83 e0 07             	and    $0x7,%eax
  103d6d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
				lookup.baridx++;
  103d74:	40                   	inc    %eax
				dev_info->bar = lookup.baridx;
  103d75:	09 ca                	or     %ecx,%edx
				lookup.baridx++;
  103d77:	83 e0 07             	and    $0x7,%eax
  103d7a:	c1 e0 03             	shl    $0x3,%eax
				dev_info->bar = lookup.baridx;
  103d7d:	88 53 0f             	mov    %dl,0xf(%ebx)
				lookup.baridx++;
  103d80:	8a 15 d6 a9 10 00    	mov    0x10a9d6,%dl
  103d86:	83 e2 c7             	and    $0xffffffc7,%edx
  103d89:	09 d0                	or     %edx,%eax
  103d8b:	a2 d6 a9 10 00       	mov    %al,0x10a9d6
				lookup.barofs++;
  103d90:	66 8b 15 d6 a9 10 00 	mov    0x10a9d6,%dx
  103d97:	89 d0                	mov    %edx,%eax
  103d99:	66 c1 e8 06          	shr    $0x6,%ax
  103d9d:	66 81 e2 3f fe       	and    $0xfe3f,%dx
  103da2:	40                   	inc    %eax
  103da3:	83 e0 07             	and    $0x7,%eax
  103da6:	89 c1                	mov    %eax,%ecx
  103da8:	83 e1 07             	and    $0x7,%ecx
  103dab:	c1 e1 06             	shl    $0x6,%ecx
  103dae:	09 ca                	or     %ecx,%edx
				if (lookup.barofs >= max_bars) {
  103db0:	0f b6 c0             	movzbl %al,%eax
				lookup.barofs++;
  103db3:	66 89 15 d6 a9 10 00 	mov    %dx,0x10a9d6
				if (lookup.barofs >= max_bars) {
  103dba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  103dbd:	7c 10                	jl     103dcf <pci_bus_scan+0x5b1>
					lookup.baridx = 0;
  103dbf:	80 25 d6 a9 10 00 c7 	andb   $0xc7,0x10a9d6
					lookup.barofs = 0;
  103dc6:	66 81 25 d6 a9 10 00 	andw   $0xfe3f,0x10a9d6
  103dcd:	3f fe 
				return 1;
  103dcf:	b8 01 00 00 00       	mov    $0x1,%eax
  103dd4:	eb 0f                	jmp    103de5 <pci_bus_scan+0x5c7>
				lookup.func = 0;
  103dd6:	25 ff 7f f8 ff       	and    $0xfff87fff,%eax
  103ddb:	a3 d4 a9 10 00       	mov    %eax,0x10a9d4
  103de0:	e9 28 fb ff ff       	jmp    10390d <pci_bus_scan+0xef>
}
  103de5:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103de8:	5b                   	pop    %ebx
  103de9:	5e                   	pop    %esi
  103dea:	5f                   	pop    %edi
  103deb:	5d                   	pop    %ebp
  103dec:	c3                   	ret    

00103ded <pci_enable_regs>:

void pci_enable_regs(struct pci_dev_info *dev_info)
{
  103ded:	55                   	push   %ebp
	pci_set_command_bits(dev_info, PCI_CMD_MEM_ENABLE);
  103dee:	ba 02 00 00 00       	mov    $0x2,%edx
{
  103df3:	89 e5                	mov    %esp,%ebp
	pci_set_command_bits(dev_info, PCI_CMD_MEM_ENABLE);
  103df5:	8b 45 08             	mov    0x8(%ebp),%eax
}
  103df8:	5d                   	pop    %ebp
	pci_set_command_bits(dev_info, PCI_CMD_MEM_ENABLE);
  103df9:	e9 5b f9 ff ff       	jmp    103759 <pci_set_command_bits>

00103dfe <pci_read>:
 *
 */

void pci_read(u32_t controller, union pci_addr_reg addr,
	      u32_t size, u32_t *data)
{
  103dfe:	55                   	push   %ebp
  103dff:	89 e5                	mov    %esp,%ebp
  103e01:	56                   	push   %esi
  103e02:	53                   	push   %ebx
  103e03:	8b 55 10             	mov    0x10(%ebp),%edx
  103e06:	8b 45 0c             	mov    0xc(%ebp),%eax
  103e09:	8b 5d 14             	mov    0x14(%ebp),%ebx
	u32_t access_size;
	u32_t access_offset;

	/* validate the access size */

	switch (size) {
  103e0c:	83 fa 01             	cmp    $0x1,%edx
  103e0f:	74 11                	je     103e22 <pci_read+0x24>
  103e11:	83 fa 02             	cmp    $0x2,%edx
  103e14:	75 15                	jne    103e2b <pci_read+0x2d>
		access_size = SYS_PCI_ACCESS_8BIT;
		access_offset = addr.field.offset;
		break;
	case 2:
		access_size = SYS_PCI_ACCESS_16BIT;
		access_offset = addr.field.offset;
  103e16:	89 c1                	mov    %eax,%ecx
		access_size = SYS_PCI_ACCESS_16BIT;
  103e18:	be 01 00 00 00       	mov    $0x1,%esi
		access_offset = addr.field.offset;
  103e1d:	83 e1 03             	and    $0x3,%ecx
		break;
  103e20:	eb 10                	jmp    103e32 <pci_read+0x34>
		access_offset = addr.field.offset;
  103e22:	89 c1                	mov    %eax,%ecx
		access_size = SYS_PCI_ACCESS_8BIT;
  103e24:	31 f6                	xor    %esi,%esi
		access_offset = addr.field.offset;
  103e26:	83 e1 03             	and    $0x3,%ecx
		break;
  103e29:	eb 07                	jmp    103e32 <pci_read+0x34>
	case 4:
	default:
		access_size = SYS_PCI_ACCESS_32BIT;
		access_offset = 0;
  103e2b:	31 c9                	xor    %ecx,%ecx
		access_size = SYS_PCI_ACCESS_32BIT;
  103e2d:	be 03 00 00 00       	mov    $0x3,%esi
		break;
	}

	/* ensure enable has been set */

	addr.field.enable = 1;
  103e32:	0d 00 00 00 80       	or     $0x80000000,%eax

	/* clear the offset for the address register */

	addr.field.offset = 0;
  103e37:	83 e0 fc             	and    $0xfffffffc,%eax
	if (controller != DEFAULT_PCI_CONTROLLER) {
  103e3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103e3e:	75 2a                	jne    103e6a <pci_read+0x6c>
	__asm__ volatile("outl	%0, %w1;\n\t"
  103e40:	ba f8 0c 00 00       	mov    $0xcf8,%edx
  103e45:	ef                   	out    %eax,(%dx)
	pci_ctrl_read(PCI_CTRL_DATA_REG + offset, data, size);
  103e46:	8d 91 fc 0c 00 00    	lea    0xcfc(%ecx),%edx
	switch (size) {
  103e4c:	83 fe 01             	cmp    $0x1,%esi
  103e4f:	74 0a                	je     103e5b <pci_read+0x5d>
  103e51:	72 11                	jb     103e64 <pci_read+0x66>
  103e53:	83 fe 03             	cmp    $0x3,%esi
  103e56:	75 12                	jne    103e6a <pci_read+0x6c>
	__asm__ volatile("inl	%w1, %0;\n\t"
  103e58:	ed                   	in     (%dx),%eax
  103e59:	eb 05                	jmp    103e60 <pci_read+0x62>
	__asm__ volatile("inw	%w1, %w0;\n\t"
  103e5b:	66 ed                	in     (%dx),%ax
		*data = sys_in16(reg);
  103e5d:	0f b7 c0             	movzwl %ax,%eax
  103e60:	89 03                	mov    %eax,(%ebx)
  103e62:	eb 06                	jmp    103e6a <pci_read+0x6c>
	__asm__ volatile("inb	%w1, %b0;\n\t"
  103e64:	ec                   	in     (%dx),%al
		*data = sys_in8(reg);
  103e65:	0f b6 d0             	movzbl %al,%edx
  103e68:	89 13                	mov    %edx,(%ebx)

	pci_ctrl_addr_write(
		controller, PCI_NO_OFFSET, addr.value, SYS_PCI_ACCESS_32BIT);

	pci_ctrl_data_read(controller, access_offset, data, access_size);
}
  103e6a:	5b                   	pop    %ebx
  103e6b:	5e                   	pop    %esi
  103e6c:	5d                   	pop    %ebp
  103e6d:	c3                   	ret    

00103e6e <pci_write>:
 *
 */

void pci_write(u32_t controller, union pci_addr_reg addr,
	       u32_t size, u32_t data)
{
  103e6e:	55                   	push   %ebp
  103e6f:	89 e5                	mov    %esp,%ebp
  103e71:	53                   	push   %ebx
  103e72:	8b 55 10             	mov    0x10(%ebp),%edx
  103e75:	8b 45 0c             	mov    0xc(%ebp),%eax
	u32_t access_size;
	u32_t access_offset;

	/* validate the access size */

	switch (size) {
  103e78:	83 fa 01             	cmp    $0x1,%edx
  103e7b:	74 11                	je     103e8e <pci_write+0x20>
  103e7d:	83 fa 02             	cmp    $0x2,%edx
  103e80:	75 15                	jne    103e97 <pci_write+0x29>
		access_size = SYS_PCI_ACCESS_8BIT;
		access_offset = addr.field.offset;
		break;
	case 2:
		access_size = SYS_PCI_ACCESS_16BIT;
		access_offset = addr.field.offset;
  103e82:	89 c1                	mov    %eax,%ecx
		access_size = SYS_PCI_ACCESS_16BIT;
  103e84:	bb 01 00 00 00       	mov    $0x1,%ebx
		access_offset = addr.field.offset;
  103e89:	83 e1 03             	and    $0x3,%ecx
		break;
  103e8c:	eb 10                	jmp    103e9e <pci_write+0x30>
		access_offset = addr.field.offset;
  103e8e:	89 c1                	mov    %eax,%ecx
		access_size = SYS_PCI_ACCESS_8BIT;
  103e90:	31 db                	xor    %ebx,%ebx
		access_offset = addr.field.offset;
  103e92:	83 e1 03             	and    $0x3,%ecx
		break;
  103e95:	eb 07                	jmp    103e9e <pci_write+0x30>
	case 4:
	default:
		access_size = SYS_PCI_ACCESS_32BIT;
		access_offset = 0;
  103e97:	31 c9                	xor    %ecx,%ecx
		access_size = SYS_PCI_ACCESS_32BIT;
  103e99:	bb 03 00 00 00       	mov    $0x3,%ebx
		break;
	}

	/* ensure enable has been set */

	addr.field.enable = 1;
  103e9e:	0d 00 00 00 80       	or     $0x80000000,%eax

	/* clear the offset for the address register */

	addr.field.offset = 0;
  103ea3:	83 e0 fc             	and    $0xfffffffc,%eax
	if (controller != DEFAULT_PCI_CONTROLLER) {
  103ea6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  103eaa:	75 29                	jne    103ed5 <pci_write+0x67>
	__asm__ volatile("outl	%0, %w1;\n\t"
  103eac:	ba f8 0c 00 00       	mov    $0xcf8,%edx
  103eb1:	ef                   	out    %eax,(%dx)
	pci_ctrl_write(PCI_CTRL_DATA_REG + offset, data, size);
  103eb2:	8d 91 fc 0c 00 00    	lea    0xcfc(%ecx),%edx
	switch (size) {
  103eb8:	83 fb 01             	cmp    $0x1,%ebx
  103ebb:	74 0d                	je     103eca <pci_write+0x5c>
  103ebd:	72 12                	jb     103ed1 <pci_write+0x63>
  103ebf:	83 fb 03             	cmp    $0x3,%ebx
  103ec2:	75 11                	jne    103ed5 <pci_write+0x67>
  103ec4:	8b 45 14             	mov    0x14(%ebp),%eax
  103ec7:	ef                   	out    %eax,(%dx)
  103ec8:	eb 0b                	jmp    103ed5 <pci_write+0x67>
	__asm__ volatile("outw	%w0, %w1;\n\t"
  103eca:	8b 45 14             	mov    0x14(%ebp),%eax
  103ecd:	66 ef                	out    %ax,(%dx)
  103ecf:	eb 04                	jmp    103ed5 <pci_write+0x67>
	__asm__ volatile("outb	%b0, %w1;\n\t"
  103ed1:	8a 45 14             	mov    0x14(%ebp),%al
  103ed4:	ee                   	out    %al,(%dx)
	/* write the data to the PCI controller */

	pci_ctrl_addr_write(
		controller, PCI_NO_OFFSET, addr.value, SYS_PCI_ACCESS_32BIT);
	pci_ctrl_data_write(controller, access_offset, data, access_size);
}
  103ed5:	5b                   	pop    %ebx
  103ed6:	5d                   	pop    %ebp
  103ed7:	c3                   	ret    

00103ed8 <pci_header_get>:
 */

void pci_header_get(u32_t controller,
		    union pci_addr_reg pci_ctrl_addr,
		    union pci_dev *pci_dev_header)
{
  103ed8:	55                   	push   %ebp
  103ed9:	89 e5                	mov    %esp,%ebp
  103edb:	57                   	push   %edi
  103edc:	56                   	push   %esi
  103edd:	53                   	push   %ebx
  103ede:	8b 5d 10             	mov    0x10(%ebp),%ebx
	u32_t i;

	/* clear out the header */

	memset(pci_dev_header, 0, sizeof(*pci_dev_header));
  103ee1:	68 00 01 00 00       	push   $0x100
  103ee6:	6a 00                	push   $0x0
  103ee8:	53                   	push   %ebx
{
  103ee9:	8b 75 0c             	mov    0xc(%ebp),%esi

	/* fill in the PCI header from the device */

	for (i = 0; i < PCI_HEADER_WORDS; i++) {
  103eec:	31 ff                	xor    %edi,%edi
	memset(pci_dev_header, 0, sizeof(*pci_dev_header));
  103eee:	e8 05 c4 ff ff       	call   1002f8 <memset>
  103ef3:	83 c4 0c             	add    $0xc,%esp
		pci_ctrl_addr.field.reg = i;
  103ef6:	89 f8                	mov    %edi,%eax
  103ef8:	81 e6 03 ff ff ff    	and    $0xffffff03,%esi
  103efe:	83 e0 3f             	and    $0x3f,%eax
		pci_read(controller,
  103f01:	53                   	push   %ebx
		pci_ctrl_addr.field.reg = i;
  103f02:	c1 e0 02             	shl    $0x2,%eax
		pci_read(controller,
  103f05:	6a 04                	push   $0x4
		pci_ctrl_addr.field.reg = i;
  103f07:	09 c6                	or     %eax,%esi
	for (i = 0; i < PCI_HEADER_WORDS; i++) {
  103f09:	47                   	inc    %edi
		pci_read(controller,
  103f0a:	56                   	push   %esi
  103f0b:	83 c3 04             	add    $0x4,%ebx
  103f0e:	ff 75 08             	pushl  0x8(%ebp)
  103f11:	e8 e8 fe ff ff       	call   103dfe <pci_read>
  103f16:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < PCI_HEADER_WORDS; i++) {
  103f19:	83 ff 40             	cmp    $0x40,%edi
  103f1c:	75 d8                	jne    103ef6 <pci_header_get+0x1e>
			pci_ctrl_addr,
			sizeof(u32_t),
			&pci_dev_header->words.word[i]);
	}
}
  103f1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
  103f21:	5b                   	pop    %ebx
  103f22:	5e                   	pop    %esi
  103f23:	5f                   	pop    %edi
  103f24:	5d                   	pop    %ebp
  103f25:	c3                   	ret    

00103f26 <pci_legacy_bridge_detect>:
 *
 * @return 0 if legacy bridge is detected and -1 otherwise
 */

int pci_legacy_bridge_detect(struct pci_dev_info *dev_info)
{
  103f26:	55                   	push   %ebp
  103f27:	89 e5                	mov    %esp,%ebp
  103f29:	53                   	push   %ebx
  103f2a:	83 ec 10             	sub    $0x10,%esp
	pci_ctrl_addr.field.device = CONFIG_PCI_LEGACY_BRIDGE_DEV;

	/* verify first if there is a valid device at this point */
	pci_ctrl_addr.field.func = 0;

	pci_read(DEFAULT_PCI_CONTROLLER,
  103f2d:	8d 45 ec             	lea    -0x14(%ebp),%eax
{
  103f30:	8b 5d 08             	mov    0x8(%ebp),%ebx
	pci_read(DEFAULT_PCI_CONTROLLER,
  103f33:	50                   	push   %eax
  103f34:	6a 04                	push   $0x4
  103f36:	68 00 f8 00 00       	push   $0xf800
  103f3b:	6a 00                	push   $0x0
  103f3d:	e8 bc fe ff ff       	call   103dfe <pci_read>
  103f42:	83 c4 10             	add    $0x10,%esp
			pci_ctrl_addr,
			sizeof(pci_data),
			&pci_data);

	if (pci_data == 0xffffffff) {
  103f45:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
  103f49:	75 08                	jne    103f53 <pci_legacy_bridge_detect+0x2d>
		return -1;
  103f4b:	83 c8 ff             	or     $0xffffffff,%eax
  103f4e:	e9 05 01 00 00       	jmp    104058 <pci_legacy_bridge_detect+0x132>
	}

	/* get the PCI header from the device */
	pci_header_get(DEFAULT_PCI_CONTROLLER,
  103f53:	68 00 9e 10 00       	push   $0x109e00
  103f58:	68 00 f8 00 00       	push   $0xf800
  103f5d:	6a 00                	push   $0x0
  103f5f:	e8 74 ff ff ff       	call   103ed8 <pci_header_get>
  103f64:	83 c4 0c             	add    $0xc,%esp
		       pci_ctrl_addr,
		       &pci_dev_header);

	if (pci_dev_header.field.vendor_id != CONFIG_PCI_LEGACY_BRIDGE_VENDOR_ID ||
  103f67:	81 3d 00 9e 10 00 86 	cmpl   $0x95e8086,0x109e00
  103f6e:	80 5e 09 
  103f71:	75 d8                	jne    103f4b <pci_legacy_bridge_detect+0x25>
	}

	pci_ctrl_addr.field.reg = PCI_LEGACY_BRIDGE_REG;

	/* read RCBA PCI register */
	pci_read(DEFAULT_PCI_CONTROLLER,
  103f73:	8d 45 f0             	lea    -0x10(%ebp),%eax
  103f76:	50                   	push   %eax
  103f77:	6a 04                	push   $0x4
  103f79:	68 f0 f8 00 00       	push   $0xf8f0
  103f7e:	6a 00                	push   $0x0
  103f80:	e8 79 fe ff ff       	call   103dfe <pci_read>
  103f85:	83 c4 10             	add    $0x10,%esp
	pci_read(DEFAULT_PCI_CONTROLLER,
  103f88:	8d 45 f8             	lea    -0x8(%ebp),%eax
  103f8b:	50                   	push   %eax
  103f8c:	6a 04                	push   $0x4
  103f8e:	68 f0 f8 00 00       	push   $0xf8f0
  103f93:	6a 00                	push   $0x0
  103f95:	e8 64 fe ff ff       	call   103dfe <pci_read>
  103f9a:	83 c4 10             	add    $0x10,%esp
	pci_write(DEFAULT_PCI_CONTROLLER,
  103f9d:	6a ff                	push   $0xffffffff
  103f9f:	6a 04                	push   $0x4
  103fa1:	68 f0 f8 00 00       	push   $0xf8f0
  103fa6:	6a 00                	push   $0x0
  103fa8:	e8 c1 fe ff ff       	call   103e6e <pci_write>
  103fad:	83 c4 10             	add    $0x10,%esp
	pci_read(DEFAULT_PCI_CONTROLLER,
  103fb0:	8d 45 f4             	lea    -0xc(%ebp),%eax
  103fb3:	50                   	push   %eax
  103fb4:	6a 04                	push   $0x4
  103fb6:	68 f0 f8 00 00       	push   $0xf8f0
  103fbb:	6a 00                	push   $0x0
  103fbd:	e8 3c fe ff ff       	call   103dfe <pci_read>
  103fc2:	83 c4 10             	add    $0x10,%esp
	pci_write(DEFAULT_PCI_CONTROLLER,
  103fc5:	ff 75 f8             	pushl  -0x8(%ebp)
  103fc8:	6a 04                	push   $0x4
  103fca:	68 f0 f8 00 00       	push   $0xf8f0
  103fcf:	6a 00                	push   $0x0
  103fd1:	e8 98 fe ff ff       	call   103e6e <pci_write>
	if (*mask != 0xffffffff && *mask != 0) {
  103fd6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
	pci_write(DEFAULT_PCI_CONTROLLER,
  103fd9:	83 c4 10             	add    $0x10,%esp
			pci_ctrl_addr,
			sizeof(rcba),
			&rcba);

	if (pci_rcba_mask_get(pci_ctrl_addr, &rcba_mask) != 0) {
		return -1;
  103fdc:	83 c8 ff             	or     $0xffffffff,%eax
	if (*mask != 0xffffffff && *mask != 0) {
  103fdf:	8d 51 ff             	lea    -0x1(%ecx),%edx
  103fe2:	83 fa fd             	cmp    $0xfffffffd,%edx
  103fe5:	77 71                	ja     104058 <pci_legacy_bridge_detect+0x132>
		*mask &= ~0x01;
  103fe7:	83 e1 fe             	and    $0xfffffffe,%ecx
	}

	dev_info->addr = rcba & rcba_mask;
  103fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fed:	21 c8                	and    %ecx,%eax
  103fef:	89 03                	mov    %eax,(%ebx)
	if (dev_info->addr != 0) {
  103ff1:	85 c0                	test   %eax,%eax
  103ff3:	74 14                	je     104009 <pci_legacy_bridge_detect+0xe3>
	__asm__ volatile (
  103ff5:	0f bc c9             	bsf    %ecx,%ecx
  103ff8:	75 05                	jne    103fff <pci_legacy_bridge_detect+0xd9>
  103ffa:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
		/* calculate the size of the root complex memory required */
		dev_info->size = 1 << (find_lsb_set(rcba_mask) - 1);
  103fff:	b8 01 00 00 00       	mov    $0x1,%eax
  104004:	d3 e0                	shl    %cl,%eax
  104006:	89 43 04             	mov    %eax,0x4(%ebx)
	}

	dev_info->irq = -1;
	dev_info->bus = CONFIG_PCI_LEGACY_BRIDGE_BUS;
	dev_info->dev = CONFIG_PCI_LEGACY_BRIDGE_DEV;
  104009:	80 4b 0d 1f          	orb    $0x1f,0xd(%ebx)
	dev_info->bus = CONFIG_PCI_LEGACY_BRIDGE_BUS;
  10400d:	c6 43 0c 00          	movb   $0x0,0xc(%ebx)
	dev_info->irq = -1;
  104011:	c7 43 08 ff ff ff ff 	movl   $0xffffffff,0x8(%ebx)
	dev_info->function = 0;
  104018:	81 63 0c ff 1f fe ff 	andl   $0xfffe1fff,0xc(%ebx)
	dev_info->mem_type = BAR_SPACE_MEM;
  10401f:	80 63 0e fd          	andb   $0xfd,0xe(%ebx)
	dev_info->class_type = pci_dev_header.field.class;
  104023:	0f b6 05 0b 9e 10 00 	movzbl 0x109e0b,%eax
  10402a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  104031:	66 8b 43 0e          	mov    0xe(%ebx),%ax
  104035:	66 25 03 fc          	and    $0xfc03,%ax
  104039:	09 d0                	or     %edx,%eax
  10403b:	66 89 43 0e          	mov    %ax,0xe(%ebx)
	dev_info->bar = 0;
  10403f:	80 63 0f e3          	andb   $0xe3,0xf(%ebx)
	dev_info->vendor_id = pci_dev_header.field.vendor_id;
  104043:	a1 00 9e 10 00       	mov    0x109e00,%eax
  104048:	66 89 43 10          	mov    %ax,0x10(%ebx)
	dev_info->device_id = pci_dev_header.field.device_id;
  10404c:	66 a1 02 9e 10 00    	mov    0x109e02,%ax
  104052:	66 89 43 12          	mov    %ax,0x12(%ebx)

	return 0;
  104056:	31 c0                	xor    %eax,%eax
}
  104058:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10405b:	c9                   	leave  
  10405c:	c3                   	ret    

0010405d <pci_legacy_bridge_configure>:
 */
void pci_legacy_bridge_configure(struct pci_dev_info *dev_info,
				 int io_block_num,
				 int pci_interrupt_pin,
				 int irq_number)
{
  10405d:	55                   	push   %ebp
  10405e:	89 e5                	mov    %esp,%ebp
  104060:	57                   	push   %edi
  104061:	56                   	push   %esi
  104062:	53                   	push   %ebx
	u32_t addr = (io_block_num == 0) ? PCI_ADDR_IRQAGENT1 :
  104063:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
	 *            0-7, which corresponds IRQ 16 - IRQ 23
	 * Bits 11:8  indicates which IRQ is used for INTC.
	 * Bits 7:4   indicates which IRQ is used for INTB.
	 * Bits 3:0   indicates which IRQ is used for INTA.
	 */
	int offset = (pci_interrupt_pin - 1) * 4;
  104067:	8b 45 10             	mov    0x10(%ebp),%eax
{
  10406a:	8b 75 08             	mov    0x8(%ebp),%esi
	u32_t addr = (io_block_num == 0) ? PCI_ADDR_IRQAGENT1 :
  10406d:	19 d2                	sbb    %edx,%edx
  10406f:	83 e2 fc             	and    $0xfffffffc,%edx
	int offset = (pci_interrupt_pin - 1) * 4;
  104072:	8d 0c 85 fc ff ff ff 	lea    -0x4(,%eax,4),%ecx
	u32_t addr = (io_block_num == 0) ? PCI_ADDR_IRQAGENT1 :
  104079:	81 c2 46 31 00 00    	add    $0x3146,%edx
	u16_t irq_routing = sys_read16(dev_info->addr + addr);
  10407f:	8b 06                	mov    (%esi),%eax
  104081:	01 d0                	add    %edx,%eax
	__asm__ volatile("movw	%1, %0;\n\t"
  104083:	66 8b 38             	mov    (%eax),%di

	irq_routing &= ~(0x0f << offset);
  104086:	bb 0f 00 00 00       	mov    $0xf,%ebx
	irq_routing |= (irq_number - NUM_STD_IRQS) << offset;
	sys_write16(irq_routing, dev_info->addr + addr);
  10408b:	03 16                	add    (%esi),%edx
	irq_routing &= ~(0x0f << offset);
  10408d:	89 d8                	mov    %ebx,%eax
  10408f:	d3 e0                	shl    %cl,%eax
  104091:	f7 d0                	not    %eax
  104093:	21 f8                	and    %edi,%eax
	irq_routing |= (irq_number - NUM_STD_IRQS) << offset;
  104095:	8b 7d 14             	mov    0x14(%ebp),%edi
  104098:	8d 5f f0             	lea    -0x10(%edi),%ebx
  10409b:	d3 e3                	shl    %cl,%ebx
  10409d:	09 c3                	or     %eax,%ebx
	__asm__ volatile("movw	%0, %1;\n\t"
  10409f:	66 89 1a             	mov    %bx,(%edx)
}
  1040a2:	5b                   	pop    %ebx
  1040a3:	5e                   	pop    %esi
  1040a4:	5f                   	pop    %edi
  1040a5:	5d                   	pop    %ebp
  1040a6:	c3                   	ret    

001040a7 <pwm_pca9685_pin_set_cycles>:
 * period_count is always taken as 4095. To control the on period send
 * value to pulse_count
 */
static int pwm_pca9685_pin_set_cycles(struct device *dev, u32_t pwm,
				      u32_t period_count, u32_t pulse_count)
{
  1040a7:	55                   	push   %ebp
		dev->config->config_info;
	struct pwm_pca9685_drv_data * const drv_data =
		(struct pwm_pca9685_drv_data * const)dev->driver_data;
	struct device * const i2c_master = drv_data->i2c_master;
	u16_t i2c_addr = config->i2c_slave_addr;
	u8_t buf[] = { 0, 0, 0, 0, 0};
  1040a8:	b9 05 00 00 00       	mov    $0x5,%ecx
{
  1040ad:	89 e5                	mov    %esp,%ebp
  1040af:	57                   	push   %edi
  1040b0:	56                   	push   %esi
  1040b1:	53                   	push   %ebx
  1040b2:	83 ec 18             	sub    $0x18,%esp
	u8_t buf[] = { 0, 0, 0, 0, 0};
  1040b5:	8d 7d e3             	lea    -0x1d(%ebp),%edi
{
  1040b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1040bb:	8b 75 14             	mov    0x14(%ebp),%esi
	struct pwm_pca9685_drv_data * const drv_data =
  1040be:	8b 50 08             	mov    0x8(%eax),%edx
	const struct pwm_pca9685_config * const config =
  1040c1:	8b 00                	mov    (%eax),%eax
	u16_t i2c_addr = config->i2c_slave_addr;
  1040c3:	8b 40 08             	mov    0x8(%eax),%eax
	struct device * const i2c_master = drv_data->i2c_master;
  1040c6:	8b 1a                	mov    (%edx),%ebx
	u16_t i2c_addr = config->i2c_slave_addr;
  1040c8:	8b 40 04             	mov    0x4(%eax),%eax
  1040cb:	66 89 45 de          	mov    %ax,-0x22(%ebp)
	u8_t buf[] = { 0, 0, 0, 0, 0};
  1040cf:	31 c0                	xor    %eax,%eax
  1040d1:	f3 aa                	rep stos %al,%es:(%edi)

	if (!_has_i2c_master(dev)) {
		return -EINVAL;
	}

	if (pwm > MAX_PWM_OUT) {
  1040d3:	83 3a 00             	cmpl   $0x0,(%edx)
  1040d6:	74 7b                	je     104153 <pwm_pca9685_pin_set_cycles+0xac>
  1040d8:	83 7d 0c 10          	cmpl   $0x10,0xc(%ebp)
  1040dc:	77 75                	ja     104153 <pwm_pca9685_pin_set_cycles+0xac>
		return -EINVAL;
	}
	buf[0] = REG_LED_ON_L(pwm);
  1040de:	8a 45 0c             	mov    0xc(%ebp),%al
  1040e1:	ba 06 00 00 00       	mov    $0x6,%edx

	/* If either pulse_count > max ticks, treat PWM as 100%.
	 * If pulse_count value == 0, treat it as 0%.
	 * Otherwise, populate registers accordingly.
	 */
	if (pulse_count >= PWM_ONE_PERIOD_TICKS) {  // Always High
  1040e6:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
	buf[0] = REG_LED_ON_L(pwm);
  1040ec:	8d 04 82             	lea    (%edx,%eax,4),%eax
  1040ef:	88 45 e3             	mov    %al,-0x1d(%ebp)
	if (pulse_count >= PWM_ONE_PERIOD_TICKS) {  // Always High
  1040f2:	76 06                	jbe    1040fa <pwm_pca9685_pin_set_cycles+0x53>
		buf[1] = 0x0;
		buf[2] = (1 << 4);
  1040f4:	c6 45 e5 10          	movb   $0x10,-0x1b(%ebp)
  1040f8:	eb 31                	jmp    10412b <pwm_pca9685_pin_set_cycles+0x84>
		buf[3] = 0x0;
		buf[4] = 0x0;
	} else if (pulse_count == 0) {	// always LOW
  1040fa:	85 f6                	test   %esi,%esi
  1040fc:	75 06                	jne    104104 <pwm_pca9685_pin_set_cycles+0x5d>
		buf[1] = 0x0;
		buf[2] = 0x0;
		buf[3] = 0x0;
		buf[4] = (1 << 4);
  1040fe:	c6 45 e7 10          	movb   $0x10,-0x19(%ebp)
  104102:	eb 27                	jmp    10412b <pwm_pca9685_pin_set_cycles+0x84>
	} else if (pulse_count==period_count) {	
  104104:	3b 75 10             	cmp    0x10(%ebp),%esi
  104107:	74 eb                	je     1040f4 <pwm_pca9685_pin_set_cycles+0x4d>
		buf[1] = 0x0;
		buf[2] = (1 << 4);		// always HIGH
		buf[3] = 0x0;
		buf[4] = 0x0;
	} else { 	// on and off ticks
		buf[1] = (period_count & 0xFF);
  104109:	8a 45 10             	mov    0x10(%ebp),%al
  10410c:	88 45 e4             	mov    %al,-0x1c(%ebp)
		buf[2] = ((period_count >> 8) & 0x0F);
  10410f:	8b 45 10             	mov    0x10(%ebp),%eax
  104112:	c1 e8 08             	shr    $0x8,%eax
  104115:	83 e0 0f             	and    $0xf,%eax
  104118:	88 45 e5             	mov    %al,-0x1b(%ebp)
		buf[3] = (pulse_count & 0xFF);
  10411b:	89 f0                	mov    %esi,%eax
		buf[4] = ((pulse_count >> 8) & 0x0F);
  10411d:	c1 ee 08             	shr    $0x8,%esi
		buf[3] = (pulse_count & 0xFF);
  104120:	88 45 e6             	mov    %al,-0x1a(%ebp)
		buf[4] = ((pulse_count >> 8) & 0x0F);
  104123:	89 f0                	mov    %esi,%eax
  104125:	83 e0 0f             	and    $0xf,%eax
  104128:	88 45 e7             	mov    %al,-0x19(%ebp)
	msg.buf = buf;
  10412b:	8d 45 e3             	lea    -0x1d(%ebp),%eax
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
  10412e:	c6 45 f0 02          	movb   $0x2,-0x10(%ebp)
	msg.buf = buf;
  104132:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  104135:	8b 53 04             	mov    0x4(%ebx),%edx
	}

//	printk("send I2c msg: %x %x %x %x %x -- i2c_addr %x\n", buf[0], buf[1], buf[2], buf[3], buf[4], i2c_addr);

	return i2c_write(i2c_master, buf, sizeof(buf), i2c_addr);
  104138:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
  10413c:	50                   	push   %eax
  10413d:	8d 45 e8             	lea    -0x18(%ebp),%eax
  104140:	6a 01                	push   $0x1
	msg.len = num_bytes;
  104142:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  104149:	50                   	push   %eax
  10414a:	53                   	push   %ebx
  10414b:	ff 52 04             	call   *0x4(%edx)
  10414e:	83 c4 10             	add    $0x10,%esp
  104151:	eb 05                	jmp    104158 <pwm_pca9685_pin_set_cycles+0xb1>
		return -EINVAL;
  104153:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
  104158:	8d 65 f4             	lea    -0xc(%ebp),%esp
  10415b:	5b                   	pop    %ebx
  10415c:	5e                   	pop    %esi
  10415d:	5f                   	pop    %edi
  10415e:	5d                   	pop    %ebp
  10415f:	c3                   	ret    

00104160 <pwm_pca9685_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
int pwm_pca9685_init(struct device *dev)
{
  104160:	55                   	push   %ebp
  104161:	89 e5                	mov    %esp,%ebp
  104163:	57                   	push   %edi
  104164:	56                   	push   %esi
  104165:	53                   	push   %ebx
  104166:	83 ec 10             	sub    $0x10,%esp
	const struct pwm_pca9685_config * const config =
		dev->config->config_info;
	struct pwm_pca9685_drv_data * const drv_data =
		(struct pwm_pca9685_drv_data * const)dev->driver_data;
	struct device *i2c_master;
	u8_t buf[] = {0, 0};
  104169:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
{
  10416d:	8b 5d 08             	mov    0x8(%ebp),%ebx
	u8_t buf[] = {0, 0};
  104170:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
	const struct pwm_pca9685_config * const config =
  104174:	8b 03                	mov    (%ebx),%eax
	struct pwm_pca9685_drv_data * const drv_data =
  104176:	8b 7b 08             	mov    0x8(%ebx),%edi
	const struct pwm_pca9685_config * const config =
  104179:	8b 70 08             	mov    0x8(%eax),%esi
	int ret;

	/* Find out the device struct of the I2C master */
	i2c_master = device_get_binding((char *)config->i2c_master_dev_name);
  10417c:	ff 36                	pushl  (%esi)
  10417e:	e8 df 0e 00 00       	call   105062 <device_get_binding>
  104183:	5a                   	pop    %edx
  104184:	89 c2                	mov    %eax,%edx
	if (!i2c_master) {
		return -EINVAL;
  104186:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (!i2c_master) {
  10418b:	85 d2                	test   %edx,%edx
  10418d:	74 40                	je     1041cf <pwm_pca9685_init+0x6f>
	}
	drv_data->i2c_master = i2c_master;
  10418f:	89 17                	mov    %edx,(%edi)
	msg.buf = buf;
  104191:	8d 45 e6             	lea    -0x1a(%ebp),%eax
	/* MODE1 register */

	buf[0] = REG_MODE1;
	buf[1] = (1 << 5); /* register addr auto increment */

	ret = i2c_write(i2c_master, buf, 2, config->i2c_slave_addr);
  104194:	0f b7 4e 04          	movzwl 0x4(%esi),%ecx
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
  104198:	c6 45 f0 02          	movb   $0x2,-0x10(%ebp)
	msg.buf = buf;
  10419c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  10419f:	8b 42 04             	mov    0x4(%edx),%eax
	buf[0] = REG_MODE1;
  1041a2:	c6 45 e6 00          	movb   $0x0,-0x1a(%ebp)
  1041a6:	51                   	push   %ecx
	buf[1] = (1 << 5); /* register addr auto increment */
  1041a7:	c6 45 e7 20          	movb   $0x20,-0x19(%ebp)
  1041ab:	8d 4d e8             	lea    -0x18(%ebp),%ecx
	msg.len = num_bytes;
  1041ae:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	return api->transfer(dev, msgs, num_msgs, addr);
  1041b5:	6a 01                	push   $0x1
  1041b7:	51                   	push   %ecx
  1041b8:	52                   	push   %edx
  1041b9:	ff 50 04             	call   *0x4(%eax)
  1041bc:	83 c4 10             	add    $0x10,%esp
	if (ret != 0) {
  1041bf:	85 c0                	test   %eax,%eax
  1041c1:	75 09                	jne    1041cc <pwm_pca9685_init+0x6c>
		return -EPERM;
	}

	dev->driver_api = &pwm_pca9685_drv_api_funcs;
  1041c3:	c7 43 04 cc 6b 10 00 	movl   $0x106bcc,0x4(%ebx)

	return 0;
  1041ca:	eb 03                	jmp    1041cf <pwm_pca9685_init+0x6f>
		return -EPERM;
  1041cc:	83 c8 ff             	or     $0xffffffff,%eax
}
  1041cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1041d2:	5b                   	pop    %ebx
  1041d3:	5e                   	pop    %esi
  1041d4:	5f                   	pop    %edi
  1041d5:	5d                   	pop    %ebp
  1041d6:	c3                   	ret    

001041d7 <pinmux_pin_set>:

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE3(K_SYSCALL_PINMUX_PIN_SET, pinmux_pin_set, int, struct device *, dev, u32_t, pin, u32_t, func);
  1041d7:	55                   	push   %ebp
  1041d8:	89 e5                	mov    %esp,%ebp
  1041da:	53                   	push   %ebx
static inline int _impl_pinmux_pin_set(struct device *dev, u32_t pin,
				       u32_t func)
{
	const struct pinmux_driver_api *api = dev->driver_api;

	return api->set(dev, pin, func);
  1041db:	8b 58 04             	mov    0x4(%eax),%ebx
  1041de:	51                   	push   %ecx
  1041df:	52                   	push   %edx
  1041e0:	50                   	push   %eax
  1041e1:	ff 13                	call   *(%ebx)
  1041e3:	83 c4 0c             	add    $0xc,%esp
  1041e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1041e9:	c9                   	leave  
  1041ea:	c3                   	ret    

001041eb <hcsr04_channel_get>:
	return 0;
}


static int hcsr04_channel_get(struct device *dev, enum sensor_channel chan, struct sensor_value *val)
{
  1041eb:	55                   	push   %ebp
  1041ec:	89 e5                	mov    %esp,%ebp
	struct hcsr04_data *drv_data = dev->driver_data;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL || chan == SENSOR_CHAN_DISTANCE);
	val->val1 = drv_data->cm;
  1041ee:	8b 55 08             	mov    0x8(%ebp),%edx
{
  1041f1:	8b 45 10             	mov    0x10(%ebp),%eax
	val->val1 = drv_data->cm;
  1041f4:	8b 52 08             	mov    0x8(%edx),%edx
  1041f7:	8b 52 20             	mov    0x20(%edx),%edx
	val->val2 = 0;
  1041fa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	val->val1 = drv_data->cm;
  104201:	89 10                	mov    %edx,(%eax)
	return 0;
}
  104203:	31 c0                	xor    %eax,%eax
  104205:	5d                   	pop    %ebp
  104206:	c3                   	ret    

00104207 <gpio_pin_write>:
{
  104207:	55                   	push   %ebp
  104208:	89 e5                	mov    %esp,%ebp
  10420a:	53                   	push   %ebx
	return api->write(port, access_op, pin, value);
  10420b:	8b 58 04             	mov    0x4(%eax),%ebx
  10420e:	51                   	push   %ecx
  10420f:	52                   	push   %edx
  104210:	6a 00                	push   $0x0
  104212:	50                   	push   %eax
  104213:	ff 53 04             	call   *0x4(%ebx)
  104216:	83 c4 10             	add    $0x10,%esp
}
  104219:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10421c:	c9                   	leave  
  10421d:	c3                   	ret    

0010421e <hcsr04_sample_fetch>:
{
  10421e:	55                   	push   %ebp
  10421f:	89 e5                	mov    %esp,%ebp
  104221:	56                   	push   %esi
  104222:	53                   	push   %ebx
  104223:	8b 45 08             	mov    0x8(%ebp),%eax
	struct hcsr04_data *drv_data = dev->driver_data;
  104226:	8b 58 08             	mov    0x8(%eax),%ebx
	struct hcsr_pin *drv_pin = dev->config->config_info;
  104229:	8b 00                	mov    (%eax),%eax
  10422b:	8b 70 08             	mov    0x8(%eax),%esi
	gpio_pin_enable_callback(drv_data->input_pin_gpio_device, drv_pin->GPIO_PIN_ECHO);
  10422e:	8b 43 08             	mov    0x8(%ebx),%eax
	return api->enable_callback(port, access_op, pin);
  104231:	8b 50 04             	mov    0x4(%eax),%edx
  104234:	ff 76 0c             	pushl  0xc(%esi)
  104237:	6a 00                	push   $0x0
  104239:	50                   	push   %eax
  10423a:	ff 52 10             	call   *0x10(%edx)
  10423d:	83 c4 0c             	add    $0xc,%esp
	gpio_pin_write(drv_data->output_pin_gpio_device, drv_pin->GPIO_PIN_TRIGGER,1);
  104240:	8b 56 04             	mov    0x4(%esi),%edx
  104243:	b9 01 00 00 00       	mov    $0x1,%ecx
  104248:	8b 43 0c             	mov    0xc(%ebx),%eax
  10424b:	e8 b7 ff ff ff       	call   104207 <gpio_pin_write>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
  104250:	6a 01                	push   $0x1
  104252:	e8 17 15 00 00       	call   10576e <_impl_k_sleep>
  104257:	58                   	pop    %eax
	gpio_pin_write(drv_data->output_pin_gpio_device, drv_pin->GPIO_PIN_TRIGGER,0);
  104258:	8b 56 04             	mov    0x4(%esi),%edx
  10425b:	8b 43 0c             	mov    0xc(%ebx),%eax
  10425e:	31 c9                	xor    %ecx,%ecx
  104260:	e8 a2 ff ff ff       	call   104207 <gpio_pin_write>
  104265:	6a 01                	push   $0x1
  104267:	e8 02 15 00 00       	call   10576e <_impl_k_sleep>
  10426c:	5a                   	pop    %edx
}
  10426d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  104270:	31 c0                	xor    %eax,%eax
  104272:	5b                   	pop    %ebx
  104273:	5e                   	pop    %esi
  104274:	5d                   	pop    %ebp
  104275:	c3                   	ret    

00104276 <gpio_pin_configure>:
{
  104276:	55                   	push   %ebp
  104277:	89 e5                	mov    %esp,%ebp
  104279:	53                   	push   %ebx
	return api->config(port, access_op, pin, flags);
  10427a:	8b 58 04             	mov    0x4(%eax),%ebx
  10427d:	51                   	push   %ecx
  10427e:	52                   	push   %edx
  10427f:	6a 00                	push   $0x0
  104281:	50                   	push   %eax
  104282:	ff 13                	call   *(%ebx)
  104284:	83 c4 10             	add    $0x10,%esp
}
  104287:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10428a:	c9                   	leave  
  10428b:	c3                   	ret    

0010428c <hcsr04_init>:
	.sample_fetch = hcsr04_sample_fetch,
	.channel_get = hcsr04_channel_get,
};

static int hcsr04_init(struct device *dev)
{
  10428c:	55                   	push   %ebp
  10428d:	89 e5                	mov    %esp,%ebp
  10428f:	57                   	push   %edi
  104290:	56                   	push   %esi
  104291:	53                   	push   %ebx
  104292:	8b 7d 08             	mov    0x8(%ebp),%edi
	printk("HCSR INIT STARTED\n");
  104295:	68 d4 6b 10 00       	push   $0x106bd4
  10429a:	e8 76 ca ff ff       	call   100d15 <printk>
  10429f:	5b                   	pop    %ebx
	struct hcsr04_data *drv_data = dev->driver_data;
	struct hcsr_pin  *drv_pin = dev->config->config_info;
  1042a0:	8b 07                	mov    (%edi),%eax
	struct hcsr04_data *drv_data = dev->driver_data;
  1042a2:	8b 5f 08             	mov    0x8(%edi),%ebx
	struct hcsr_pin  *drv_pin = dev->config->config_info;
  1042a5:	8b 70 08             	mov    0x8(%eax),%esi
	drv_data->dev_original = dev;
  1042a8:	89 3b                	mov    %edi,(%ebx)

printk("S: %d %d %d %d\n", drv_pin->PINMUX_PIN_TRIGGER, drv_pin->GPIO_PIN_TRIGGER, drv_pin->PINMUX_PIN_ECHO, drv_pin->GPIO_PIN_ECHO);
  1042aa:	ff 76 0c             	pushl  0xc(%esi)
  1042ad:	ff 76 08             	pushl  0x8(%esi)
  1042b0:	ff 76 04             	pushl  0x4(%esi)
  1042b3:	ff 36                	pushl  (%esi)
  1042b5:	68 e7 6b 10 00       	push   $0x106be7
  1042ba:	e8 56 ca ff ff       	call   100d15 <printk>
  1042bf:	83 c4 14             	add    $0x14,%esp
//################################################################
	//IO10 -- Output pin -> ECHO PIN
	drv_data->input_gpio_pinmux = device_get_binding(CONFIG_PINMUX_NAME);
  1042c2:	68 f7 6b 10 00       	push   $0x106bf7
  1042c7:	e8 96 0d 00 00       	call   105062 <device_get_binding>
  1042cc:	5f                   	pop    %edi
	pinmux_pin_set(drv_data->input_gpio_pinmux, drv_pin->PINMUX_PIN_ECHO, PINMUX_FUNC_A);
  1042cd:	31 c9                	xor    %ecx,%ecx
  1042cf:	8b 56 08             	mov    0x8(%esi),%edx
	drv_data->input_gpio_pinmux = device_get_binding(CONFIG_PINMUX_NAME);
  1042d2:	89 43 04             	mov    %eax,0x4(%ebx)
	pinmux_pin_set(drv_data->input_gpio_pinmux, drv_pin->PINMUX_PIN_ECHO, PINMUX_FUNC_A);
  1042d5:	e8 fd fe ff ff       	call   1041d7 <pinmux_pin_set>
	drv_data->input_pin_gpio_device = device_get_binding(CONFIG_GPIO_DW_0_NAME);
  1042da:	68 eb 6a 10 00       	push   $0x106aeb
  1042df:	e8 7e 0d 00 00       	call   105062 <device_get_binding>
  1042e4:	5a                   	pop    %edx
	gpio_pin_configure(drv_data->input_pin_gpio_device, drv_pin->GPIO_PIN_ECHO, GPIO_DIR_OUT);
  1042e5:	b9 01 00 00 00       	mov    $0x1,%ecx
  1042ea:	8b 56 0c             	mov    0xc(%esi),%edx
	drv_data->input_pin_gpio_device = device_get_binding(CONFIG_GPIO_DW_0_NAME);
  1042ed:	89 43 08             	mov    %eax,0x8(%ebx)
	gpio_pin_configure(drv_data->input_pin_gpio_device, drv_pin->GPIO_PIN_ECHO, GPIO_DIR_OUT);
  1042f0:	e8 81 ff ff ff       	call   104276 <gpio_pin_configure>
    //setting 0
    if(gpio_pin_write(drv_data->input_pin_gpio_device, drv_pin->GPIO_PIN_ECHO, 0))
  1042f5:	31 c9                	xor    %ecx,%ecx
  1042f7:	8b 56 0c             	mov    0xc(%esi),%edx
  1042fa:	8b 43 08             	mov    0x8(%ebx),%eax
  1042fd:	e8 05 ff ff ff       	call   104207 <gpio_pin_write>
  104302:	85 c0                	test   %eax,%eax
  104304:	74 0b                	je     104311 <hcsr04_init+0x85>
    {printk("Output Failed");}
  104306:	68 fe 6b 10 00       	push   $0x106bfe
  10430b:	e8 05 ca ff ff       	call   100d15 <printk>
  104310:	59                   	pop    %ecx


    //IO10 -- Input pin -> ECHO PIN
    drv_data->input_gpio_pinmux = device_get_binding(CONFIG_PINMUX_NAME);
  104311:	68 f7 6b 10 00       	push   $0x106bf7
  104316:	e8 47 0d 00 00       	call   105062 <device_get_binding>
  10431b:	59                   	pop    %ecx
    pinmux_pin_set(drv_data->input_gpio_pinmux, drv_pin->PINMUX_PIN_ECHO, PINMUX_FUNC_B);
  10431c:	8b 56 08             	mov    0x8(%esi),%edx
  10431f:	b9 01 00 00 00       	mov    $0x1,%ecx
    drv_data->input_gpio_pinmux = device_get_binding(CONFIG_PINMUX_NAME);
  104324:	89 43 04             	mov    %eax,0x4(%ebx)
    pinmux_pin_set(drv_data->input_gpio_pinmux, drv_pin->PINMUX_PIN_ECHO, PINMUX_FUNC_B);
  104327:	e8 ab fe ff ff       	call   1041d7 <pinmux_pin_set>
    drv_data->input_pin_gpio_device = device_get_binding(CONFIG_GPIO_DW_0_NAME);
  10432c:	68 eb 6a 10 00       	push   $0x106aeb
  104331:	e8 2c 0d 00 00       	call   105062 <device_get_binding>
  104336:	5f                   	pop    %edi
    gpio_pin_configure(drv_data->input_pin_gpio_device, drv_pin->GPIO_PIN_ECHO, GPIO_DIR_IN | GPIO_INT | EDGE);
  104337:	8b 56 0c             	mov    0xc(%esi),%edx
  10433a:	b9 36 00 00 00       	mov    $0x36,%ecx
    drv_data->input_pin_gpio_device = device_get_binding(CONFIG_GPIO_DW_0_NAME);
  10433f:	89 43 08             	mov    %eax,0x8(%ebx)
    gpio_pin_configure(drv_data->input_pin_gpio_device, drv_pin->GPIO_PIN_ECHO, GPIO_DIR_IN | GPIO_INT | EDGE);
  104342:	e8 2f ff ff ff       	call   104276 <gpio_pin_configure>
    gpio_init_callback(&(drv_data->input_pin_callback), callback_function_hcsr, BIT(drv_pin->GPIO_PIN_ECHO));
  104347:	8b 4e 0c             	mov    0xc(%esi),%ecx
  10434a:	b8 01 00 00 00       	mov    $0x1,%eax
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
  10434f:	c7 43 18 d5 43 10 00 	movl   $0x1043d5,0x18(%ebx)
  104356:	d3 e0                	shl    %cl,%eax
	callback->pin_mask = pin_mask;
  104358:	89 43 1c             	mov    %eax,0x1c(%ebx)
    gpio_add_callback(drv_data->input_pin_gpio_device, &(drv_data->input_pin_callback));
  10435b:	8b 43 08             	mov    0x8(%ebx),%eax
    gpio_init_callback(&(drv_data->input_pin_callback), callback_function_hcsr, BIT(drv_pin->GPIO_PIN_ECHO));
  10435e:	8d 4b 14             	lea    0x14(%ebx),%ecx
{
	const struct gpio_driver_api *api = port->driver_api;

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
  104361:	8b 50 04             	mov    0x4(%eax),%edx
  104364:	6a 01                	push   $0x1
  104366:	51                   	push   %ecx
  104367:	50                   	push   %eax
  104368:	ff 52 0c             	call   *0xc(%edx)
  10436b:	83 c4 0c             	add    $0xc,%esp
    //gpio_pin_enable_callback(drv_data->input_pin_gpio_device, 2);

    //IO3 -- Output pin -> TRIGGER PIN
    drv_data->output_pin_gpio_device = device_get_binding(CONFIG_GPIO_DW_0_NAME);
  10436e:	68 eb 6a 10 00       	push   $0x106aeb
  104373:	e8 ea 0c 00 00       	call   105062 <device_get_binding>
  104378:	89 43 0c             	mov    %eax,0xc(%ebx)
    drv_data->output_pin_gpio_pinmux = device_get_binding(CONFIG_PINMUX_NAME);
  10437b:	c7 04 24 f7 6b 10 00 	movl   $0x106bf7,(%esp)
  104382:	e8 db 0c 00 00       	call   105062 <device_get_binding>
  104387:	5a                   	pop    %edx
    pinmux_pin_set(drv_data->output_pin_gpio_pinmux, drv_pin->PINMUX_PIN_TRIGGER, PINMUX_FUNC_A);
  104388:	31 c9                	xor    %ecx,%ecx
  10438a:	8b 16                	mov    (%esi),%edx
    drv_data->output_pin_gpio_pinmux = device_get_binding(CONFIG_PINMUX_NAME);
  10438c:	89 43 10             	mov    %eax,0x10(%ebx)
    pinmux_pin_set(drv_data->output_pin_gpio_pinmux, drv_pin->PINMUX_PIN_TRIGGER, PINMUX_FUNC_A);
  10438f:	e8 43 fe ff ff       	call   1041d7 <pinmux_pin_set>
    gpio_pin_configure(drv_data->output_pin_gpio_device, drv_pin->GPIO_PIN_TRIGGER, GPIO_DIR_OUT);
  104394:	8b 56 04             	mov    0x4(%esi),%edx
  104397:	b9 01 00 00 00       	mov    $0x1,%ecx
  10439c:	8b 43 0c             	mov    0xc(%ebx),%eax
  10439f:	e8 d2 fe ff ff       	call   104276 <gpio_pin_configure>
    
    //IO3 -- Setting as 0
    if(gpio_pin_write(drv_data->output_pin_gpio_device, drv_pin->GPIO_PIN_TRIGGER, 0))
  1043a4:	31 c9                	xor    %ecx,%ecx
  1043a6:	8b 56 04             	mov    0x4(%esi),%edx
  1043a9:	8b 43 0c             	mov    0xc(%ebx),%eax
  1043ac:	e8 56 fe ff ff       	call   104207 <gpio_pin_write>
  1043b1:	85 c0                	test   %eax,%eax
  1043b3:	74 0b                	je     1043c0 <hcsr04_init+0x134>
    {printk("Output Failed");}
  1043b5:	68 fe 6b 10 00       	push   $0x106bfe
  1043ba:	e8 56 c9 ff ff       	call   100d15 <printk>
  1043bf:	5a                   	pop    %edx


//#########################################################################
	printk("HCSR INIT COMPLETE\n");
  1043c0:	68 0c 6c 10 00       	push   $0x106c0c
  1043c5:	e8 4b c9 ff ff       	call   100d15 <printk>
  1043ca:	58                   	pop    %eax
	return 0;
}
  1043cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1043ce:	31 c0                	xor    %eax,%eax
  1043d0:	5b                   	pop    %ebx
  1043d1:	5e                   	pop    %esi
  1043d2:	5f                   	pop    %edi
  1043d3:	5d                   	pop    %ebp
  1043d4:	c3                   	ret    

001043d5 <callback_function_hcsr>:
{
  1043d5:	55                   	push   %ebp
  1043d6:	89 e5                	mov    %esp,%ebp
  1043d8:	57                   	push   %edi
  1043d9:	56                   	push   %esi
  1043da:	53                   	push   %ebx
  1043db:	50                   	push   %eax
	uint32_t val = 0;
  1043dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
{
  1043e3:	8b 75 0c             	mov    0xc(%ebp),%esi
	struct hcsr_pin *drv_pin = drv_data->dev_original->config->config_info;
  1043e6:	8b 46 ec             	mov    -0x14(%esi),%eax
  1043e9:	8b 00                	mov    (%eax),%eax
  1043eb:	8b 78 08             	mov    0x8(%eax),%edi
	__asm__ volatile (/* serialize */
  1043ee:	31 c0                	xor    %eax,%eax
  1043f0:	0f a2                	cpuid  
	__asm__ volatile ("rdtsc" : "=a" (rv.lo), "=d" (rv.hi));
  1043f2:	0f 31                	rdtsc  
	start_time = _tsc_read();
  1043f4:	a3 58 a1 10 00       	mov    %eax,0x10a158
	gpio_pin_disable_callback(drv_data->input_pin_gpio_device, drv_pin->GPIO_PIN_ECHO);
  1043f9:	8b 46 f4             	mov    -0xc(%esi),%eax
	start_time = _tsc_read();
  1043fc:	89 15 5c a1 10 00    	mov    %edx,0x10a15c
	return api->disable_callback(port, access_op, pin);
  104402:	8b 50 04             	mov    0x4(%eax),%edx
  104405:	ff 77 0c             	pushl  0xc(%edi)
  104408:	6a 00                	push   $0x0
  10440a:	50                   	push   %eax
  10440b:	ff 52 14             	call   *0x14(%edx)
  10440e:	83 c4 0c             	add    $0xc,%esp
		gpio_pin_read(drv_data->input_pin_gpio_device,drv_pin->GPIO_PIN_ECHO,&val);
  104411:	8b 46 f4             	mov    -0xc(%esi),%eax
	return api->read(port, access_op, pin, value);
  104414:	8d 5d f0             	lea    -0x10(%ebp),%ebx
  104417:	8b 50 04             	mov    0x4(%eax),%edx
  10441a:	53                   	push   %ebx
  10441b:	ff 77 0c             	pushl  0xc(%edi)
  10441e:	6a 00                	push   $0x0
  104420:	50                   	push   %eax
  104421:	ff 52 08             	call   *0x8(%edx)
  104424:	83 c4 10             	add    $0x10,%esp
	__asm__ volatile (/* serialize */
  104427:	31 c0                	xor    %eax,%eax
  104429:	0f a2                	cpuid  
	__asm__ volatile ("rdtsc" : "=a" (rv.lo), "=d" (rv.hi));
  10442b:	0f 31                	rdtsc  
	return rv.value;
  10442d:	89 c1                	mov    %eax,%ecx
  10442f:	89 d3                	mov    %edx,%ebx
		end_time = _tsc_read();
  104431:	a3 00 a1 10 00       	mov    %eax,0x10a100
  104436:	89 15 04 a1 10 00    	mov    %edx,0x10a104
	}while(val==1);
  10443c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  104440:	74 cf                	je     104411 <callback_function_hcsr+0x3c>
	cm = (end_time - start_time)/(400*58);
  104442:	2b 0d 58 a1 10 00    	sub    0x10a158,%ecx
  104448:	6a 00                	push   $0x0
  10444a:	1b 1d 5c a1 10 00    	sbb    0x10a15c,%ebx
  104450:	68 a0 5a 00 00       	push   $0x5aa0
  104455:	53                   	push   %ebx
  104456:	51                   	push   %ecx
  104457:	e8 34 bc ff ff       	call   100090 <__udivdi3>
  10445c:	83 c4 10             	add    $0x10,%esp
  10445f:	89 46 0c             	mov    %eax,0xc(%esi)
}
  104462:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104465:	5b                   	pop    %ebx
  104466:	5e                   	pop    %esi
  104467:	5f                   	pop    %edi
  104468:	5d                   	pop    %ebp
  104469:	c3                   	ret    

0010446a <uart_ns16550_poll_in>:
 * @param c Pointer to character
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(struct device *dev, unsigned char *c)
{
  10446a:	55                   	push   %ebp
  10446b:	89 e5                	mov    %esp,%ebp
  10446d:	8b 55 08             	mov    0x8(%ebp),%edx
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) == 0x00)
  104470:	8b 42 08             	mov    0x8(%edx),%eax
  104473:	8b 00                	mov    (%eax),%eax
	__asm__ volatile("movb	%1, %0;\n\t"
  104475:	8a 48 14             	mov    0x14(%eax),%cl
  104478:	80 e1 01             	and    $0x1,%cl
  10447b:	74 10                	je     10448d <uart_ns16550_poll_in+0x23>
		return (-1);

	/* got a character */
	*c = INBYTE(RDR(dev));
  10447d:	8b 42 08             	mov    0x8(%edx),%eax
			 : "m" (*(volatile u8_t *) addr)
  104480:	8b 00                	mov    (%eax),%eax
	__asm__ volatile("movb	%1, %0;\n\t"
  104482:	8a 10                	mov    (%eax),%dl
  104484:	8b 45 0c             	mov    0xc(%ebp),%eax
  104487:	88 10                	mov    %dl,(%eax)

	return 0;
  104489:	31 c0                	xor    %eax,%eax
  10448b:	eb 03                	jmp    104490 <uart_ns16550_poll_in+0x26>
  10448d:	83 c8 ff             	or     $0xffffffff,%eax
}
  104490:	5d                   	pop    %ebp
  104491:	c3                   	ret    

00104492 <uart_ns16550_poll_out>:
 *
 * @return Sent character
 */
static unsigned char uart_ns16550_poll_out(struct device *dev,
					   unsigned char c)
{
  104492:	55                   	push   %ebp
  104493:	89 e5                	mov    %esp,%ebp
  104495:	8b 55 08             	mov    0x8(%ebp),%edx
  104498:	8b 45 0c             	mov    0xc(%ebp),%eax
	/* wait for transmitter to ready to accept a character */
	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0)
  10449b:	8b 4a 08             	mov    0x8(%edx),%ecx
  10449e:	8b 09                	mov    (%ecx),%ecx
  1044a0:	8a 49 14             	mov    0x14(%ecx),%cl
  1044a3:	80 e1 20             	and    $0x20,%cl
  1044a6:	74 f3                	je     10449b <uart_ns16550_poll_out+0x9>
		;

	OUTBYTE(THR(dev), c);
  1044a8:	8b 52 08             	mov    0x8(%edx),%edx
			 : "q"(data), "m" (*(volatile u8_t *) addr)
  1044ab:	8b 12                	mov    (%edx),%edx
	__asm__ volatile("movb	%0, %1;\n\t"
  1044ad:	88 02                	mov    %al,(%edx)

	return c;
}
  1044af:	5d                   	pop    %ebp
  1044b0:	c3                   	ret    

001044b1 <uart_ns16550_err_check>:
 *
 * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,
 * UART_ERROR_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(struct device *dev)
{
  1044b1:	55                   	push   %ebp
  1044b2:	89 e5                	mov    %esp,%ebp
	return (INBYTE(LSR(dev)) & LSR_EOB_MASK) >> 1;
  1044b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1044b7:	8b 40 08             	mov    0x8(%eax),%eax
  1044ba:	8b 00                	mov    (%eax),%eax
	__asm__ volatile("movb	%1, %0;\n\t"
  1044bc:	8a 40 14             	mov    0x14(%eax),%al
  1044bf:	d1 e8                	shr    %eax
}
  1044c1:	5d                   	pop    %ebp
	return (INBYTE(LSR(dev)) & LSR_EOB_MASK) >> 1;
  1044c2:	83 e0 0f             	and    $0xf,%eax
}
  1044c5:	c3                   	ret    

001044c6 <uart_ns16550_fifo_fill>:
 *
 * @return Number of bytes sent
 */
static int uart_ns16550_fifo_fill(struct device *dev, const u8_t *tx_data,
				  int size)
{
  1044c6:	55                   	push   %ebp
	int i;

	for (i = 0; i < size && (INBYTE(LSR(dev)) & LSR_THRE) != 0; i++) {
  1044c7:	31 c0                	xor    %eax,%eax
{
  1044c9:	89 e5                	mov    %esp,%ebp
  1044cb:	56                   	push   %esi
  1044cc:	53                   	push   %ebx
  1044cd:	8b 55 08             	mov    0x8(%ebp),%edx
  1044d0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	for (i = 0; i < size && (INBYTE(LSR(dev)) & LSR_THRE) != 0; i++) {
  1044d3:	3b 45 10             	cmp    0x10(%ebp),%eax
  1044d6:	7d 1a                	jge    1044f2 <uart_ns16550_fifo_fill+0x2c>
  1044d8:	8b 4a 08             	mov    0x8(%edx),%ecx
  1044db:	8b 09                	mov    (%ecx),%ecx
  1044dd:	8a 49 14             	mov    0x14(%ecx),%cl
  1044e0:	80 e1 20             	and    $0x20,%cl
  1044e3:	74 0d                	je     1044f2 <uart_ns16550_fifo_fill+0x2c>
		OUTBYTE(THR(dev), tx_data[i]);
  1044e5:	8b 72 08             	mov    0x8(%edx),%esi
  1044e8:	8a 0c 03             	mov    (%ebx,%eax,1),%cl
			 : "q"(data), "m" (*(volatile u8_t *) addr)
  1044eb:	8b 36                	mov    (%esi),%esi
	__asm__ volatile("movb	%0, %1;\n\t"
  1044ed:	88 0e                	mov    %cl,(%esi)
	for (i = 0; i < size && (INBYTE(LSR(dev)) & LSR_THRE) != 0; i++) {
  1044ef:	40                   	inc    %eax
  1044f0:	eb e1                	jmp    1044d3 <uart_ns16550_fifo_fill+0xd>
	}
	return i;
}
  1044f2:	5b                   	pop    %ebx
  1044f3:	5e                   	pop    %esi
  1044f4:	5d                   	pop    %ebp
  1044f5:	c3                   	ret    

001044f6 <uart_ns16550_fifo_read>:
 *
 * @return Number of bytes read
 */
static int uart_ns16550_fifo_read(struct device *dev, u8_t *rx_data,
				  const int size)
{
  1044f6:	55                   	push   %ebp
	int i;

	for (i = 0; i < size && (INBYTE(LSR(dev)) & LSR_RXRDY) != 0; i++) {
  1044f7:	31 c0                	xor    %eax,%eax
{
  1044f9:	89 e5                	mov    %esp,%ebp
  1044fb:	53                   	push   %ebx
  1044fc:	8b 55 08             	mov    0x8(%ebp),%edx
	for (i = 0; i < size && (INBYTE(LSR(dev)) & LSR_RXRDY) != 0; i++) {
  1044ff:	3b 45 10             	cmp    0x10(%ebp),%eax
  104502:	7d 1d                	jge    104521 <uart_ns16550_fifo_read+0x2b>
  104504:	8b 4a 08             	mov    0x8(%edx),%ecx
  104507:	8b 09                	mov    (%ecx),%ecx
	__asm__ volatile("movb	%1, %0;\n\t"
  104509:	8a 49 14             	mov    0x14(%ecx),%cl
  10450c:	80 e1 01             	and    $0x1,%cl
  10450f:	74 10                	je     104521 <uart_ns16550_fifo_read+0x2b>
		rx_data[i] = INBYTE(RDR(dev));
  104511:	8b 4a 08             	mov    0x8(%edx),%ecx
			 : "m" (*(volatile u8_t *) addr)
  104514:	8b 09                	mov    (%ecx),%ecx
	__asm__ volatile("movb	%1, %0;\n\t"
  104516:	8a 09                	mov    (%ecx),%cl
  104518:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10451b:	88 0c 03             	mov    %cl,(%ebx,%eax,1)
	for (i = 0; i < size && (INBYTE(LSR(dev)) & LSR_RXRDY) != 0; i++) {
  10451e:	40                   	inc    %eax
  10451f:	eb de                	jmp    1044ff <uart_ns16550_fifo_read+0x9>
	}

	return i;
}
  104521:	5b                   	pop    %ebx
  104522:	5d                   	pop    %ebp
  104523:	c3                   	ret    

00104524 <uart_ns16550_irq_tx_enable>:
 * @param dev UART device struct
 *
 * @return N/A
 */
static void uart_ns16550_irq_tx_enable(struct device *dev)
{
  104524:	55                   	push   %ebp
  104525:	89 e5                	mov    %esp,%ebp
	OUTBYTE(IER(dev), INBYTE(IER(dev)) | IER_TBE);
  104527:	8b 45 08             	mov    0x8(%ebp),%eax
  10452a:	8b 40 08             	mov    0x8(%eax),%eax
  10452d:	8b 10                	mov    (%eax),%edx
  10452f:	8a 42 04             	mov    0x4(%edx),%al
  104532:	83 c8 02             	or     $0x2,%eax
	__asm__ volatile("movb	%0, %1;\n\t"
  104535:	88 42 04             	mov    %al,0x4(%edx)
}
  104538:	5d                   	pop    %ebp
  104539:	c3                   	ret    

0010453a <uart_ns16550_irq_tx_disable>:
 * @param dev UART device struct
 *
 * @return N/A
 */
static void uart_ns16550_irq_tx_disable(struct device *dev)
{
  10453a:	55                   	push   %ebp
  10453b:	89 e5                	mov    %esp,%ebp
	OUTBYTE(IER(dev), INBYTE(IER(dev)) & (~IER_TBE));
  10453d:	8b 45 08             	mov    0x8(%ebp),%eax
  104540:	8b 40 08             	mov    0x8(%eax),%eax
  104543:	8b 10                	mov    (%eax),%edx
	__asm__ volatile("movb	%1, %0;\n\t"
  104545:	8a 42 04             	mov    0x4(%edx),%al
  104548:	83 e0 fd             	and    $0xfffffffd,%eax
	__asm__ volatile("movb	%0, %1;\n\t"
  10454b:	88 42 04             	mov    %al,0x4(%edx)
}
  10454e:	5d                   	pop    %ebp
  10454f:	c3                   	ret    

00104550 <uart_ns16550_irq_tx_ready>:
 * @param dev UART device struct
 *
 * @return 1 if an IRQ is ready, 0 otherwise
 */
static int uart_ns16550_irq_tx_ready(struct device *dev)
{
  104550:	55                   	push   %ebp
  104551:	89 e5                	mov    %esp,%ebp
	return ((IIRC(dev) & IIR_ID) == IIR_THRE);
  104553:	8b 45 08             	mov    0x8(%ebp),%eax
}
  104556:	5d                   	pop    %ebp
	return ((IIRC(dev) & IIR_ID) == IIR_THRE);
  104557:	8b 40 08             	mov    0x8(%eax),%eax
  10455a:	8a 40 20             	mov    0x20(%eax),%al
  10455d:	83 e0 06             	and    $0x6,%eax
  104560:	3c 02                	cmp    $0x2,%al
  104562:	0f 94 c0             	sete   %al
  104565:	0f b6 c0             	movzbl %al,%eax
}
  104568:	c3                   	ret    

00104569 <uart_ns16550_irq_tx_complete>:
 * @param dev UART device struct
 *
 * @return 1 if nothing remains to be transmitted, 0 otherwise
 */
static int uart_ns16550_irq_tx_complete(struct device *dev)
{
  104569:	55                   	push   %ebp
  10456a:	89 e5                	mov    %esp,%ebp
	return (INBYTE(LSR(dev)) & (LSR_TEMT | LSR_THRE)) == (LSR_TEMT | LSR_THRE);
  10456c:	8b 45 08             	mov    0x8(%ebp),%eax
  10456f:	8b 40 08             	mov    0x8(%eax),%eax
  104572:	8b 00                	mov    (%eax),%eax
	__asm__ volatile("movb	%1, %0;\n\t"
  104574:	8a 40 14             	mov    0x14(%eax),%al
  104577:	83 e0 60             	and    $0x60,%eax
}
  10457a:	5d                   	pop    %ebp
	return (INBYTE(LSR(dev)) & (LSR_TEMT | LSR_THRE)) == (LSR_TEMT | LSR_THRE);
  10457b:	3c 60                	cmp    $0x60,%al
  10457d:	0f 94 c0             	sete   %al
  104580:	0f b6 c0             	movzbl %al,%eax
}
  104583:	c3                   	ret    

00104584 <uart_ns16550_irq_rx_enable>:
 * @param dev UART device struct
 *
 * @return N/A
 */
static void uart_ns16550_irq_rx_enable(struct device *dev)
{
  104584:	55                   	push   %ebp
  104585:	89 e5                	mov    %esp,%ebp
	OUTBYTE(IER(dev), INBYTE(IER(dev)) | IER_RXRDY);
  104587:	8b 45 08             	mov    0x8(%ebp),%eax
  10458a:	8b 40 08             	mov    0x8(%eax),%eax
  10458d:	8b 10                	mov    (%eax),%edx
  10458f:	8a 42 04             	mov    0x4(%edx),%al
  104592:	83 c8 01             	or     $0x1,%eax
	__asm__ volatile("movb	%0, %1;\n\t"
  104595:	88 42 04             	mov    %al,0x4(%edx)
}
  104598:	5d                   	pop    %ebp
  104599:	c3                   	ret    

0010459a <uart_ns16550_irq_rx_disable>:
 * @param dev UART device struct
 *
 * @return N/A
 */
static void uart_ns16550_irq_rx_disable(struct device *dev)
{
  10459a:	55                   	push   %ebp
  10459b:	89 e5                	mov    %esp,%ebp
	OUTBYTE(IER(dev), INBYTE(IER(dev)) & (~IER_RXRDY));
  10459d:	8b 45 08             	mov    0x8(%ebp),%eax
  1045a0:	8b 40 08             	mov    0x8(%eax),%eax
  1045a3:	8b 10                	mov    (%eax),%edx
	__asm__ volatile("movb	%1, %0;\n\t"
  1045a5:	8a 42 04             	mov    0x4(%edx),%al
  1045a8:	83 e0 fe             	and    $0xfffffffe,%eax
	__asm__ volatile("movb	%0, %1;\n\t"
  1045ab:	88 42 04             	mov    %al,0x4(%edx)
}
  1045ae:	5d                   	pop    %ebp
  1045af:	c3                   	ret    

001045b0 <uart_ns16550_irq_rx_ready>:
 * @param dev UART device struct
 *
 * @return 1 if an IRQ is ready, 0 otherwise
 */
static int uart_ns16550_irq_rx_ready(struct device *dev)
{
  1045b0:	55                   	push   %ebp
  1045b1:	89 e5                	mov    %esp,%ebp
	return ((IIRC(dev) & IIR_ID) == IIR_RBRF);
  1045b3:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1045b6:	5d                   	pop    %ebp
	return ((IIRC(dev) & IIR_ID) == IIR_RBRF);
  1045b7:	8b 40 08             	mov    0x8(%eax),%eax
  1045ba:	8a 40 20             	mov    0x20(%eax),%al
  1045bd:	83 e0 06             	and    $0x6,%eax
  1045c0:	3c 04                	cmp    $0x4,%al
  1045c2:	0f 94 c0             	sete   %al
  1045c5:	0f b6 c0             	movzbl %al,%eax
}
  1045c8:	c3                   	ret    

001045c9 <uart_ns16550_irq_err_enable>:
 * @param dev UART device struct
 *
 * @return N/A
 */
static void uart_ns16550_irq_err_enable(struct device *dev)
{
  1045c9:	55                   	push   %ebp
  1045ca:	89 e5                	mov    %esp,%ebp
	OUTBYTE(IER(dev), INBYTE(IER(dev)) | IER_LSR);
  1045cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1045cf:	8b 40 08             	mov    0x8(%eax),%eax
  1045d2:	8b 10                	mov    (%eax),%edx
	__asm__ volatile("movb	%1, %0;\n\t"
  1045d4:	8a 42 04             	mov    0x4(%edx),%al
  1045d7:	83 c8 04             	or     $0x4,%eax
	__asm__ volatile("movb	%0, %1;\n\t"
  1045da:	88 42 04             	mov    %al,0x4(%edx)
}
  1045dd:	5d                   	pop    %ebp
  1045de:	c3                   	ret    

001045df <uart_ns16550_irq_err_disable>:
 * @param dev UART device struct
 *
 * @return 1 if an IRQ is ready, 0 otherwise
 */
static void uart_ns16550_irq_err_disable(struct device *dev)
{
  1045df:	55                   	push   %ebp
  1045e0:	89 e5                	mov    %esp,%ebp
	OUTBYTE(IER(dev), INBYTE(IER(dev)) & (~IER_LSR));
  1045e2:	8b 45 08             	mov    0x8(%ebp),%eax
  1045e5:	8b 40 08             	mov    0x8(%eax),%eax
  1045e8:	8b 10                	mov    (%eax),%edx
	__asm__ volatile("movb	%1, %0;\n\t"
  1045ea:	8a 42 04             	mov    0x4(%edx),%al
  1045ed:	83 e0 fb             	and    $0xfffffffb,%eax
	__asm__ volatile("movb	%0, %1;\n\t"
  1045f0:	88 42 04             	mov    %al,0x4(%edx)
}
  1045f3:	5d                   	pop    %ebp
  1045f4:	c3                   	ret    

001045f5 <uart_ns16550_irq_is_pending>:
 * @param dev UART device struct
 *
 * @return 1 if an IRQ is pending, 0 otherwise
 */
static int uart_ns16550_irq_is_pending(struct device *dev)
{
  1045f5:	55                   	push   %ebp
  1045f6:	89 e5                	mov    %esp,%ebp
	return (!(IIRC(dev) & IIR_NIP));
  1045f8:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1045fb:	5d                   	pop    %ebp
	return (!(IIRC(dev) & IIR_NIP));
  1045fc:	8b 40 08             	mov    0x8(%eax),%eax
  1045ff:	8a 40 20             	mov    0x20(%eax),%al
  104602:	f7 d0                	not    %eax
  104604:	83 e0 01             	and    $0x1,%eax
}
  104607:	c3                   	ret    

00104608 <uart_ns16550_irq_update>:
 * @param dev UART device struct
 *
 * @return Always 1
 */
static int uart_ns16550_irq_update(struct device *dev)
{
  104608:	55                   	push   %ebp
  104609:	89 e5                	mov    %esp,%ebp
	IIRC(dev) = INBYTE(IIR(dev));
  10460b:	8b 45 08             	mov    0x8(%ebp),%eax
  10460e:	8b 40 08             	mov    0x8(%eax),%eax
  104611:	8b 10                	mov    (%eax),%edx
	__asm__ volatile("movb	%1, %0;\n\t"
  104613:	8a 52 08             	mov    0x8(%edx),%dl
  104616:	88 50 20             	mov    %dl,0x20(%eax)

	return 1;
}
  104619:	b8 01 00 00 00       	mov    $0x1,%eax
  10461e:	5d                   	pop    %ebp
  10461f:	c3                   	ret    

00104620 <uart_ns16550_irq_callback_set>:
 *
 * @return N/A
 */
static void uart_ns16550_irq_callback_set(struct device *dev,
					  uart_irq_callback_t cb)
{
  104620:	55                   	push   %ebp
  104621:	89 e5                	mov    %esp,%ebp
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);

	dev_data->cb = cb;
  104623:	8b 45 08             	mov    0x8(%ebp),%eax
  104626:	8b 55 0c             	mov    0xc(%ebp),%edx
  104629:	8b 40 08             	mov    0x8(%eax),%eax
  10462c:	89 50 24             	mov    %edx,0x24(%eax)
}
  10462f:	5d                   	pop    %ebp
  104630:	c3                   	ret    

00104631 <uart_ns16550_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_ns16550_isr(void *arg)
{
  104631:	55                   	push   %ebp
  104632:	89 e5                	mov    %esp,%ebp
  104634:	8b 55 08             	mov    0x8(%ebp),%edx
	struct device *dev = arg;
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);

	if (dev_data->cb) {
  104637:	8b 42 08             	mov    0x8(%edx),%eax
  10463a:	8b 40 24             	mov    0x24(%eax),%eax
  10463d:	85 c0                	test   %eax,%eax
  10463f:	74 03                	je     104644 <uart_ns16550_isr+0x13>
		dev_data->cb(dev);
	}
}
  104641:	5d                   	pop    %ebp
		dev_data->cb(dev);
  104642:	ff e0                	jmp    *%eax
}
  104644:	5d                   	pop    %ebp
  104645:	c3                   	ret    

00104646 <irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &uart_ns16550_driver_api);

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void irq_config_func_0(struct device *dev)
{
  104646:	55                   	push   %ebp
  104647:	89 e5                	mov    %esp,%ebp

	IRQ_CONNECT(UART_NS16550_PORT_0_IRQ,
		    CONFIG_UART_NS16550_PORT_0_IRQ_PRI,
		    uart_ns16550_isr, DEVICE_GET(uart_ns16550_0),
		    UART_IRQ_FLAGS);
	irq_enable(UART_NS16550_PORT_0_IRQ);
  104649:	0f b6 05 a8 8f 10 00 	movzbl 0x108fa8,%eax
	__irq_controller_irq_config(vector, irq, flags);
  104650:	68 00 a0 00 00       	push   $0xa000
  104655:	6a 00                	push   $0x0
  104657:	50                   	push   %eax
  104658:	e8 9c db ff ff       	call   1021f9 <__irq_controller_irq_config>
  10465d:	83 c4 0c             	add    $0xc,%esp
  104660:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
  104667:	c9                   	leave  
	irq_enable(UART_NS16550_PORT_0_IRQ);
  104668:	e9 b2 db ff ff       	jmp    10221f <_arch_irq_enable>

0010466d <uart_ns16550_isr_irq0_stub>:
	IRQ_CONNECT(UART_NS16550_PORT_0_IRQ,
  10466d:	68 00 ba 10 00       	push   $0x10ba00
  104672:	68 31 46 10 00       	push   $0x104631
  104677:	e9 e4 ce ff ff       	jmp    101560 <_interrupt_enter>

0010467c <uart_ns16550_isr_irq17_stub>:
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void irq_config_func_1(struct device *dev)
{
	ARG_UNUSED(dev);

	IRQ_CONNECT(UART_NS16550_PORT_1_IRQ,
  10467c:	68 f4 b9 10 00       	push   $0x10b9f4
  104681:	68 31 46 10 00       	push   $0x104631
  104686:	e9 d5 ce ff ff       	jmp    101560 <_interrupt_enter>

0010468b <irq_config_func_1>:
{
  10468b:	55                   	push   %ebp
  10468c:	89 e5                	mov    %esp,%ebp
		    CONFIG_UART_NS16550_PORT_1_IRQ_PRI,
		    uart_ns16550_isr, DEVICE_GET(uart_ns16550_1),
		    UART_IRQ_FLAGS);
	irq_enable(UART_NS16550_PORT_1_IRQ);
  10468e:	0f b6 05 b9 8f 10 00 	movzbl 0x108fb9,%eax
  104695:	68 00 a0 00 00       	push   $0xa000
  10469a:	6a 11                	push   $0x11
  10469c:	50                   	push   %eax
  10469d:	e8 57 db ff ff       	call   1021f9 <__irq_controller_irq_config>
  1046a2:	83 c4 0c             	add    $0xc,%esp
  1046a5:	c7 45 08 11 00 00 00 	movl   $0x11,0x8(%ebp)
}
  1046ac:	c9                   	leave  
	irq_enable(UART_NS16550_PORT_1_IRQ);
  1046ad:	e9 6d db ff ff       	jmp    10221f <_arch_irq_enable>

001046b2 <uart_ns16550_init>:
{
  1046b2:	55                   	push   %ebp
  1046b3:	89 e5                	mov    %esp,%ebp
  1046b5:	57                   	push   %edi
  1046b6:	56                   	push   %esi
  1046b7:	53                   	push   %ebx
  1046b8:	83 ec 0c             	sub    $0xc,%esp
  1046bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
  1046be:	8b 73 08             	mov    0x8(%ebx),%esi
	if (dev_data->pci_dev.vendor_id == 0x0000) {
  1046c1:	66 83 7e 1c 00       	cmpw   $0x0,0x1c(%esi)
  1046c6:	74 23                	je     1046eb <uart_ns16550_init+0x39>
	if (!pci_bus_scan(&dev_data->pci_dev)) {
  1046c8:	8d 7e 0c             	lea    0xc(%esi),%edi
	pci_bus_scan_init();
  1046cb:	e8 e0 f0 ff ff       	call   1037b0 <pci_bus_scan_init>
	if (!pci_bus_scan(&dev_data->pci_dev)) {
  1046d0:	57                   	push   %edi
  1046d1:	e8 48 f1 ff ff       	call   10381e <pci_bus_scan>
  1046d6:	59                   	pop    %ecx
  1046d7:	85 c0                	test   %eax,%eax
  1046d9:	0f 84 c4 00 00 00    	je     1047a3 <uart_ns16550_init+0xf1>
	dev_data->port = dev_data->pci_dev.addr;
  1046df:	8b 46 0c             	mov    0xc(%esi),%eax
  1046e2:	89 06                	mov    %eax,(%esi)
	pci_enable_regs(&dev_data->pci_dev);
  1046e4:	57                   	push   %edi
  1046e5:	e8 03 f7 ff ff       	call   103ded <pci_enable_regs>
  1046ea:	5a                   	pop    %edx
	dev_data->iir_cache = 0;
  1046eb:	c6 46 20 00          	movb   $0x0,0x20(%esi)
	__asm__ volatile (
  1046ef:	9c                   	pushf  
  1046f0:	fa                   	cli    
  1046f1:	8f 45 e8             	popl   -0x18(%ebp)
	set_baud_rate(dev, dev_data->baud_rate);
  1046f4:	8b 4e 04             	mov    0x4(%esi),%ecx
	if ((baud_rate != 0) && (dev_cfg->sys_clk_freq != 0)) {
  1046f7:	85 c9                	test   %ecx,%ecx
  1046f9:	74 53                	je     10474e <uart_ns16550_init+0x9c>
	const struct uart_ns16550_device_config * const dev_cfg = DEV_CFG(dev);
  1046fb:	8b 03                	mov    (%ebx),%eax
	if ((baud_rate != 0) && (dev_cfg->sys_clk_freq != 0)) {
  1046fd:	8b 40 08             	mov    0x8(%eax),%eax
  104700:	8b 00                	mov    (%eax),%eax
  104702:	85 c0                	test   %eax,%eax
  104704:	74 48                	je     10474e <uart_ns16550_init+0x9c>
	struct uart_ns16550_dev_data_t * const dev_data = DEV_DATA(dev);
  104706:	8b 7b 08             	mov    0x8(%ebx),%edi
		divisor = (dev_cfg->sys_clk_freq / baud_rate) >> 4;
  104709:	31 d2                	xor    %edx,%edx
  10470b:	f7 f1                	div    %ecx
  10470d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		lcr_cache = INBYTE(LCR(dev));
  104710:	8b 17                	mov    (%edi),%edx
	__asm__ volatile("movb	%1, %0;\n\t"
  104712:	8a 52 0c             	mov    0xc(%edx),%dl
  104715:	88 55 ef             	mov    %dl,-0x11(%ebp)
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
  104718:	83 ca 80             	or     $0xffffff80,%edx
  10471b:	88 d0                	mov    %dl,%al
  10471d:	8b 53 08             	mov    0x8(%ebx),%edx
  104720:	8b 12                	mov    (%edx),%edx
	__asm__ volatile("movb	%0, %1;\n\t"
  104722:	88 42 0c             	mov    %al,0xc(%edx)
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
  104725:	8b 53 08             	mov    0x8(%ebx),%edx
		divisor = (dev_cfg->sys_clk_freq / baud_rate) >> 4;
  104728:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10472b:	c1 e8 04             	shr    $0x4,%eax
			 : "q"(data), "m" (*(volatile u8_t *) addr)
  10472e:	8b 12                	mov    (%edx),%edx
	__asm__ volatile("movb	%0, %1;\n\t"
  104730:	88 02                	mov    %al,(%edx)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
  104732:	8b 53 08             	mov    0x8(%ebx),%edx
  104735:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104738:	c1 e8 0c             	shr    $0xc,%eax
  10473b:	8b 12                	mov    (%edx),%edx
  10473d:	88 42 04             	mov    %al,0x4(%edx)
		OUTBYTE(LCR(dev), lcr_cache);
  104740:	8b 43 08             	mov    0x8(%ebx),%eax
  104743:	8a 55 ef             	mov    -0x11(%ebp),%dl
  104746:	8b 00                	mov    (%eax),%eax
  104748:	88 50 0c             	mov    %dl,0xc(%eax)
		dev_data->baud_rate = baud_rate;
  10474b:	89 4f 04             	mov    %ecx,0x4(%edi)
	OUTBYTE(LCR(dev), LCR_CS8 | LCR_1_STB | LCR_PDIS);
  10474e:	8b 43 08             	mov    0x8(%ebx),%eax
  104751:	8b 10                	mov    (%eax),%edx
  104753:	b0 03                	mov    $0x3,%al
  104755:	88 42 0c             	mov    %al,0xc(%edx)
	if ((dev_data->options & UART_OPTION_AFCE) == UART_OPTION_AFCE)
  104758:	8a 46 08             	mov    0x8(%esi),%al
	OUTBYTE(MDC(dev), mdc);
  10475b:	8b 53 08             	mov    0x8(%ebx),%edx
	if ((dev_data->options & UART_OPTION_AFCE) == UART_OPTION_AFCE)
  10475e:	83 e0 01             	and    $0x1,%eax
		mdc |= MCR_AFCE;
  104761:	3c 01                	cmp    $0x1,%al
	OUTBYTE(MDC(dev), mdc);
  104763:	8b 12                	mov    (%edx),%edx
		mdc |= MCR_AFCE;
  104765:	19 c0                	sbb    %eax,%eax
  104767:	83 e0 e0             	and    $0xffffffe0,%eax
  10476a:	83 c0 2b             	add    $0x2b,%eax
  10476d:	88 42 10             	mov    %al,0x10(%edx)
	OUTBYTE(FCR(dev),
  104770:	8b 43 08             	mov    0x8(%ebx),%eax
  104773:	8b 10                	mov    (%eax),%edx
  104775:	b0 87                	mov    $0x87,%al
  104777:	88 42 08             	mov    %al,0x8(%edx)
	INBYTE(RDR(dev));
  10477a:	8b 43 08             	mov    0x8(%ebx),%eax
			 : "m" (*(volatile u8_t *) addr)
  10477d:	8b 00                	mov    (%eax),%eax
	__asm__ volatile("movb	%1, %0;\n\t"
  10477f:	8a 00                	mov    (%eax),%al
	OUTBYTE(IER(dev), 0x00);
  104781:	8b 43 08             	mov    0x8(%ebx),%eax
  104784:	8b 10                	mov    (%eax),%edx
	__asm__ volatile("movb	%0, %1;\n\t"
  104786:	31 c0                	xor    %eax,%eax
  104788:	88 42 04             	mov    %al,0x4(%edx)
  10478b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10478e:	0f ba e0 09          	bt     $0x9,%eax
  104792:	73 01                	jae    104795 <uart_ns16550_init+0xe3>
	__asm__ volatile (
  104794:	fb                   	sti    
	DEV_CFG(dev)->irq_config_func(dev);
  104795:	8b 03                	mov    (%ebx),%eax
  104797:	8b 40 08             	mov    0x8(%eax),%eax
  10479a:	53                   	push   %ebx
  10479b:	ff 50 04             	call   *0x4(%eax)
  10479e:	58                   	pop    %eax
	return 0;
  10479f:	31 c0                	xor    %eax,%eax
  1047a1:	eb 0c                	jmp    1047af <uart_ns16550_init+0xfd>
		dev->driver_api = NULL;
  1047a3:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
		return -ENOTSUP;
  1047aa:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
}
  1047af:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1047b2:	5b                   	pop    %ebx
  1047b3:	5e                   	pop    %esi
  1047b4:	5f                   	pop    %edi
  1047b5:	5d                   	pop    %ebp
  1047b6:	c3                   	ret    

001047b7 <isr_register>:
 *  @param isr_func Pointer to the ISR function for the device.
 *  @param isr_dev Pointer to the device that will service the interrupt.
 */
static int isr_register(struct device *dev, isr_t isr_func,
				 struct device *isr_dev)
{
  1047b7:	55                   	push   %ebp
	struct shared_irq_runtime *clients = dev->driver_data;
	const struct shared_irq_config *config = dev->config->config_info;
	u32_t i;

	for (i = 0; i < config->client_count; i++) {
  1047b8:	31 d2                	xor    %edx,%edx
{
  1047ba:	89 e5                	mov    %esp,%ebp
  1047bc:	53                   	push   %ebx
  1047bd:	8b 45 08             	mov    0x8(%ebp),%eax
	struct shared_irq_runtime *clients = dev->driver_data;
  1047c0:	8b 48 08             	mov    0x8(%eax),%ecx
	const struct shared_irq_config *config = dev->config->config_info;
  1047c3:	8b 00                	mov    (%eax),%eax
	for (i = 0; i < config->client_count; i++) {
  1047c5:	8b 40 08             	mov    0x8(%eax),%eax
  1047c8:	8b 58 08             	mov    0x8(%eax),%ebx
  1047cb:	39 da                	cmp    %ebx,%edx
  1047cd:	74 1d                	je     1047ec <isr_register+0x35>
  1047cf:	6b c2 0c             	imul   $0xc,%edx,%eax
		if (!clients->client[i].isr_dev) {
  1047d2:	83 3c 01 00          	cmpl   $0x0,(%ecx,%eax,1)
  1047d6:	75 11                	jne    1047e9 <isr_register+0x32>
  1047d8:	01 c8                	add    %ecx,%eax
			clients->client[i].isr_dev = isr_dev;
  1047da:	8b 55 10             	mov    0x10(%ebp),%edx
  1047dd:	89 10                	mov    %edx,(%eax)
			clients->client[i].isr_func = isr_func;
  1047df:	8b 55 0c             	mov    0xc(%ebp),%edx
  1047e2:	89 50 04             	mov    %edx,0x4(%eax)
			return 0;
  1047e5:	31 c0                	xor    %eax,%eax
  1047e7:	eb 08                	jmp    1047f1 <isr_register+0x3a>
	for (i = 0; i < config->client_count; i++) {
  1047e9:	42                   	inc    %edx
  1047ea:	eb df                	jmp    1047cb <isr_register+0x14>
		}
	}
	return -EIO;
  1047ec:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  1047f1:	5b                   	pop    %ebx
  1047f2:	5d                   	pop    %ebp
  1047f3:	c3                   	ret    

001047f4 <shared_irq_isr>:
	}
	return -EIO;
}

void shared_irq_isr(struct device *dev)
{
  1047f4:	55                   	push   %ebp
  1047f5:	89 e5                	mov    %esp,%ebp
  1047f7:	57                   	push   %edi
  1047f8:	56                   	push   %esi
  1047f9:	53                   	push   %ebx
  1047fa:	8b 45 08             	mov    0x8(%ebp),%eax
	struct shared_irq_runtime *clients = dev->driver_data;
	const struct shared_irq_config *config = dev->config->config_info;
	u32_t i;

	for (i = 0; i < config->client_count; i++) {
  1047fd:	31 f6                	xor    %esi,%esi
	const struct shared_irq_config *config = dev->config->config_info;
  1047ff:	8b 10                	mov    (%eax),%edx
  104801:	8b 58 08             	mov    0x8(%eax),%ebx
  104804:	8b 7a 08             	mov    0x8(%edx),%edi
	for (i = 0; i < config->client_count; i++) {
  104807:	3b 77 08             	cmp    0x8(%edi),%esi
  10480a:	73 11                	jae    10481d <shared_irq_isr+0x29>
		if (clients->client[i].isr_dev) {
  10480c:	8b 03                	mov    (%ebx),%eax
  10480e:	85 c0                	test   %eax,%eax
  104810:	74 05                	je     104817 <shared_irq_isr+0x23>
			clients->client[i].isr_func(clients->client[i].isr_dev);
  104812:	50                   	push   %eax
  104813:	ff 53 04             	call   *0x4(%ebx)
  104816:	58                   	pop    %eax
	for (i = 0; i < config->client_count; i++) {
  104817:	46                   	inc    %esi
  104818:	83 c3 0c             	add    $0xc,%ebx
  10481b:	eb ea                	jmp    104807 <shared_irq_isr+0x13>
		}
	}
}
  10481d:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104820:	5b                   	pop    %ebx
  104821:	5e                   	pop    %esi
  104822:	5f                   	pop    %edi
  104823:	5d                   	pop    %ebp
  104824:	c3                   	ret    

00104825 <shared_irq_initialize>:
	.disable = disable,
};


int shared_irq_initialize(struct device *dev)
{
  104825:	55                   	push   %ebp
  104826:	89 e5                	mov    %esp,%ebp
  104828:	8b 45 08             	mov    0x8(%ebp),%eax
	const struct shared_irq_config *config = dev->config->config_info;
  10482b:	8b 10                	mov    (%eax),%edx
  10482d:	8b 52 08             	mov    0x8(%edx),%edx

	dev->driver_api = &api_funcs;
  104830:	c7 40 04 b0 6c 10 00 	movl   $0x106cb0,0x4(%eax)
	config->config();
  104837:	ff 52 04             	call   *0x4(%edx)

	return 0;
}
  10483a:	31 c0                	xor    %eax,%eax
  10483c:	5d                   	pop    %ebp
  10483d:	c3                   	ret    

0010483e <disable>:
{
  10483e:	55                   	push   %ebp
  10483f:	89 e5                	mov    %esp,%ebp
  104841:	57                   	push   %edi
  104842:	56                   	push   %esi
  104843:	53                   	push   %ebx
  104844:	8b 45 08             	mov    0x8(%ebp),%eax
	struct shared_irq_runtime *clients = dev->driver_data;
  104847:	8b 50 08             	mov    0x8(%eax),%edx
	const struct shared_irq_config *config = dev->config->config_info;
  10484a:	8b 00                	mov    (%eax),%eax
  10484c:	8b 48 08             	mov    0x8(%eax),%ecx
	for (i = 0; i < config->client_count; i++) {
  10484f:	31 c0                	xor    %eax,%eax
  104851:	8b 59 08             	mov    0x8(%ecx),%ebx
  104854:	39 d8                	cmp    %ebx,%eax
  104856:	74 29                	je     104881 <disable+0x43>
		if (clients->client[i].isr_dev == isr_dev) {
  104858:	6b f0 0c             	imul   $0xc,%eax,%esi
  10485b:	8b 7d 0c             	mov    0xc(%ebp),%edi
  10485e:	39 3c 32             	cmp    %edi,(%edx,%esi,1)
  104861:	75 1b                	jne    10487e <disable+0x40>
			clients->client[i].enabled = 0;
  104863:	c7 44 32 08 00 00 00 	movl   $0x0,0x8(%edx,%esi,1)
  10486a:	00 
	for (i = 0; i < count; i++) {
  10486b:	31 c0                	xor    %eax,%eax
  10486d:	39 c3                	cmp    %eax,%ebx
  10486f:	74 17                	je     104888 <disable+0x4a>
		if (clients->client[i].enabled) {
  104871:	6b f0 0c             	imul   $0xc,%eax,%esi
  104874:	83 7c 32 08 00       	cmpl   $0x0,0x8(%edx,%esi,1)
  104879:	75 15                	jne    104890 <disable+0x52>
	for (i = 0; i < count; i++) {
  10487b:	40                   	inc    %eax
  10487c:	eb ef                	jmp    10486d <disable+0x2f>
	for (i = 0; i < config->client_count; i++) {
  10487e:	40                   	inc    %eax
  10487f:	eb d3                	jmp    104854 <disable+0x16>
	return -EIO;
  104881:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  104886:	eb 0a                	jmp    104892 <disable+0x54>
				irq_disable(config->irq_num);
  104888:	ff 31                	pushl  (%ecx)
  10488a:	e8 ad d9 ff ff       	call   10223c <_arch_irq_disable>
  10488f:	58                   	pop    %eax
			return 0;
  104890:	31 c0                	xor    %eax,%eax
}
  104892:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104895:	5b                   	pop    %ebx
  104896:	5e                   	pop    %esi
  104897:	5f                   	pop    %edi
  104898:	5d                   	pop    %ebp
  104899:	c3                   	ret    

0010489a <enable>:
{
  10489a:	55                   	push   %ebp
  10489b:	89 e5                	mov    %esp,%ebp
  10489d:	57                   	push   %edi
  10489e:	56                   	push   %esi
  10489f:	53                   	push   %ebx
  1048a0:	8b 45 08             	mov    0x8(%ebp),%eax
	struct shared_irq_runtime *clients = dev->driver_data;
  1048a3:	8b 50 08             	mov    0x8(%eax),%edx
	const struct shared_irq_config *config = dev->config->config_info;
  1048a6:	8b 00                	mov    (%eax),%eax
  1048a8:	8b 48 08             	mov    0x8(%eax),%ecx
	for (i = 0; i < config->client_count; i++) {
  1048ab:	31 c0                	xor    %eax,%eax
  1048ad:	8b 71 08             	mov    0x8(%ecx),%esi
  1048b0:	39 f0                	cmp    %esi,%eax
  1048b2:	74 22                	je     1048d6 <enable+0x3c>
		if (clients->client[i].isr_dev == isr_dev) {
  1048b4:	6b d8 0c             	imul   $0xc,%eax,%ebx
  1048b7:	8b 7d 0c             	mov    0xc(%ebp),%edi
  1048ba:	39 3c 1a             	cmp    %edi,(%edx,%ebx,1)
  1048bd:	75 14                	jne    1048d3 <enable+0x39>
			clients->client[i].enabled = 1;
  1048bf:	c7 44 1a 08 01 00 00 	movl   $0x1,0x8(%edx,%ebx,1)
  1048c6:	00 
			irq_enable(config->irq_num);
  1048c7:	ff 31                	pushl  (%ecx)
  1048c9:	e8 51 d9 ff ff       	call   10221f <_arch_irq_enable>
  1048ce:	58                   	pop    %eax
			return 0;
  1048cf:	31 c0                	xor    %eax,%eax
  1048d1:	eb 08                	jmp    1048db <enable+0x41>
	for (i = 0; i < config->client_count; i++) {
  1048d3:	40                   	inc    %eax
  1048d4:	eb da                	jmp    1048b0 <enable+0x16>
	return -EIO;
  1048d6:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
  1048db:	8d 65 f4             	lea    -0xc(%ebp),%esp
  1048de:	5b                   	pop    %ebx
  1048df:	5e                   	pop    %esi
  1048e0:	5f                   	pop    %edi
  1048e1:	5d                   	pop    %ebp
  1048e2:	c3                   	ret    

001048e3 <shared_irq_config_0_irq>:
#else
	#define SHARED_IRQ_0_FLAGS 0
#endif /* CONFIG_IOAPIC */

void shared_irq_config_0_irq(void)
{
  1048e3:	55                   	push   %ebp
  1048e4:	89 e5                	mov    %esp,%ebp
	IRQ_CONNECT(CONFIG_SHARED_IRQ_0_IRQ, CONFIG_SHARED_IRQ_0_PRI,
		    shared_irq_isr, DEVICE_GET(shared_irq_0),
		    SHARED_IRQ_0_FLAGS);
}

  1048e6:	0f b6 05 ba 8f 10 00 	movzbl 0x108fba,%eax
  1048ed:	68 00 a0 00 00       	push   $0xa000
  1048f2:	6a 12                	push   $0x12
  1048f4:	50                   	push   %eax
  1048f5:	e8 ff d8 ff ff       	call   1021f9 <__irq_controller_irq_config>
  1048fa:	83 c4 0c             	add    $0xc,%esp
}
  1048fd:	c9                   	leave  
  1048fe:	c3                   	ret    

001048ff <shared_irq_isr_irq18_stub>:
	IRQ_CONNECT(CONFIG_SHARED_IRQ_0_IRQ, CONFIG_SHARED_IRQ_0_PRI,
  1048ff:	68 24 ba 10 00       	push   $0x10ba24
  104904:	68 f4 47 10 00       	push   $0x1047f4
  104909:	e9 52 cc ff ff       	jmp    101560 <_interrupt_enter>

0010490e <spi_intel_configure>:
	}
}

static int spi_intel_configure(struct device *dev,
				struct spi_config *config)
{
  10490e:	55                   	push   %ebp
  10490f:	89 e5                	mov    %esp,%ebp
  104911:	56                   	push   %esi
  104912:	53                   	push   %ebx
	struct spi_intel_data *spi = dev->driver_data;
  104913:	8b 45 08             	mov    0x8(%ebp),%eax
{
  104916:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	struct spi_intel_data *spi = dev->driver_data;
  104919:	8b 50 08             	mov    0x8(%eax),%edx
	u32_t flags = config->config;
  10491c:	8b 19                	mov    (%ecx),%ebx
{
	int ret;

	__asm__ volatile("btl	%2, %1;\n\t"
			 "sbb	%0, %0\n\t"
			 : "=r" (ret), "+m" (*(volatile u32_t *) (addr))
  10491e:	8b 02                	mov    (%edx),%eax
	__asm__ volatile("btl	%2, %1;\n\t"
  104920:	0f ba 20 07          	btl    $0x7,(%eax)
  104924:	19 f6                	sbb    %esi,%esi

	SYS_LOG_DBG("spi_intel_configure: %p (0x%x), %p", dev, spi->regs,
		    config);

	/* Check status */
	if (test_bit_sscr0_sse(spi->regs) && test_bit_sssr_bsy(spi->regs)) {
  104926:	85 f6                	test   %esi,%esi
  104928:	75 44                	jne    10496e <spi_intel_configure+0x60>
		SYS_LOG_DBG("spi_intel_configure: Controller is busy");
		return -EBUSY;
	}

	/* Pre-configuring the registers to a clean state*/
	spi->sscr0 = spi->sscr1 = 0;
  10492a:	c7 42 34 00 00 00 00 	movl   $0x0,0x34(%edx)
  104931:	c7 42 30 00 00 00 00 	movl   $0x0,0x30(%edx)
			 : "r"(data), "m" (*(volatile u32_t *) addr)
  104938:	8b 32                	mov    (%edx),%esi
	__asm__ volatile("movl	%0, %1;\n\t"
  10493a:	31 c0                	xor    %eax,%eax
  10493c:	89 06                	mov    %eax,(%esi)
	write_sscr0(spi->sscr0, spi->regs);
	write_sscr1(spi->sscr1, spi->regs);
  10493e:	8b 42 34             	mov    0x34(%edx),%eax
DEFINE_MM_REG_WRITE(sscr1, INTEL_SPI_REG_SSCR1, 32)
  104941:	8b 32                	mov    (%edx),%esi
  104943:	89 46 04             	mov    %eax,0x4(%esi)
			INTEL_SPI_DSS_RATE(config->max_sys_freq),
			INTEL_SPI_SSCR0_SCR(config->max_sys_freq) >> 8);

	/* Word size and clock rate */
	spi->sscr0 = INTEL_SPI_SSCR0_DSS(SPI_WORD_SIZE_GET(flags)) |
				INTEL_SPI_SSCR0_SCR(config->max_sys_freq);
  104946:	8b 49 04             	mov    0x4(%ecx),%ecx
	spi->sscr0 = INTEL_SPI_SSCR0_DSS(SPI_WORD_SIZE_GET(flags)) |
  104949:	89 d8                	mov    %ebx,%eax
  10494b:	c1 e8 04             	shr    $0x4,%eax
				INTEL_SPI_SSCR0_SCR(config->max_sys_freq);
  10494e:	89 ce                	mov    %ecx,%esi
  104950:	c1 e6 08             	shl    $0x8,%esi
	spi->sscr0 = INTEL_SPI_SSCR0_DSS(SPI_WORD_SIZE_GET(flags)) |
  104953:	0f b6 c0             	movzbl %al,%eax
  104956:	48                   	dec    %eax
				INTEL_SPI_SSCR0_SCR(config->max_sys_freq);
  104957:	0f b7 f6             	movzwl %si,%esi
	spi->sscr0 = INTEL_SPI_SSCR0_DSS(SPI_WORD_SIZE_GET(flags)) |
  10495a:	09 f0                	or     %esi,%eax
  10495c:	89 42 30             	mov    %eax,0x30(%edx)
	/* Tx/Rx thresholds
	 * Note: Rx thresholds needs to be 1, it does not seem to be able
	 * to trigger reliably any interrupt with another value though the
	 * rx fifo would be full
	 */
	spi->sscr1 |= INTEL_SPI_SSCR1_TFT(INTEL_SPI_SSCR1_TFT_DFLT) |
  10495f:	8b 42 34             	mov    0x34(%edx),%eax
		      INTEL_SPI_SSCR1_RFT(INTEL_SPI_SSCR1_RFT_DFLT);

	/* SPI mode */
	mode = SPI_MODE(flags);
	if (mode & SPI_MODE_CPOL) {
  104962:	f6 c3 01             	test   $0x1,%bl
  104965:	75 1b                	jne    104982 <spi_intel_configure+0x74>
	spi->sscr1 |= INTEL_SPI_SSCR1_TFT(INTEL_SPI_SSCR1_TFT_DFLT) |
  104967:	0d c0 01 00 00       	or     $0x1c0,%eax
  10496c:	eb 19                	jmp    104987 <spi_intel_configure+0x79>
DEFINE_TEST_BIT_OP(sssr_bsy, INTEL_SPI_REG_SSSR, INTEL_SPI_SSSR_BSY_BIT)
  10496e:	8b 02                	mov    (%edx),%eax
	__asm__ volatile("btl	%2, %1;\n\t"
  104970:	0f ba 60 08 04       	btl    $0x4,0x8(%eax)
  104975:	19 f6                	sbb    %esi,%esi
		return -EBUSY;
  104977:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
	if (test_bit_sscr0_sse(spi->regs) && test_bit_sssr_bsy(spi->regs)) {
  10497c:	85 f6                	test   %esi,%esi
  10497e:	74 aa                	je     10492a <spi_intel_configure+0x1c>
  104980:	eb 24                	jmp    1049a6 <spi_intel_configure+0x98>
		spi->sscr1 |= INTEL_SPI_SSCR1_SPO;
  104982:	0d c8 01 00 00       	or     $0x1c8,%eax
  104987:	89 42 34             	mov    %eax,0x34(%edx)
	}

	if (mode & SPI_MODE_CPHA) {
  10498a:	f6 c3 02             	test   $0x2,%bl
  10498d:	74 04                	je     104993 <spi_intel_configure+0x85>
		spi->sscr1 |= INTEL_SPI_SSCR1_SPH;
  10498f:	83 4a 34 10          	orl    $0x10,0x34(%edx)
	}

	if (mode & SPI_MODE_LOOP) {
  104993:	80 e3 04             	and    $0x4,%bl
  104996:	74 04                	je     10499c <spi_intel_configure+0x8e>
		spi->sscr1 |= INTEL_SPI_SSCR1_LBM;
  104998:	83 4a 34 04          	orl    $0x4,0x34(%edx)
	}

	/* Configuring the rate */
	write_dds_rate(INTEL_SPI_DSS_RATE(config->max_sys_freq), spi->regs);
  10499c:	c1 e9 08             	shr    $0x8,%ecx
DEFINE_MM_REG_WRITE(dds_rate, INTEL_SPI_REG_DDS_RATE, 32)
  10499f:	8b 02                	mov    (%edx),%eax
	__asm__ volatile("movl	%0, %1;\n\t"
  1049a1:	89 48 28             	mov    %ecx,0x28(%eax)

	return 0;
  1049a4:	31 c0                	xor    %eax,%eax
}
  1049a6:	5b                   	pop    %ebx
  1049a7:	5e                   	pop    %esi
  1049a8:	5d                   	pop    %ebp
  1049a9:	c3                   	ret    

001049aa <spi_config_0_irq>:
DEVICE_DEFINE(spi_intel_port_0, CONFIG_SPI_0_NAME, spi_intel_init,
	      spi_intel_device_ctrl, &spi_intel_data_port_0,
	      &spi_intel_config_0, POST_KERNEL, CONFIG_SPI_INIT_PRIORITY, NULL);

void spi_config_0_irq(void)
{
  1049aa:	55                   	push   %ebp
  1049ab:	89 e5                	mov    %esp,%ebp
	IRQ_CONNECT(SPI_INTEL_PORT_0_IRQ, CONFIG_SPI_0_IRQ_PRI,
		    spi_intel_isr, DEVICE_GET(spi_intel_port_0),
		    SPI_INTEL_IRQ_FLAGS);
}

  1049ad:	0f b6 05 b8 8f 10 00 	movzbl 0x108fb8,%eax
  1049b4:	6a 00                	push   $0x0
  1049b6:	6a 10                	push   $0x10
  1049b8:	50                   	push   %eax
  1049b9:	e8 3b d8 ff ff       	call   1021f9 <__irq_controller_irq_config>
  1049be:	83 c4 0c             	add    $0xc,%esp
}
  1049c1:	c9                   	leave  
  1049c2:	c3                   	ret    

001049c3 <spi_intel_isr_irq16_stub>:
	IRQ_CONNECT(SPI_INTEL_PORT_0_IRQ, CONFIG_SPI_0_IRQ_PRI,
  1049c3:	68 cc ba 10 00       	push   $0x10bacc
  1049c8:	68 02 4a 10 00       	push   $0x104a02
  1049cd:	e9 8e cb ff ff       	jmp    101560 <_interrupt_enter>

001049d2 <_spi_control_cs>:
	if (!spi->cs_gpio_port) {
  1049d2:	8b 48 08             	mov    0x8(%eax),%ecx
  1049d5:	8b 49 2c             	mov    0x2c(%ecx),%ecx
  1049d8:	85 c9                	test   %ecx,%ecx
  1049da:	74 25                	je     104a01 <_spi_control_cs+0x2f>
{
  1049dc:	55                   	push   %ebp
	gpio_pin_write(spi->cs_gpio_port, info->cs_gpio_pin, !on);
  1049dd:	85 d2                	test   %edx,%edx
  1049df:	0f 94 c2             	sete   %dl
{
  1049e2:	89 e5                	mov    %esp,%ebp
  1049e4:	53                   	push   %ebx
	gpio_pin_write(spi->cs_gpio_port, info->cs_gpio_pin, !on);
  1049e5:	0f b6 d2             	movzbl %dl,%edx
	return api->write(port, access_op, pin, value);
  1049e8:	8b 59 04             	mov    0x4(%ecx),%ebx
  1049eb:	52                   	push   %edx
	const struct spi_intel_config *info = dev->config->config_info;
  1049ec:	8b 00                	mov    (%eax),%eax
	gpio_pin_write(spi->cs_gpio_port, info->cs_gpio_pin, !on);
  1049ee:	8b 40 08             	mov    0x8(%eax),%eax
  1049f1:	ff 70 0c             	pushl  0xc(%eax)
  1049f4:	6a 00                	push   $0x0
  1049f6:	51                   	push   %ecx
  1049f7:	ff 53 04             	call   *0x4(%ebx)
  1049fa:	83 c4 10             	add    $0x10,%esp
}
  1049fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104a00:	c9                   	leave  
  104a01:	c3                   	ret    

00104a02 <spi_intel_isr>:
{
  104a02:	55                   	push   %ebp
  104a03:	89 e5                	mov    %esp,%ebp
  104a05:	57                   	push   %edi
  104a06:	56                   	push   %esi
  104a07:	53                   	push   %ebx
  104a08:	83 ec 08             	sub    $0x8,%esp
  104a0b:	8b 45 08             	mov    0x8(%ebp),%eax
	struct spi_intel_data *spi = dev->driver_data;
  104a0e:	8b 58 08             	mov    0x8(%eax),%ebx
DEFINE_MM_REG_READ(sssr, INTEL_SPI_REG_SSSR, 32)
  104a11:	8b 13                	mov    (%ebx),%edx
	__asm__ volatile("movl	%1, %0;\n\t"
  104a13:	8b 7a 08             	mov    0x8(%edx),%edi
	if (status & INTEL_SPI_SSSR_ROR) {
  104a16:	89 f9                	mov    %edi,%ecx
  104a18:	81 e1 80 00 00 00    	and    $0x80,%ecx
  104a1e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  104a21:	74 13                	je     104a36 <spi_intel_isr+0x34>
DEFINE_CLEAR_BIT_OP(sssr_ror, INTEL_SPI_REG_SSSR, INTEL_SPI_SSSR_ROR_BIT)
  104a23:	8b 13                	mov    (%ebx),%edx
	__asm__ volatile("btrl	%1, %0;\n\t"
  104a25:	0f ba 72 08 07       	btrl   $0x7,0x8(%edx)
		error = 1;
  104a2a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  104a31:	e9 9b 00 00 00       	jmp    104ad1 <spi_intel_isr+0xcf>
	if (status & INTEL_SPI_SSSR_RFS) {
  104a36:	f7 c7 40 00 00 00    	test   $0x40,%edi
  104a3c:	75 12                	jne    104a50 <spi_intel_isr+0x4e>
DEFINE_TEST_BIT_OP(sscr1_tie, INTEL_SPI_REG_SSCR1, INTEL_SPI_SSCR1_TIE_BIT)
  104a3e:	8b 13                	mov    (%ebx),%edx
	__asm__ volatile("btl	%2, %1;\n\t"
  104a40:	0f ba 62 04 01       	btl    $0x1,0x4(%edx)
  104a45:	19 db                	sbb    %ebx,%ebx
	if (test_bit_sscr1_tie(spi->regs)) {
  104a47:	85 db                	test   %ebx,%ebx
  104a49:	75 35                	jne    104a80 <spi_intel_isr+0x7e>
  104a4b:	e9 81 00 00 00       	jmp    104ad1 <spi_intel_isr+0xcf>
  104a50:	8b 50 08             	mov    0x8(%eax),%edx
DEFINE_MM_REG_READ(sssr, INTEL_SPI_REG_SSSR, 32)
  104a53:	8b 32                	mov    (%edx),%esi
	__asm__ volatile("movl	%1, %0;\n\t"
  104a55:	8b 76 08             	mov    0x8(%esi),%esi
	while (read_sssr(spi->regs) & INTEL_SPI_SSSR_RNE) {
  104a58:	83 e6 08             	and    $0x8,%esi
  104a5b:	74 e1                	je     104a3e <spi_intel_isr+0x3c>
DEFINE_MM_REG_READ(ssdr, INTEL_SPI_REG_SSDR, 32)
  104a5d:	8b 32                	mov    (%edx),%esi
  104a5f:	8b 4e 10             	mov    0x10(%esi),%ecx
		spi->received++;
  104a62:	8b 72 4c             	mov    0x4c(%edx),%esi
  104a65:	89 4d ec             	mov    %ecx,-0x14(%ebp)
		if ((spi->received - 1) < spi->r_buf_len) {
  104a68:	3b 72 44             	cmp    0x44(%edx),%esi
		spi->received++;
  104a6b:	8d 4e 01             	lea    0x1(%esi),%ecx
  104a6e:	89 4a 4c             	mov    %ecx,0x4c(%edx)
		if ((spi->received - 1) < spi->r_buf_len) {
  104a71:	73 e0                	jae    104a53 <spi_intel_isr+0x51>
			*(u8_t *)(spi->rx_buf) = data;
  104a73:	8b 72 3c             	mov    0x3c(%edx),%esi
		data = (u8_t) read_ssdr(spi->regs);
  104a76:	8a 4d ec             	mov    -0x14(%ebp),%cl
  104a79:	88 0e                	mov    %cl,(%esi)
			spi->rx_buf++;
  104a7b:	ff 42 3c             	incl   0x3c(%edx)
  104a7e:	eb d3                	jmp    104a53 <spi_intel_isr+0x51>
		if (status & INTEL_SPI_SSSR_TFS) {
  104a80:	83 e7 20             	and    $0x20,%edi
  104a83:	74 4c                	je     104ad1 <spi_intel_isr+0xcf>
  104a85:	8b 50 08             	mov    0x8(%eax),%edx
DEFINE_MM_REG_READ(sssr, INTEL_SPI_REG_SSSR, 32)
  104a88:	8b 1a                	mov    (%edx),%ebx
  104a8a:	8b 5b 08             	mov    0x8(%ebx),%ebx
	while ((status = read_sssr(spi->regs)) & INTEL_SPI_SSSR_TNF) {
  104a8d:	f6 c3 04             	test   $0x4,%bl
  104a90:	8b 72 48             	mov    0x48(%edx),%esi
  104a93:	74 30                	je     104ac5 <spi_intel_isr+0xc3>
		if (status & INTEL_SPI_SSSR_RFS) {
  104a95:	80 e3 40             	and    $0x40,%bl
  104a98:	75 2b                	jne    104ac5 <spi_intel_isr+0xc3>
		if (spi->tx_buf && (spi->transmitted < spi->t_buf_len)) {
  104a9a:	8b 5a 38             	mov    0x38(%edx),%ebx
  104a9d:	85 db                	test   %ebx,%ebx
  104a9f:	74 0e                	je     104aaf <spi_intel_isr+0xad>
  104aa1:	3b 72 40             	cmp    0x40(%edx),%esi
  104aa4:	73 09                	jae    104aaf <spi_intel_isr+0xad>
			data = *(u8_t *)(spi->tx_buf);
  104aa6:	0f b6 33             	movzbl (%ebx),%esi
			spi->tx_buf++;
  104aa9:	43                   	inc    %ebx
  104aaa:	89 5a 38             	mov    %ebx,0x38(%edx)
  104aad:	eb 07                	jmp    104ab6 <spi_intel_isr+0xb4>
		} else if (spi->transmitted < spi->trans_len) {
  104aaf:	3b 72 50             	cmp    0x50(%edx),%esi
  104ab2:	73 11                	jae    104ac5 <spi_intel_isr+0xc3>
			data = 0;
  104ab4:	31 f6                	xor    %esi,%esi
		write_ssdr(data, spi->regs);
  104ab6:	89 f1                	mov    %esi,%ecx
DEFINE_MM_REG_WRITE(ssdr, INTEL_SPI_REG_SSDR, 32)
  104ab8:	8b 1a                	mov    (%edx),%ebx
		write_ssdr(data, spi->regs);
  104aba:	0f b6 f1             	movzbl %cl,%esi
	__asm__ volatile("movl	%0, %1;\n\t"
  104abd:	89 73 10             	mov    %esi,0x10(%ebx)
		spi->transmitted++;
  104ac0:	ff 42 48             	incl   0x48(%edx)
  104ac3:	eb c3                	jmp    104a88 <spi_intel_isr+0x86>
	if (spi->transmitted == spi->trans_len) {
  104ac5:	3b 72 50             	cmp    0x50(%edx),%esi
  104ac8:	75 07                	jne    104ad1 <spi_intel_isr+0xcf>
DEFINE_CLEAR_BIT_OP(sscr1_tie, INTEL_SPI_REG_SSCR1, INTEL_SPI_SSCR1_TIE_BIT)
  104aca:	8b 12                	mov    (%edx),%edx
	__asm__ volatile("btrl	%1, %0;\n\t"
  104acc:	0f ba 72 04 01       	btrl   $0x1,0x4(%edx)
	struct spi_intel_data *spi = dev->driver_data;
  104ad1:	8b 58 08             	mov    0x8(%eax),%ebx
	if (!(spi->received == spi->trans_len) && !error) {
  104ad4:	8b 7b 50             	mov    0x50(%ebx),%edi
  104ad7:	39 7b 4c             	cmp    %edi,0x4c(%ebx)
  104ada:	74 06                	je     104ae2 <spi_intel_isr+0xe0>
  104adc:	f6 45 f0 01          	testb  $0x1,-0x10(%ebp)
  104ae0:	74 2c                	je     104b0e <spi_intel_isr+0x10c>
	spi->error = error;
  104ae2:	8a 4d f0             	mov    -0x10(%ebp),%cl
	_spi_control_cs(dev, 0);
  104ae5:	31 d2                	xor    %edx,%edx
	spi->error = error;
  104ae7:	88 4b 28             	mov    %cl,0x28(%ebx)
	_spi_control_cs(dev, 0);
  104aea:	e8 e3 fe ff ff       	call   1049d2 <_spi_control_cs>
	write_sscr1(spi->sscr1, spi->regs);
  104aef:	8b 43 34             	mov    0x34(%ebx),%eax
DEFINE_MM_REG_WRITE(sscr1, INTEL_SPI_REG_SSCR1, 32)
  104af2:	8b 13                	mov    (%ebx),%edx
	__asm__ volatile("movl	%0, %1;\n\t"
  104af4:	89 42 04             	mov    %eax,0x4(%edx)
			 : "+m" (*(volatile u32_t *) (addr))
  104af7:	8b 03                	mov    (%ebx),%eax
	__asm__ volatile("btrl	%1, %0;\n\t"
  104af9:	0f ba 30 07          	btrl   $0x7,(%eax)
	k_sem_give(&spi->device_sync_sem);
  104afd:	83 c3 18             	add    $0x18,%ebx
  104b00:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
  104b03:	59                   	pop    %ecx
  104b04:	5b                   	pop    %ebx
  104b05:	5b                   	pop    %ebx
  104b06:	5e                   	pop    %esi
  104b07:	5f                   	pop    %edi
  104b08:	5d                   	pop    %ebp
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
  104b09:	e9 cf 0d 00 00       	jmp    1058dd <_impl_k_sem_give>
  104b0e:	58                   	pop    %eax
  104b0f:	5a                   	pop    %edx
  104b10:	5b                   	pop    %ebx
  104b11:	5e                   	pop    %esi
  104b12:	5f                   	pop    %edi
  104b13:	5d                   	pop    %ebp
  104b14:	c3                   	ret    

00104b15 <spi_intel_init>:
{
  104b15:	55                   	push   %ebp
  104b16:	89 e5                	mov    %esp,%ebp
  104b18:	57                   	push   %edi
  104b19:	56                   	push   %esi
  104b1a:	53                   	push   %ebx
  104b1b:	83 ec 0c             	sub    $0xc,%esp
  104b1e:	8b 75 08             	mov    0x8(%ebp),%esi
	const struct spi_intel_config *info = dev->config->config_info;
  104b21:	8b 06                	mov    (%esi),%eax
	struct spi_intel_data *spi = dev->driver_data;
  104b23:	8b 5e 08             	mov    0x8(%esi),%ebx
	const struct spi_intel_config *info = dev->config->config_info;
  104b26:	8b 40 08             	mov    0x8(%eax),%eax
	if (!pci_bus_scan(&spi->pci_dev)) {
  104b29:	8d 7b 04             	lea    0x4(%ebx),%edi
	const struct spi_intel_config *info = dev->config->config_info;
  104b2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	pci_bus_scan_init();
  104b2f:	e8 7c ec ff ff       	call   1037b0 <pci_bus_scan_init>
	if (!pci_bus_scan(&spi->pci_dev)) {
  104b34:	57                   	push   %edi
  104b35:	e8 e4 ec ff ff       	call   10381e <pci_bus_scan>
  104b3a:	5a                   	pop    %edx
  104b3b:	83 ca ff             	or     $0xffffffff,%edx
  104b3e:	85 c0                	test   %eax,%eax
  104b40:	0f 84 8f 00 00 00    	je     104bd5 <spi_intel_init+0xc0>
	spi->regs = spi->pci_dev.addr;
  104b46:	8b 43 04             	mov    0x4(%ebx),%eax
  104b49:	89 03                	mov    %eax,(%ebx)
	pci_enable_regs(&spi->pci_dev);
  104b4b:	57                   	push   %edi
  104b4c:	e8 9c f2 ff ff       	call   103ded <pci_enable_regs>
	info->config_func();
  104b51:	8b 45 f0             	mov    -0x10(%ebp),%eax
	pci_enable_regs(&spi->pci_dev);
  104b54:	5a                   	pop    %edx
	info->config_func();
  104b55:	ff 50 04             	call   *0x4(%eax)
	const struct spi_intel_config *info = dev->config->config_info;
  104b58:	8b 06                	mov    (%esi),%eax
  104b5a:	8b 48 08             	mov    0x8(%eax),%ecx
	struct spi_intel_data *spi = dev->driver_data;
  104b5d:	8b 46 08             	mov    0x8(%esi),%eax
	gpio = device_get_binding(info->cs_gpio_name);
  104b60:	89 4d e8             	mov    %ecx,-0x18(%ebp)
	struct spi_intel_data *spi = dev->driver_data;
  104b63:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gpio = device_get_binding(info->cs_gpio_name);
  104b66:	ff 71 08             	pushl  0x8(%ecx)
  104b69:	e8 f4 04 00 00       	call   105062 <device_get_binding>
  104b6e:	59                   	pop    %ecx
  104b6f:	89 c7                	mov    %eax,%edi
	if (!gpio) {
  104b71:	85 c0                	test   %eax,%eax
  104b73:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  104b76:	75 0c                	jne    104b84 <spi_intel_init+0x6f>
		spi->cs_gpio_port = NULL;
  104b78:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104b7b:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
  104b82:	eb 2d                	jmp    104bb1 <spi_intel_init+0x9c>
	return api->config(port, access_op, pin, flags);
  104b84:	8b 40 04             	mov    0x4(%eax),%eax
  104b87:	6a 01                	push   $0x1
  104b89:	ff 71 0c             	pushl  0xc(%ecx)
  104b8c:	6a 00                	push   $0x0
  104b8e:	57                   	push   %edi
  104b8f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  104b92:	ff 10                	call   *(%eax)
  104b94:	83 c4 10             	add    $0x10,%esp
	return api->write(port, access_op, pin, value);
  104b97:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  104b9a:	8b 47 04             	mov    0x4(%edi),%eax
  104b9d:	6a 01                	push   $0x1
  104b9f:	ff 71 0c             	pushl  0xc(%ecx)
  104ba2:	6a 00                	push   $0x0
  104ba4:	57                   	push   %edi
  104ba5:	ff 50 04             	call   *0x4(%eax)
	spi->cs_gpio_port = gpio;
  104ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104bab:	83 c4 10             	add    $0x10,%esp
  104bae:	89 78 2c             	mov    %edi,0x2c(%eax)
	k_sem_init(&spi->device_sync_sem, 0, UINT_MAX);
  104bb1:	83 c3 18             	add    $0x18,%ebx
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
  104bb4:	6a ff                	push   $0xffffffff
  104bb6:	6a 00                	push   $0x0
  104bb8:	53                   	push   %ebx
  104bb9:	e8 06 0d 00 00       	call   1058c4 <_impl_k_sem_init>
	irq_enable(info->irq);
  104bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104bc1:	83 c4 0c             	add    $0xc,%esp
  104bc4:	ff 30                	pushl  (%eax)
  104bc6:	e8 54 d6 ff ff       	call   10221f <_arch_irq_enable>
  104bcb:	58                   	pop    %eax
	return 0;
  104bcc:	31 d2                	xor    %edx,%edx
	dev->driver_api = &intel_spi_api;
  104bce:	c7 46 04 cc 6c 10 00 	movl   $0x106ccc,0x4(%esi)
}
  104bd5:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104bd8:	89 d0                	mov    %edx,%eax
  104bda:	5b                   	pop    %ebx
  104bdb:	5e                   	pop    %esi
  104bdc:	5f                   	pop    %edi
  104bdd:	5d                   	pop    %ebp
  104bde:	c3                   	ret    

00104bdf <spi_intel_transceive>:
{
  104bdf:	55                   	push   %ebp
  104be0:	89 e5                	mov    %esp,%ebp
  104be2:	57                   	push   %edi
  104be3:	56                   	push   %esi
  104be4:	53                   	push   %ebx
  104be5:	8b 45 08             	mov    0x8(%ebp),%eax
  104be8:	8b 55 10             	mov    0x10(%ebp),%edx
  104beb:	8b 75 18             	mov    0x18(%ebp),%esi
	struct spi_intel_data *spi = dev->driver_data;
  104bee:	8b 58 08             	mov    0x8(%eax),%ebx
			 : "=r" (ret), "+m" (*(volatile u32_t *) (addr))
  104bf1:	8b 0b                	mov    (%ebx),%ecx
	__asm__ volatile("btl	%2, %1;\n\t"
  104bf3:	0f ba 21 07          	btl    $0x7,(%ecx)
  104bf7:	19 ff                	sbb    %edi,%edi
	if (test_bit_sscr0_sse(spi->regs) && test_bit_sssr_bsy(spi->regs)) {
  104bf9:	85 ff                	test   %edi,%edi
  104bfb:	75 67                	jne    104c64 <spi_intel_transceive+0x85>
	spi->tx_buf = tx_buf;
  104bfd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	spi->t_buf_len = tx_buf_len;
  104c00:	89 53 40             	mov    %edx,0x40(%ebx)
	spi->tx_buf = tx_buf;
  104c03:	89 4b 38             	mov    %ecx,0x38(%ebx)
	spi->rx_buf = rx_buf;
  104c06:	8b 4d 14             	mov    0x14(%ebp),%ecx
  104c09:	89 4b 3c             	mov    %ecx,0x3c(%ebx)
	spi->r_buf_len = rx_buf_len;
  104c0c:	89 73 44             	mov    %esi,0x44(%ebx)
	spi->transmitted = 0;
  104c0f:	c7 43 48 00 00 00 00 	movl   $0x0,0x48(%ebx)
	spi->received = 0;
  104c16:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
	spi->trans_len = max(tx_buf_len, rx_buf_len);
  104c1d:	39 f2                	cmp    %esi,%edx
  104c1f:	73 02                	jae    104c23 <spi_intel_transceive+0x44>
  104c21:	89 f2                	mov    %esi,%edx
  104c23:	89 53 50             	mov    %edx,0x50(%ebx)
	_spi_control_cs(dev, 1);
  104c26:	ba 01 00 00 00       	mov    $0x1,%edx
  104c2b:	e8 a2 fd ff ff       	call   1049d2 <_spi_control_cs>
	write_sscr0(spi->sscr0 | INTEL_SPI_SSCR0_SSE, spi->regs);
  104c30:	8b 43 30             	mov    0x30(%ebx),%eax
  104c33:	0c 80                	or     $0x80,%al
			 : "r"(data), "m" (*(volatile u32_t *) addr)
  104c35:	8b 13                	mov    (%ebx),%edx
	__asm__ volatile("movl	%0, %1;\n\t"
  104c37:	89 02                	mov    %eax,(%edx)
	write_sscr1(spi->sscr1 | INTEL_SPI_SSCR1_RIE |
  104c39:	8b 43 34             	mov    0x34(%ebx),%eax
DEFINE_MM_REG_WRITE(sscr1, INTEL_SPI_REG_SSCR1, 32)
  104c3c:	8b 13                	mov    (%ebx),%edx
	write_sscr1(spi->sscr1 | INTEL_SPI_SSCR1_RIE |
  104c3e:	83 c8 03             	or     $0x3,%eax
  104c41:	89 42 04             	mov    %eax,0x4(%edx)
	k_sem_take(&spi->device_sync_sem, K_FOREVER);
  104c44:	8d 43 18             	lea    0x18(%ebx),%eax
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
  104c47:	6a ff                	push   $0xffffffff
  104c49:	50                   	push   %eax
  104c4a:	e8 0c 0d 00 00       	call   10595b <_impl_k_sem_take>
  104c4f:	58                   	pop    %eax
	return 0;
  104c50:	31 c9                	xor    %ecx,%ecx
  104c52:	5a                   	pop    %edx
	if (spi->error) {
  104c53:	80 7b 28 00          	cmpb   $0x0,0x28(%ebx)
  104c57:	74 1d                	je     104c76 <spi_intel_transceive+0x97>
		spi->error = 0;
  104c59:	c6 43 28 00          	movb   $0x0,0x28(%ebx)
		return -EIO;
  104c5d:	b9 fb ff ff ff       	mov    $0xfffffffb,%ecx
  104c62:	eb 12                	jmp    104c76 <spi_intel_transceive+0x97>
DEFINE_TEST_BIT_OP(sssr_bsy, INTEL_SPI_REG_SSSR, INTEL_SPI_SSSR_BSY_BIT)
  104c64:	8b 0b                	mov    (%ebx),%ecx
	__asm__ volatile("btl	%2, %1;\n\t"
  104c66:	0f ba 61 08 04       	btl    $0x4,0x8(%ecx)
  104c6b:	19 ff                	sbb    %edi,%edi
		return -EBUSY;
  104c6d:	b9 f0 ff ff ff       	mov    $0xfffffff0,%ecx
	if (test_bit_sscr0_sse(spi->regs) && test_bit_sssr_bsy(spi->regs)) {
  104c72:	85 ff                	test   %edi,%edi
  104c74:	74 87                	je     104bfd <spi_intel_transceive+0x1e>
}
  104c76:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104c79:	89 c8                	mov    %ecx,%eax
  104c7b:	5b                   	pop    %ebx
  104c7c:	5e                   	pop    %esi
  104c7d:	5f                   	pop    %edi
  104c7e:	5d                   	pop    %ebp
  104c7f:	c3                   	ret    

00104c80 <_timer_int_handler>:
 * is pushed onto the kernel stack.
 *
 * @return N/A
 */
void _timer_int_handler(void *unused)
{
  104c80:	55                   	push   %ebp
	ARG_UNUSED(unused);

#if defined(CONFIG_HPET_TIMER_LEVEL_LOW) || defined(CONFIG_HPET_TIMER_LEVEL_HIGH)
	/* Acknowledge interrupt */
	*_HPET_GENERAL_INT_STATUS = 1;
  104c81:	c7 05 20 00 d0 fe 01 	movl   $0x1,0xfed00020
  104c88:	00 00 00 
{
  104c8b:	89 e5                	mov    %esp,%ebp
	/*
	 * one more tick has occurred -- don't need to do anything special since
	 * timer is already configured to interrupt on the following tick
	 */

	_sys_clock_tick_announce();
  104c8d:	a1 c0 b9 10 00       	mov    0x10b9c0,%eax
  104c92:	89 45 08             	mov    %eax,0x8(%ebp)
	programmed_ticks = 1;
	_sys_clock_final_tick_announce();
#endif
#endif /* !CONFIG_TICKLESS_IDLE */

}
  104c95:	5d                   	pop    %ebp
	_sys_clock_tick_announce();
  104c96:	e9 0d 0d 00 00       	jmp    1059a8 <_nano_sys_clock_tick_announce>

00104c9b <_sys_clock_driver_init>:
 *
 * @return 0
 */

int _sys_clock_driver_init(struct device *device)
{
  104c9b:	55                   	push   %ebp
  104c9c:	89 e5                	mov    %esp,%ebp
  104c9e:	57                   	push   %edi
  104c9f:	56                   	push   %esi
  104ca0:	53                   	push   %ebx
	/*
	 * Initial state of HPET is unknown, so put it back in a reset-like
	 * state (i.e. set main counter to 0 and disable interrupts)
	 */

	*_HPET_GENERAL_CONFIG &= ~HPET_ENABLE_CNF;
  104ca1:	a1 10 00 d0 fe       	mov    0xfed00010,%eax
	/*
	 * Convert the 'sys_clock_us_per_tick' value
	 * from microseconds to femptoseconds
	 */

	tickFempto = (u64_t)sys_clock_us_per_tick * 1000000000;
  104ca6:	be 00 ca 9a 3b       	mov    $0x3b9aca00,%esi
	*_HPET_GENERAL_CONFIG &= ~HPET_ENABLE_CNF;
  104cab:	83 e0 fe             	and    $0xfffffffe,%eax
  104cae:	a3 10 00 d0 fe       	mov    %eax,0xfed00010
	*_HPET_MAIN_COUNTER_VALUE = 0;
  104cb3:	c7 05 f0 00 d0 fe 00 	movl   $0x0,0xfed000f0
  104cba:	00 00 00 
	tickFempto = (u64_t)sys_clock_us_per_tick * 1000000000;
  104cbd:	89 f0                	mov    %esi,%eax
	*_HPET_MAIN_COUNTER_VALUE = 0;
  104cbf:	c7 05 f4 00 d0 fe 00 	movl   $0x0,0xfed000f4
  104cc6:	00 00 00 
	tickFempto = (u64_t)sys_clock_us_per_tick * 1000000000;
  104cc9:	f7 2d cc b9 10 00    	imull  0x10b9cc
	 * to determine the frequency of clock applied to the HPET device.
	 */

	/* read the clock period: units are fempto (10^-15) seconds */

	hpetClockPeriod = HPET_COUNTER_CLK_PERIOD(*_HPET_GENERAL_CAPS);
  104ccf:	8b 0d 00 00 d0 fe    	mov    0xfed00000,%ecx
  104cd5:	8b 1d 04 00 d0 fe    	mov    0xfed00004,%ebx
  104cdb:	89 d9                	mov    %ebx,%ecx
  104cdd:	31 db                	xor    %ebx,%ebx
	/*
	 * compute value for the comparator register to achieve
	 * 'sys_clock_us_per_tick' period
	 */

	counter_load_value = (u32_t)(tickFempto / hpetClockPeriod);
  104cdf:	53                   	push   %ebx
  104ce0:	51                   	push   %ecx
  104ce1:	52                   	push   %edx
  104ce2:	50                   	push   %eax
  104ce3:	e8 a8 b3 ff ff       	call   100090 <__udivdi3>
  104ce8:	31 db                	xor    %ebx,%ebx
	       (u32_t)(*_HPET_TIMER0_CONFIG_CAPS >> 32));

	/* Initialize sys_clock_hw_cycles_per_tick/sec */

	sys_clock_hw_cycles_per_tick = counter_load_value;
	sys_clock_hw_cycles_per_sec = sys_clock_hw_cycles_per_tick *
  104cea:	6b d0 64             	imul   $0x64,%eax,%edx
	sys_clock_hw_cycles_per_tick = counter_load_value;
  104ced:	a3 c8 b9 10 00       	mov    %eax,0x10b9c8
	sys_clock_hw_cycles_per_sec = sys_clock_hw_cycles_per_tick *
  104cf2:	89 15 c4 b9 10 00    	mov    %edx,0x10b9c4
	 * Setting 32-bit mode during the first load of the comparator
	 * value is required to work around some hardware that otherwise
	 * does not work properly.
	 */

	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_TYPE_CNF | HPET_Tn_32MODE_CNF;
  104cf8:	8b 35 00 01 d0 fe    	mov    0xfed00100,%esi
  104cfe:	8b 3d 04 01 d0 fe    	mov    0xfed00104,%edi
  104d04:	89 f2                	mov    %esi,%edx
	counter_load_value = (u32_t)(tickFempto / hpetClockPeriod);
  104d06:	83 c4 10             	add    $0x10,%esp
	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_TYPE_CNF | HPET_Tn_32MODE_CNF;
  104d09:	81 ca 08 01 00 00    	or     $0x108,%edx
  104d0f:	89 15 00 01 d0 fe    	mov    %edx,0xfed00100
  104d15:	89 3d 04 01 d0 fe    	mov    %edi,0xfed00104

	/*
	 * Set the comparator register for timer0.  The write to the comparator
	 * register is allowed due to setting the HPET_Tn_VAL_SET_CNF bit.
	 */
	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_VAL_SET_CNF;
  104d1b:	8b 35 00 01 d0 fe    	mov    0xfed00100,%esi
  104d21:	8b 3d 04 01 d0 fe    	mov    0xfed00104,%edi
  104d27:	89 f2                	mov    %esi,%edx
  104d29:	83 ca 40             	or     $0x40,%edx
  104d2c:	89 15 00 01 d0 fe    	mov    %edx,0xfed00100
  104d32:	89 3d 04 01 d0 fe    	mov    %edi,0xfed00104
	*_HPET_TIMER0_COMPARATOR = counter_load_value;
  104d38:	a3 08 01 d0 fe       	mov    %eax,0xfed00108
  104d3d:	89 1d 0c 01 d0 fe    	mov    %ebx,0xfed0010c
	/*
	 * After the comparator is loaded, 32-bit mode can be safely
	 * switched off
	 */
	*_HPET_TIMER0_CONFIG_CAPS &= ~HPET_Tn_32MODE_CNF;
  104d43:	8b 0d 00 01 d0 fe    	mov    0xfed00100,%ecx
  104d49:	8b 1d 04 01 d0 fe    	mov    0xfed00104,%ebx
  104d4f:	89 cf                	mov    %ecx,%edi
  104d51:	81 e7 ff fe ff ff    	and    $0xfffffeff,%edi
  104d57:	89 3d 00 01 d0 fe    	mov    %edi,0xfed00100
  104d5d:	89 1d 04 01 d0 fe    	mov    %ebx,0xfed00104
	 * this case program leaves the IRQ fields blank.
	 */

	*_HPET_TIMER0_CONFIG_CAPS =
#if CONFIG_HPET_TIMER_IRQ < 32
		(*_HPET_TIMER0_CONFIG_CAPS & ~HPET_Tn_INT_ROUTE_CNF_MASK) |
  104d63:	a1 00 01 d0 fe       	mov    0xfed00100,%eax
  104d68:	8b 15 04 01 d0 fe    	mov    0xfed00104,%edx
#else
		(*_HPET_TIMER0_CONFIG_CAPS & ~HPET_Tn_INT_ROUTE_CNF_MASK)
#endif

#if defined(CONFIG_HPET_TIMER_LEVEL_LOW) || defined(CONFIG_HPET_TIMER_LEVEL_HIGH)
		| HPET_Tn_INT_TYPE_CNF;
  104d6e:	89 c3                	mov    %eax,%ebx
  104d70:	81 e3 fd c1 ff ff    	and    $0xffffc1fd,%ebx
  104d76:	81 cb 02 28 00 00    	or     $0x2802,%ebx
	*_HPET_TIMER0_CONFIG_CAPS =
  104d7c:	89 1d 00 01 d0 fe    	mov    %ebx,0xfed00100
  104d82:	89 15 04 01 d0 fe    	mov    %edx,0xfed00104
	 * still has to be programmed into the interrupt controller.
	 */
	IRQ_CONNECT(CONFIG_HPET_TIMER_IRQ, CONFIG_HPET_TIMER_IRQ_PRIORITY,
		   _timer_int_handler, 0, HPET_IOAPIC_FLAGS);

	/* enable the IRQ in the interrupt controller */
  104d88:	0f b6 05 bc 8f 10 00 	movzbl 0x108fbc,%eax
  104d8f:	68 00 a0 00 00       	push   $0xa000
  104d94:	6a 14                	push   $0x14
  104d96:	50                   	push   %eax
  104d97:	e8 5d d4 ff ff       	call   1021f9 <__irq_controller_irq_config>
  104d9c:	83 c4 0c             	add    $0xc,%esp

	irq_enable(CONFIG_HPET_TIMER_IRQ);
  104d9f:	6a 14                	push   $0x14
  104da1:	e8 79 d4 ff ff       	call   10221f <_arch_irq_enable>
  104da6:	58                   	pop    %eax

	/* enable the HPET generally, and timer0 specifically */

	*_HPET_GENERAL_CONFIG |= HPET_ENABLE_CNF;
  104da7:	a1 10 00 d0 fe       	mov    0xfed00010,%eax
  104dac:	83 c8 01             	or     $0x1,%eax
  104daf:	a3 10 00 d0 fe       	mov    %eax,0xfed00010
	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_INT_ENB_CNF;

	return 0;
}
  104db4:	31 c0                	xor    %eax,%eax
	*_HPET_TIMER0_CONFIG_CAPS |= HPET_Tn_INT_ENB_CNF;
  104db6:	8b 0d 00 01 d0 fe    	mov    0xfed00100,%ecx
  104dbc:	8b 1d 04 01 d0 fe    	mov    0xfed00104,%ebx
  104dc2:	89 cf                	mov    %ecx,%edi
  104dc4:	83 cf 04             	or     $0x4,%edi
  104dc7:	89 3d 00 01 d0 fe    	mov    %edi,0xfed00100
  104dcd:	89 1d 04 01 d0 fe    	mov    %ebx,0xfed00104
}
  104dd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104dd6:	5b                   	pop    %ebx
  104dd7:	5e                   	pop    %esi
  104dd8:	5f                   	pop    %edi
  104dd9:	5d                   	pop    %ebp
  104dda:	c3                   	ret    

00104ddb <_timer_int_handler_irq20_stub>:
	IRQ_CONNECT(CONFIG_HPET_TIMER_IRQ, CONFIG_HPET_TIMER_IRQ_PRIORITY,
  104ddb:	6a 00                	push   $0x0
  104ddd:	68 80 4c 10 00       	push   $0x104c80
  104de2:	e9 79 c7 ff ff       	jmp    101560 <_interrupt_enter>

00104de7 <pinmux_input_enable>:
}

static int pinmux_input_enable(struct device *dev,
					 u32_t pin,
					 u8_t func)
{
  104de7:	55                   	push   %ebp
	ARG_UNUSED(dev);
	ARG_UNUSED(pin);
	ARG_UNUSED(func);

	return 0;
}
  104de8:	31 c0                	xor    %eax,%eax
{
  104dea:	89 e5                	mov    %esp,%ebp
}
  104dec:	5d                   	pop    %ebp
  104ded:	c3                   	ret    

00104dee <pinmux_get>:
}

static int pinmux_get(struct device *dev,
				u32_t pin,
				u32_t *func)
{
  104dee:	55                   	push   %ebp
  104def:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  104df4:	89 e5                	mov    %esp,%ebp
  104df6:	8b 55 0c             	mov    0xc(%ebp),%edx
	if (pin > PINMUX_NUM_PINS) {
  104df9:	83 fa 14             	cmp    $0x14,%edx
  104dfc:	77 14                	ja     104e12 <pinmux_get+0x24>
	struct pin_config *mux_config = drv_data->mux_config;
  104dfe:	8b 45 08             	mov    0x8(%ebp),%eax
  104e01:	8b 40 08             	mov    0x8(%eax),%eax
	*func = mux_config[pin].mode;
  104e04:	8b 40 1c             	mov    0x1c(%eax),%eax
  104e07:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
  104e0b:	8b 45 10             	mov    0x10(%ebp),%eax
  104e0e:	89 10                	mov    %edx,(%eax)
		return -EINVAL;
	}

	return _galileo_pinmux_get_pin(dev, pin, func);
  104e10:	31 c0                	xor    %eax,%eax
}
  104e12:	5d                   	pop    %ebp
  104e13:	c3                   	ret    

00104e14 <pinmux_pullup>:
  104e14:	55                   	push   %ebp
  104e15:	31 c0                	xor    %eax,%eax
  104e17:	89 e5                	mov    %esp,%ebp
  104e19:	5d                   	pop    %ebp
  104e1a:	c3                   	ret    

00104e1b <gpio_pin_write>:
{
  104e1b:	55                   	push   %ebp
  104e1c:	89 e5                	mov    %esp,%ebp
  104e1e:	53                   	push   %ebx
	return api->write(port, access_op, pin, value);
  104e1f:	8b 58 04             	mov    0x4(%eax),%ebx
  104e22:	51                   	push   %ecx
  104e23:	52                   	push   %edx
  104e24:	6a 00                	push   $0x0
  104e26:	50                   	push   %eax
  104e27:	ff 53 04             	call   *0x4(%ebx)
  104e2a:	83 c4 10             	add    $0x10,%esp
}
  104e2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104e30:	c9                   	leave  
  104e31:	c3                   	ret    

00104e32 <gpio_pin_configure>:
{
  104e32:	55                   	push   %ebp
  104e33:	89 e5                	mov    %esp,%ebp
  104e35:	53                   	push   %ebx
	return api->config(port, access_op, pin, flags);
  104e36:	8b 58 04             	mov    0x4(%eax),%ebx
  104e39:	51                   	push   %ecx
  104e3a:	52                   	push   %edx
  104e3b:	6a 00                	push   $0x0
  104e3d:	50                   	push   %eax
  104e3e:	ff 13                	call   *(%ebx)
  104e40:	83 c4 10             	add    $0x10,%esp
}
  104e43:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  104e46:	c9                   	leave  
  104e47:	c3                   	ret    

00104e48 <_galileo_pinmux_set_pin>:
{
  104e48:	55                   	push   %ebp
  104e49:	89 e5                	mov    %esp,%ebp
  104e4b:	57                   	push   %edi
  104e4c:	56                   	push   %esi
  104e4d:	53                   	push   %ebx
  104e4e:	50                   	push   %eax
	struct galileo_data * const drv_data = port->driver_data;
  104e4f:	8b 45 08             	mov    0x8(%ebp),%eax
{
  104e52:	8b 55 0c             	mov    0xc(%ebp),%edx
  104e55:	8b 4d 10             	mov    0x10(%ebp),%ecx
	if (pin > PINMUX_NUM_PINS) {
  104e58:	80 fa 14             	cmp    $0x14,%dl
	struct galileo_data * const drv_data = port->driver_data;
  104e5b:	8b 70 08             	mov    0x8(%eax),%esi
  104e5e:	b8 dd ff ff ff       	mov    $0xffffffdd,%eax
	struct pin_config *mux_config = drv_data->mux_config;
  104e63:	8b 5e 1c             	mov    0x1c(%esi),%ebx
	if (pin > PINMUX_NUM_PINS) {
  104e66:	0f 87 e9 00 00 00    	ja     104f55 <_galileo_pinmux_set_pin+0x10d>
	mux_config[pin].mode = func;
  104e6c:	0f b6 c2             	movzbl %dl,%eax
	mux_index += func;
  104e6f:	c6 45 f3 05          	movb   $0x5,-0xd(%ebp)
	mux_config[pin].mode = func;
  104e73:	89 4c c3 04          	mov    %ecx,0x4(%ebx,%eax,8)
	mux_index = NUM_PIN_FUNCS * pin;
  104e77:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
	mux_index += func;
  104e7e:	01 cb                	add    %ecx,%ebx
  104e80:	0f b6 db             	movzbl %bl,%ebx
  104e83:	6b db 54             	imul   $0x54,%ebx,%ebx
  104e86:	81 c3 00 6d 10 00    	add    $0x106d00,%ebx
		switch (enable->path[i].mux) {
  104e8c:	8b 43 04             	mov    0x4(%ebx),%eax
  104e8f:	48                   	dec    %eax
  104e90:	83 f8 06             	cmp    $0x6,%eax
  104e93:	0f 87 ae 00 00 00    	ja     104f47 <_galileo_pinmux_set_pin+0xff>
  104e99:	0f b6 7b 08          	movzbl 0x8(%ebx),%edi
  104e9d:	ff 24 85 e4 6c 10 00 	jmp    *0x106ce4(,%eax,4)
			gpio_pin_write(drv_data->exp0,
  104ea4:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  104ea7:	89 fa                	mov    %edi,%edx
  104ea9:	8b 06                	mov    (%esi),%eax
  104eab:	e8 6b ff ff ff       	call   104e1b <gpio_pin_write>
			gpio_pin_configure(drv_data->exp0,
  104eb0:	8b 4b 10             	mov    0x10(%ebx),%ecx
  104eb3:	89 fa                	mov    %edi,%edx
  104eb5:	8b 06                	mov    (%esi),%eax
  104eb7:	e9 86 00 00 00       	jmp    104f42 <_galileo_pinmux_set_pin+0xfa>
			gpio_pin_write(drv_data->exp1,
  104ebc:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  104ebf:	8b 46 04             	mov    0x4(%esi),%eax
  104ec2:	89 fa                	mov    %edi,%edx
  104ec4:	e8 52 ff ff ff       	call   104e1b <gpio_pin_write>
			gpio_pin_configure(drv_data->exp1,
  104ec9:	8b 4b 10             	mov    0x10(%ebx),%ecx
  104ecc:	8b 46 04             	mov    0x4(%esi),%eax
  104ecf:	eb 6f                	jmp    104f40 <_galileo_pinmux_set_pin+0xf8>
			gpio_pin_write(drv_data->exp2,
  104ed1:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  104ed4:	8b 46 08             	mov    0x8(%esi),%eax
  104ed7:	89 fa                	mov    %edi,%edx
  104ed9:	e8 3d ff ff ff       	call   104e1b <gpio_pin_write>
			gpio_pin_configure(drv_data->exp2,
  104ede:	8b 4b 10             	mov    0x10(%ebx),%ecx
  104ee1:	8b 46 08             	mov    0x8(%esi),%eax
  104ee4:	eb 5a                	jmp    104f40 <_galileo_pinmux_set_pin+0xf8>
			pwm_pin_set_cycles(drv_data->pwm0,
  104ee6:	83 7b 0c 01          	cmpl   $0x1,0xc(%ebx)
  104eea:	19 c0                	sbb    %eax,%eax
  104eec:	8b 56 0c             	mov    0xc(%esi),%edx
  104eef:	f7 d0                	not    %eax
					   u32_t period, u32_t pulse)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->driver_api;
	return api->pin_set(dev, pwm, period, pulse);
  104ef1:	8b 4a 04             	mov    0x4(%edx),%ecx
  104ef4:	83 e0 64             	and    $0x64,%eax
  104ef7:	50                   	push   %eax
  104ef8:	6a 64                	push   $0x64
  104efa:	57                   	push   %edi
  104efb:	52                   	push   %edx
  104efc:	ff 11                	call   *(%ecx)
  104efe:	83 c4 10             	add    $0x10,%esp
  104f01:	eb 44                	jmp    104f47 <_galileo_pinmux_set_pin+0xff>
			gpio_pin_write(drv_data->gpio_dw,
  104f03:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  104f06:	8b 46 10             	mov    0x10(%esi),%eax
  104f09:	89 fa                	mov    %edi,%edx
  104f0b:	e8 0b ff ff ff       	call   104e1b <gpio_pin_write>
			gpio_pin_configure(drv_data->gpio_dw,
  104f10:	8b 4b 10             	mov    0x10(%ebx),%ecx
  104f13:	8b 46 10             	mov    0x10(%esi),%eax
  104f16:	eb 28                	jmp    104f40 <_galileo_pinmux_set_pin+0xf8>
			gpio_pin_write(drv_data->gpio_core,
  104f18:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  104f1b:	8b 46 14             	mov    0x14(%esi),%eax
  104f1e:	89 fa                	mov    %edi,%edx
  104f20:	e8 f6 fe ff ff       	call   104e1b <gpio_pin_write>
			gpio_pin_configure(drv_data->gpio_core,
  104f25:	8b 4b 10             	mov    0x10(%ebx),%ecx
  104f28:	8b 46 14             	mov    0x14(%esi),%eax
  104f2b:	eb 13                	jmp    104f40 <_galileo_pinmux_set_pin+0xf8>
			gpio_pin_write(drv_data->gpio_resume,
  104f2d:	8b 4b 0c             	mov    0xc(%ebx),%ecx
  104f30:	8b 46 18             	mov    0x18(%esi),%eax
  104f33:	89 fa                	mov    %edi,%edx
  104f35:	e8 e1 fe ff ff       	call   104e1b <gpio_pin_write>
			gpio_pin_configure(drv_data->gpio_resume,
  104f3a:	8b 4b 10             	mov    0x10(%ebx),%ecx
  104f3d:	8b 46 18             	mov    0x18(%esi),%eax
  104f40:	89 fa                	mov    %edi,%edx
  104f42:	e8 eb fe ff ff       	call   104e32 <gpio_pin_configure>
  104f47:	83 c3 10             	add    $0x10,%ebx
	for (i = 0; i < 5; i++) {
  104f4a:	fe 4d f3             	decb   -0xd(%ebp)
  104f4d:	0f 85 39 ff ff ff    	jne    104e8c <_galileo_pinmux_set_pin+0x44>
	return 0;
  104f53:	31 c0                	xor    %eax,%eax
}
  104f55:	8d 65 f4             	lea    -0xc(%ebp),%esp
  104f58:	5b                   	pop    %ebx
  104f59:	5e                   	pop    %esi
  104f5a:	5f                   	pop    %edi
  104f5b:	5d                   	pop    %ebp
  104f5c:	c3                   	ret    

00104f5d <pinmux_galileo_initialize>:
	.pwm0 = NULL,
	.mux_config = mux_config,
};

static int pinmux_galileo_initialize(struct device *port)
{
  104f5d:	55                   	push   %ebp
  104f5e:	89 e5                	mov    %esp,%ebp
  104f60:	56                   	push   %esi
  104f61:	53                   	push   %ebx
  104f62:	8b 75 08             	mov    0x8(%ebp),%esi
	struct galileo_data *dev = port->driver_data;
  104f65:	8b 5e 08             	mov    0x8(%esi),%ebx
	int i;

	/* Grab the EXP0, EXP1, EXP2, and PWM0 now by name */
	dev->exp0 = device_get_binding(PINMUX_GALILEO_EXP0_NAME);
  104f68:	68 2c 6b 10 00       	push   $0x106b2c
  104f6d:	e8 f0 00 00 00       	call   105062 <device_get_binding>
  104f72:	5a                   	pop    %edx
	if (!dev->exp0) {
  104f73:	85 c0                	test   %eax,%eax
	dev->exp0 = device_get_binding(PINMUX_GALILEO_EXP0_NAME);
  104f75:	89 03                	mov    %eax,(%ebx)
	if (!dev->exp0) {
  104f77:	75 0a                	jne    104f83 <pinmux_galileo_initialize+0x26>
		return -EINVAL;
  104f79:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  104f7e:	e9 92 00 00 00       	jmp    105015 <pinmux_galileo_initialize+0xb8>
	}
	dev->exp1 = device_get_binding(PINMUX_GALILEO_EXP1_NAME);
  104f83:	68 bc 6a 10 00       	push   $0x106abc
  104f88:	e8 d5 00 00 00       	call   105062 <device_get_binding>
  104f8d:	59                   	pop    %ecx
	if (!dev->exp1) {
  104f8e:	85 c0                	test   %eax,%eax
	dev->exp1 = device_get_binding(PINMUX_GALILEO_EXP1_NAME);
  104f90:	89 43 04             	mov    %eax,0x4(%ebx)
	if (!dev->exp1) {
  104f93:	74 e4                	je     104f79 <pinmux_galileo_initialize+0x1c>
		return -EINVAL;
	}
	dev->exp2 = device_get_binding(PINMUX_GALILEO_EXP2_NAME);
  104f95:	68 b1 6a 10 00       	push   $0x106ab1
  104f9a:	e8 c3 00 00 00       	call   105062 <device_get_binding>
  104f9f:	5a                   	pop    %edx
	if (!dev->exp2) {
  104fa0:	85 c0                	test   %eax,%eax
	dev->exp2 = device_get_binding(PINMUX_GALILEO_EXP2_NAME);
  104fa2:	89 43 08             	mov    %eax,0x8(%ebx)
	if (!dev->exp2) {
  104fa5:	74 d2                	je     104f79 <pinmux_galileo_initialize+0x1c>
		return -EINVAL;
	}
	dev->pwm0 = device_get_binding(PINMUX_GALILEO_PWM0_NAME);
  104fa7:	68 bc 6b 10 00       	push   $0x106bbc
  104fac:	e8 b1 00 00 00       	call   105062 <device_get_binding>
  104fb1:	59                   	pop    %ecx
	if (!dev->pwm0) {
  104fb2:	85 c0                	test   %eax,%eax
	dev->pwm0 = device_get_binding(PINMUX_GALILEO_PWM0_NAME);
  104fb4:	89 43 0c             	mov    %eax,0xc(%ebx)
	if (!dev->pwm0) {
  104fb7:	74 c0                	je     104f79 <pinmux_galileo_initialize+0x1c>
		return -EINVAL;
	}
	dev->gpio_dw = device_get_binding(PINMUX_GALILEO_GPIO_DW_NAME);
  104fb9:	68 eb 6a 10 00       	push   $0x106aeb
  104fbe:	e8 9f 00 00 00       	call   105062 <device_get_binding>
  104fc3:	5a                   	pop    %edx
	if (!dev->gpio_dw) {
  104fc4:	85 c0                	test   %eax,%eax
	dev->gpio_dw = device_get_binding(PINMUX_GALILEO_GPIO_DW_NAME);
  104fc6:	89 43 10             	mov    %eax,0x10(%ebx)
	if (!dev->gpio_dw) {
  104fc9:	74 ae                	je     104f79 <pinmux_galileo_initialize+0x1c>
		return -EINVAL;
	}
	dev->gpio_core = device_get_binding(
  104fcb:	68 70 6b 10 00       	push   $0x106b70
  104fd0:	e8 8d 00 00 00       	call   105062 <device_get_binding>
  104fd5:	59                   	pop    %ecx
			    PINMUX_GALILEO_GPIO_INTEL_CW_NAME);
	if (!dev->gpio_core) {
  104fd6:	85 c0                	test   %eax,%eax
	dev->gpio_core = device_get_binding(
  104fd8:	89 43 14             	mov    %eax,0x14(%ebx)
	if (!dev->gpio_core) {
  104fdb:	74 9c                	je     104f79 <pinmux_galileo_initialize+0x1c>
		return -EINVAL;
	}
	dev->gpio_resume = device_get_binding(
  104fdd:	68 68 6b 10 00       	push   $0x106b68
  104fe2:	e8 7b 00 00 00       	call   105062 <device_get_binding>
  104fe7:	5a                   	pop    %edx
			    PINMUX_GALILEO_GPIO_INTEL_RW_NAME);
	if (!dev->gpio_resume) {
  104fe8:	85 c0                	test   %eax,%eax
	dev->gpio_resume = device_get_binding(
  104fea:	89 43 18             	mov    %eax,0x18(%ebx)
	if (!dev->gpio_resume) {
  104fed:	74 8a                	je     104f79 <pinmux_galileo_initialize+0x1c>
  104fef:	31 db                	xor    %ebx,%ebx
	/*
	 * Now that we have everything, let us start parsing everything
	 * from the above mapping as selected by the end user
	 */
	for (i = 0; i < PINMUX_NUM_PINS; i++) {
		_galileo_pinmux_set_pin(port,
  104ff1:	ff b3 04 b9 10 00    	pushl  0x10b904(%ebx)
  104ff7:	0f b6 83 00 b9 10 00 	movzbl 0x10b900(%ebx),%eax
  104ffe:	83 c3 08             	add    $0x8,%ebx
  105001:	50                   	push   %eax
  105002:	56                   	push   %esi
  105003:	e8 40 fe ff ff       	call   104e48 <_galileo_pinmux_set_pin>
  105008:	83 c4 0c             	add    $0xc,%esp
	for (i = 0; i < PINMUX_NUM_PINS; i++) {
  10500b:	81 fb a0 00 00 00    	cmp    $0xa0,%ebx
  105011:	75 de                	jne    104ff1 <pinmux_galileo_initialize+0x94>
				 mux_config[i].pin_num,
				 mux_config[i].mode);
	}

	return 0;
  105013:	31 c0                	xor    %eax,%eax
}
  105015:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105018:	5b                   	pop    %ebx
  105019:	5e                   	pop    %esi
  10501a:	5d                   	pop    %ebp
  10501b:	c3                   	ret    

0010501c <pinmux_set>:
{
  10501c:	55                   	push   %ebp
  10501d:	89 e5                	mov    %esp,%ebp
  10501f:	8b 45 0c             	mov    0xc(%ebp),%eax
	if (pin > PINMUX_NUM_PINS) {
  105022:	83 f8 14             	cmp    $0x14,%eax
  105025:	77 06                	ja     10502d <pinmux_set+0x11>
}
  105027:	5d                   	pop    %ebp
	return _galileo_pinmux_set_pin(dev, pin, func);
  105028:	e9 1b fe ff ff       	jmp    104e48 <_galileo_pinmux_set_pin>
}
  10502d:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  105032:	5d                   	pop    %ebp
  105033:	c3                   	ret    

00105034 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
  105034:	55                   	push   %ebp
  105035:	89 e5                	mov    %esp,%ebp
  105037:	56                   	push   %esi
  105038:	53                   	push   %ebx
  105039:	8b 45 08             	mov    0x8(%ebp),%eax
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
  10503c:	8b 1c 85 40 87 10 00 	mov    0x108740(,%eax,4),%ebx
  105043:	8d 70 01             	lea    0x1(%eax),%esi
  105046:	3b 1c b5 40 87 10 00 	cmp    0x108740(,%esi,4),%ebx
  10504d:	73 0c                	jae    10505b <_sys_device_do_config_level+0x27>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
  10504f:	8b 03                	mov    (%ebx),%eax
  105051:	53                   	push   %ebx
								info++) {
  105052:	83 c3 0c             	add    $0xc,%ebx
		device->init(info);
  105055:	ff 50 04             	call   *0x4(%eax)
  105058:	58                   	pop    %eax
  105059:	eb eb                	jmp    105046 <_sys_device_do_config_level+0x12>
		_k_object_init(info);
	}
}
  10505b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10505e:	5b                   	pop    %ebx
  10505f:	5e                   	pop    %esi
  105060:	5d                   	pop    %ebp
  105061:	c3                   	ret    

00105062 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
  105062:	55                   	push   %ebp
  105063:	89 e5                	mov    %esp,%ebp
  105065:	56                   	push   %esi
  105066:	53                   	push   %ebx
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
  105067:	bb d0 b9 10 00       	mov    $0x10b9d0,%ebx
{
  10506c:	8b 75 08             	mov    0x8(%ebp),%esi
	for (info = __device_init_start; info != __device_init_end; info++) {
  10506f:	81 fb f0 ba 10 00    	cmp    $0x10baf0,%ebx
  105075:	74 22                	je     105099 <device_get_binding+0x37>
		if (!info->driver_api) {
  105077:	83 7b 04 00          	cmpl   $0x0,0x4(%ebx)
  10507b:	75 05                	jne    105082 <device_get_binding+0x20>
	for (info = __device_init_start; info != __device_init_end; info++) {
  10507d:	83 c3 0c             	add    $0xc,%ebx
  105080:	eb ed                	jmp    10506f <device_get_binding+0xd>
			continue;
		}

		if (name == info->config->name) {
  105082:	8b 03                	mov    (%ebx),%eax
  105084:	8b 00                	mov    (%eax),%eax
  105086:	39 f0                	cmp    %esi,%eax
  105088:	74 11                	je     10509b <device_get_binding+0x39>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
  10508a:	50                   	push   %eax
  10508b:	56                   	push   %esi
  10508c:	e8 f7 b1 ff ff       	call   100288 <strcmp>
  105091:	5a                   	pop    %edx
  105092:	85 c0                	test   %eax,%eax
  105094:	59                   	pop    %ecx
  105095:	75 e6                	jne    10507d <device_get_binding+0x1b>
  105097:	eb 02                	jmp    10509b <device_get_binding+0x39>
			return info;
		}
	}

	return NULL;
  105099:	31 db                	xor    %ebx,%ebx
}
  10509b:	8d 65 f8             	lea    -0x8(%ebp),%esp
  10509e:	89 d8                	mov    %ebx,%eax
  1050a0:	5b                   	pop    %ebx
  1050a1:	5e                   	pop    %esi
  1050a2:	5d                   	pop    %ebp
  1050a3:	c3                   	ret    

001050a4 <device_busy_set>:
  1050a4:	55                   	push   %ebp
  1050a5:	89 e5                	mov    %esp,%ebp
  1050a7:	5d                   	pop    %ebp
  1050a8:	c3                   	ret    

001050a9 <device_busy_clear>:
	ARG_UNUSED(busy_dev);
#endif
}

void device_busy_clear(struct device *busy_dev)
{
  1050a9:	55                   	push   %ebp
  1050aa:	89 e5                	mov    %esp,%ebp
	atomic_clear_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
  1050ac:	5d                   	pop    %ebp
  1050ad:	c3                   	ret    

001050ae <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
  1050ae:	55                   	push   %ebp
  1050af:	89 e5                	mov    %esp,%ebp
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
  1050b1:	6a 02                	push   $0x2
  1050b3:	e8 7c ff ff ff       	call   105034 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
  1050b8:	c7 04 24 58 87 10 00 	movl   $0x108758,(%esp)
  1050bf:	68 74 87 10 00       	push   $0x108774
  1050c4:	e8 4c bc ff ff       	call   100d15 <printk>
  1050c9:	58                   	pop    %eax
  1050ca:	5a                   	pop    %edx

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
  1050cb:	6a 03                	push   $0x3
  1050cd:	e8 62 ff ff ff       	call   105034 <_sys_device_do_config_level>
  1050d2:	59                   	pop    %ecx
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
  1050d3:	e8 c6 0c 00 00       	call   105d9e <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
  1050d8:	e8 ce b7 ff ff       	call   1008ab <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
  1050dd:	80 25 68 9f 10 00 fe 	andb   $0xfe,0x109f68
}
  1050e4:	c9                   	leave  
  1050e5:	c3                   	ret    

001050e6 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
  1050e6:	55                   	push   %ebp
  1050e7:	89 e5                	mov    %esp,%ebp
  1050e9:	53                   	push   %ebx
  1050ea:	83 ec 38             	sub    $0x38,%esp
	_current = dummy_thread;
  1050ed:	8d 45 c4             	lea    -0x3c(%ebp),%eax
	dummy_thread->base.user_options = K_ESSENTIAL;
  1050f0:	c6 45 cc 01          	movb   $0x1,-0x34(%ebp)
	_current = dummy_thread;
  1050f4:	a3 a8 9f 10 00       	mov    %eax,0x109fa8
	dummy_thread->base.thread_state = _THREAD_DUMMY;
  1050f9:	c6 45 cd 01          	movb   $0x1,-0x33(%ebp)
  1050fd:	b8 1c 00 00 00       	mov    $0x1c,%eax
  105102:	8d 90 a0 9f 10 00    	lea    0x109fa0(%eax),%edx
  105108:	83 c0 08             	add    $0x8,%eax
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  10510b:	89 90 98 9f 10 00    	mov    %edx,0x109f98(%eax)
	list->tail = (sys_dnode_t *)list;
  105111:	89 90 9c 9f 10 00    	mov    %edx,0x109f9c(%eax)
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
  105117:	3d 1c 01 00 00       	cmp    $0x11c,%eax
  10511c:	75 e4                	jne    105102 <_Cstart+0x1c>
	_setup_new_thread(_main_thread, _main_stack,
  10511e:	6a 01                	push   $0x1
  105120:	6a 00                	push   $0x0
  105122:	6a 00                	push   $0x0
  105124:	6a 00                	push   $0x0
  105126:	6a 00                	push   $0x0
  105128:	68 ae 50 10 00       	push   $0x1050ae
  10512d:	68 00 04 00 00       	push   $0x400
  105132:	68 d8 aa 10 00       	push   $0x10aad8
  105137:	68 60 9f 10 00       	push   $0x109f60
	_ready_q.cache = _main_thread;
  10513c:	c7 05 b4 9f 10 00 60 	movl   $0x109f60,0x109fb4
  105143:	9f 10 00 
	_setup_new_thread(_main_thread, _main_stack,
  105146:	e8 0d 0b 00 00       	call   105c58 <_setup_new_thread>
  10514b:	83 c4 24             	add    $0x24,%esp
	_add_thread_to_ready_q(_main_thread);
  10514e:	68 60 9f 10 00       	push   $0x109f60
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105153:	80 25 69 9f 10 00 fb 	andb   $0xfb,0x109f69
  10515a:	e8 ae 02 00 00       	call   10540d <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
  10515f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105166:	6a 0f                	push   $0xf
  105168:	6a 00                	push   $0x0
  10516a:	6a 00                	push   $0x0
  10516c:	6a 00                	push   $0x0
  10516e:	68 ec 60 10 00       	push   $0x1060ec
  105173:	68 00 01 00 00       	push   $0x100
  105178:	68 d8 a9 10 00       	push   $0x10a9d8
  10517d:	68 20 9f 10 00       	push   $0x109f20
  105182:	e8 d1 0a 00 00       	call   105c58 <_setup_new_thread>
  105187:	83 c4 24             	add    $0x24,%esp
	_add_thread_to_ready_q(_idle_thread);
  10518a:	68 20 9f 10 00       	push   $0x109f20
  10518f:	80 25 29 9f 10 00 fb 	andb   $0xfb,0x109f29
  105196:	e8 72 02 00 00       	call   10540d <_add_thread_to_ready_q>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
  10519b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
	list->head = (sys_dnode_t *)list;
  1051a2:	c7 05 ac 9f 10 00 ac 	movl   $0x109fac,0x109fac
  1051a9:	9f 10 00 
	list->tail = (sys_dnode_t *)list;
  1051ac:	c7 05 b0 9f 10 00 ac 	movl   $0x109fac,0x109fb0
  1051b3:	9f 10 00 
 *
 * @return N/A
 */
static inline void kernel_arch_init(void)
{
	_kernel.nested = 0;
  1051b6:	c7 05 a0 9f 10 00 00 	movl   $0x0,0x109fa0
  1051bd:	00 00 00 
	_kernel.irq_stack = K_THREAD_STACK_BUFFER(_interrupt_stack) +
  1051c0:	c7 05 a4 9f 10 00 d8 	movl   $0x10b6d8,0x109fa4
  1051c7:	b6 10 00 
  1051ca:	e8 65 fe ff ff       	call   105034 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
  1051cf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1051d6:	e8 59 fe ff ff       	call   105034 <_sys_device_do_config_level>
  1051db:	58                   	pop    %eax
	__asm__ volatile (
  1051dc:	9c                   	pushf  
  1051dd:	fa                   	cli    
  1051de:	5b                   	pop    %ebx

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
  1051df:	e8 2d 06 00 00       	call   105811 <_update_time_slice_before_swap>
#endif

	return __swap(key);
  1051e4:	53                   	push   %ebx
  1051e5:	e8 ec c3 ff ff       	call   1015d6 <__swap>
  1051ea:	5a                   	pop    %edx

001051eb <_must_switch_threads>:
	return _is_preempt(_current) && __must_switch_threads();
  1051eb:	8b 15 a8 9f 10 00    	mov    0x109fa8,%edx
  1051f1:	66 83 7a 0a 7f       	cmpw   $0x7f,0xa(%edx)
  1051f6:	77 12                	ja     10520a <_must_switch_threads+0x1f>
{
  1051f8:	55                   	push   %ebp
  1051f9:	89 e5                	mov    %esp,%ebp
	return _is_preempt(_current) && __must_switch_threads();
  1051fb:	e8 61 04 00 00       	call   105661 <__must_switch_threads>
}
  105200:	5d                   	pop    %ebp
	return _is_preempt(_current) && __must_switch_threads();
  105201:	85 c0                	test   %eax,%eax
  105203:	0f 95 c0             	setne  %al
  105206:	0f b6 c0             	movzbl %al,%eax
}
  105209:	c3                   	ret    
  10520a:	31 c0                	xor    %eax,%eax
  10520c:	c3                   	ret    

0010520d <_unpend_first_thread>:
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
  10520d:	55                   	push   %ebp
	if (_handling_timeouts) {
  10520e:	8b 15 e0 a1 10 00    	mov    0x10a1e0,%edx
{
  105214:	89 e5                	mov    %esp,%ebp
	if (_handling_timeouts) {
  105216:	85 d2                	test   %edx,%edx
  105218:	8b 08                	mov    (%eax),%ecx
  10521a:	74 1f                	je     10523b <_unpend_first_thread+0x2e>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  10521c:	89 ca                	mov    %ecx,%edx
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
  10521e:	39 c8                	cmp    %ecx,%eax
  105220:	75 11                	jne    105233 <_unpend_first_thread+0x26>
  105222:	31 d2                	xor    %edx,%edx
  105224:	eb 0d                	jmp    105233 <_unpend_first_thread+0x26>
			if (_is_thread_timeout_expired(thread)) {
  105226:	83 7a 20 fe          	cmpl   $0xfffffffe,0x20(%edx)
  10522a:	75 1b                	jne    105247 <_unpend_first_thread+0x3a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
  10522c:	3b 50 04             	cmp    0x4(%eax),%edx
  10522f:	74 06                	je     105237 <_unpend_first_thread+0x2a>
  105231:	8b 12                	mov    (%edx),%edx
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
  105233:	85 d2                	test   %edx,%edx
  105235:	75 ef                	jne    105226 <_unpend_first_thread+0x19>
  105237:	31 d2                	xor    %edx,%edx
  105239:	eb 1c                	jmp    105257 <_unpend_first_thread+0x4a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  10523b:	31 d2                	xor    %edx,%edx
  10523d:	39 c8                	cmp    %ecx,%eax
  10523f:	74 16                	je     105257 <_unpend_first_thread+0x4a>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
  105241:	85 c9                	test   %ecx,%ecx
  105243:	74 12                	je     105257 <_unpend_first_thread+0x4a>
  105245:	89 ca                	mov    %ecx,%edx
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
  105247:	8b 42 04             	mov    0x4(%edx),%eax
  10524a:	8b 0a                	mov    (%edx),%ecx
  10524c:	89 08                	mov    %ecx,(%eax)
	node->next->prev = node->prev;
  10524e:	8b 0a                	mov    (%edx),%ecx
  105250:	89 41 04             	mov    %eax,0x4(%ecx)
	thread->base.thread_state &= ~_THREAD_PENDING;
  105253:	80 62 09 fd          	andb   $0xfd,0x9(%edx)
		_unpend_thread(thread);
	}

	return thread;
}
  105257:	89 d0                	mov    %edx,%eax
  105259:	5d                   	pop    %ebp
  10525a:	c3                   	ret    

0010525b <prepare_thread_to_run>:
	SYS_TRACING_OBJ_INIT(k_queue, queue);
}

#if !defined(CONFIG_POLL)
static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
  10525b:	55                   	push   %ebp
  10525c:	89 e5                	mov    %esp,%ebp
  10525e:	56                   	push   %esi
  10525f:	53                   	push   %ebx
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  105260:	8b 58 20             	mov    0x20(%eax),%ebx
  105263:	83 fb ff             	cmp    $0xffffffff,%ebx
  105266:	74 2a                	je     105292 <prepare_thread_to_run+0x37>
  105268:	8d 48 10             	lea    0x10(%eax),%ecx
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  10526b:	3b 0d b0 9f 10 00    	cmp    0x109fb0,%ecx
  105271:	74 0a                	je     10527d <prepare_thread_to_run+0x22>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
  105273:	85 c9                	test   %ecx,%ecx
  105275:	74 50                	je     1052c7 <prepare_thread_to_run+0x6c>
	return (node == list->tail) ? NULL : node->next;
  105277:	8b 48 10             	mov    0x10(%eax),%ecx
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  10527a:	01 59 10             	add    %ebx,0x10(%ecx)
	node->prev->next = node->next;
  10527d:	8b 48 14             	mov    0x14(%eax),%ecx
  105280:	8b 58 10             	mov    0x10(%eax),%ebx
  105283:	89 19                	mov    %ebx,(%ecx)
	node->next->prev = node->prev;
  105285:	8b 58 10             	mov    0x10(%eax),%ebx
  105288:	89 4b 04             	mov    %ecx,0x4(%ebx)
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
  10528b:	c7 40 20 ff ff ff ff 	movl   $0xffffffff,0x20(%eax)
  105292:	89 c3                	mov    %eax,%ebx
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105294:	8a 40 09             	mov    0x9(%eax),%al
  105297:	89 d6                	mov    %edx,%esi
  105299:	88 c2                	mov    %al,%dl
  10529b:	83 e2 fb             	and    $0xfffffffb,%edx
	return !(_is_thread_prevented_from_running(thread) ||
  10529e:	a8 1b                	test   $0x1b,%al
	thread->base.thread_state &= ~_THREAD_PRESTART;
  1052a0:	88 53 09             	mov    %dl,0x9(%ebx)
	return !(_is_thread_prevented_from_running(thread) ||
  1052a3:	75 06                	jne    1052ab <prepare_thread_to_run+0x50>
  1052a5:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
  1052a9:	74 13                	je     1052be <prepare_thread_to_run+0x63>
static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	/* write into 'eax' slot created in _Swap() entry */

	*(unsigned int *)(thread->callee_saved.esp) = value;
  1052ab:	8b 43 28             	mov    0x28(%ebx),%eax
  1052ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	thread->base.swap_data = data;
  1052b4:	89 73 0c             	mov    %esi,0xc(%ebx)
	_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value_with_data(thread, 0, data);
}
  1052b7:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1052ba:	5b                   	pop    %ebx
  1052bb:	5e                   	pop    %esi
  1052bc:	5d                   	pop    %ebp
  1052bd:	c3                   	ret    
		_add_thread_to_ready_q(thread);
  1052be:	53                   	push   %ebx
  1052bf:	e8 49 01 00 00       	call   10540d <_add_thread_to_ready_q>
  1052c4:	58                   	pop    %eax
  1052c5:	eb e4                	jmp    1052ab <prepare_thread_to_run+0x50>
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  1052c7:	a1 10 00 00 00       	mov    0x10,%eax
  1052cc:	0f 0b                	ud2    

001052ce <k_queue_init>:
{
  1052ce:	55                   	push   %ebp
  1052cf:	89 e5                	mov    %esp,%ebp
  1052d1:	8b 45 08             	mov    0x8(%ebp),%eax
	sys_dlist_init(&queue->wait_q);
  1052d4:	8d 50 08             	lea    0x8(%eax),%edx
	list->head = NULL;
  1052d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	list->tail = NULL;
  1052dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	list->head = (sys_dnode_t *)list;
  1052e4:	89 50 08             	mov    %edx,0x8(%eax)
	list->tail = (sys_dnode_t *)list;
  1052e7:	89 50 0c             	mov    %edx,0xc(%eax)
}
  1052ea:	5d                   	pop    %ebp
  1052eb:	c3                   	ret    

001052ec <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
  1052ec:	55                   	push   %ebp
  1052ed:	89 e5                	mov    %esp,%ebp
  1052ef:	57                   	push   %edi
  1052f0:	56                   	push   %esi
  1052f1:	53                   	push   %ebx
  1052f2:	51                   	push   %ecx
  1052f3:	8b 55 0c             	mov    0xc(%ebp),%edx
  1052f6:	8b 75 08             	mov    0x8(%ebp),%esi
  1052f9:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1052fc:	8b 5d 10             	mov    0x10(%ebp),%ebx
  1052ff:	9c                   	pushf  
  105300:	fa                   	cli    
  105301:	5f                   	pop    %edi
	unsigned int key = irq_lock();
#if !defined(CONFIG_POLL)
	struct k_thread *first_pending_thread;

	first_pending_thread = _unpend_first_thread(&queue->wait_q);
  105302:	8d 46 08             	lea    0x8(%esi),%eax
  105305:	e8 03 ff ff ff       	call   10520d <_unpend_first_thread>

	if (first_pending_thread) {
  10530a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10530d:	85 c0                	test   %eax,%eax
  10530f:	74 2b                	je     10533c <k_queue_insert+0x50>
		prepare_thread_to_run(first_pending_thread, data);
  105311:	89 da                	mov    %ebx,%edx
  105313:	e8 43 ff ff ff       	call   10525b <prepare_thread_to_run>
		if (!_is_in_isr() && _must_switch_threads()) {
  105318:	83 3d a0 9f 10 00 00 	cmpl   $0x0,0x109fa0
  10531f:	75 52                	jne    105373 <k_queue_insert+0x87>
  105321:	e8 c5 fe ff ff       	call   1051eb <_must_switch_threads>
  105326:	85 c0                	test   %eax,%eax
  105328:	74 49                	je     105373 <k_queue_insert+0x87>
	_update_time_slice_before_swap();
  10532a:	e8 e2 04 00 00       	call   105811 <_update_time_slice_before_swap>
	return __swap(key);
  10532f:	89 7d 08             	mov    %edi,0x8(%ebp)
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
  105332:	5a                   	pop    %edx
  105333:	5b                   	pop    %ebx
  105334:	5e                   	pop    %esi
  105335:	5f                   	pop    %edi
  105336:	5d                   	pop    %ebp
  105337:	e9 9a c2 ff ff       	jmp    1015d6 <__swap>
	if (!prev) {
  10533c:	85 d2                	test   %edx,%edx
  10533e:	75 0e                	jne    10534e <k_queue_insert+0x62>
	node->next = list->head;
  105340:	8b 06                	mov    (%esi),%eax
  105342:	89 03                	mov    %eax,(%ebx)
	list->head = node;
  105344:	89 1e                	mov    %ebx,(%esi)
	if (!list->tail) {
  105346:	83 7e 04 00          	cmpl   $0x0,0x4(%esi)
  10534a:	75 27                	jne    105373 <k_queue_insert+0x87>
  10534c:	eb 1c                	jmp    10536a <k_queue_insert+0x7e>
	} else if (!prev->next) {
  10534e:	8b 02                	mov    (%edx),%eax
  105350:	85 c0                	test   %eax,%eax
  105352:	75 1b                	jne    10536f <k_queue_insert+0x83>
	if (!list->tail) {
  105354:	8b 46 04             	mov    0x4(%esi),%eax
	node->next = NULL;
  105357:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
	if (!list->tail) {
  10535d:	85 c0                	test   %eax,%eax
  10535f:	75 07                	jne    105368 <k_queue_insert+0x7c>
		list->tail = node;
  105361:	89 5e 04             	mov    %ebx,0x4(%esi)
		list->head = node;
  105364:	89 1e                	mov    %ebx,(%esi)
  105366:	eb 0b                	jmp    105373 <k_queue_insert+0x87>
		list->tail->next = node;
  105368:	89 18                	mov    %ebx,(%eax)
		list->tail = node;
  10536a:	89 5e 04             	mov    %ebx,0x4(%esi)
  10536d:	eb 04                	jmp    105373 <k_queue_insert+0x87>
		node->next = prev->next;
  10536f:	89 03                	mov    %eax,(%ebx)
		prev->next = node;
  105371:	89 1a                	mov    %ebx,(%edx)
  105373:	0f ba e7 09          	bt     $0x9,%edi
  105377:	73 01                	jae    10537a <k_queue_insert+0x8e>
	__asm__ volatile (
  105379:	fb                   	sti    
  10537a:	58                   	pop    %eax
  10537b:	5b                   	pop    %ebx
  10537c:	5e                   	pop    %esi
  10537d:	5f                   	pop    %edi
  10537e:	5d                   	pop    %ebp
  10537f:	c3                   	ret    

00105380 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
  105380:	55                   	push   %ebp
  105381:	89 e5                	mov    %esp,%ebp
	return k_queue_insert(queue, queue->data_q.tail, data);
  105383:	ff 75 0c             	pushl  0xc(%ebp)
{
  105386:	8b 45 08             	mov    0x8(%ebp),%eax
	return k_queue_insert(queue, queue->data_q.tail, data);
  105389:	ff 70 04             	pushl  0x4(%eax)
  10538c:	50                   	push   %eax
  10538d:	e8 5a ff ff ff       	call   1052ec <k_queue_insert>
  105392:	83 c4 0c             	add    $0xc,%esp
}
  105395:	c9                   	leave  
  105396:	c3                   	ret    

00105397 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
  105397:	55                   	push   %ebp
  105398:	89 e5                	mov    %esp,%ebp
  10539a:	53                   	push   %ebx
  10539b:	8b 55 08             	mov    0x8(%ebp),%edx
  10539e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	__asm__ volatile (
  1053a1:	9c                   	pushf  
  1053a2:	fa                   	cli    
  1053a3:	5b                   	pop    %ebx
  1053a4:	8b 02                	mov    (%edx),%eax
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
  1053a6:	85 c0                	test   %eax,%eax
  1053a8:	74 15                	je     1053bf <k_queue_get+0x28>
	list->head = node->next;
  1053aa:	8b 08                	mov    (%eax),%ecx
	if (list->tail == node) {
  1053ac:	3b 42 04             	cmp    0x4(%edx),%eax
	list->head = node->next;
  1053af:	89 0a                	mov    %ecx,(%edx)
	if (list->tail == node) {
  1053b1:	75 03                	jne    1053b6 <k_queue_get+0x1f>
		list->tail = list->head;
  1053b3:	89 4a 04             	mov    %ecx,0x4(%edx)
  1053b6:	0f ba e3 09          	bt     $0x9,%ebx
  1053ba:	73 36                	jae    1053f2 <k_queue_get+0x5b>
	__asm__ volatile (
  1053bc:	fb                   	sti    
  1053bd:	eb 33                	jmp    1053f2 <k_queue_get+0x5b>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
  1053bf:	85 c9                	test   %ecx,%ecx
  1053c1:	75 0b                	jne    1053ce <k_queue_get+0x37>
  1053c3:	0f ba e3 09          	bt     $0x9,%ebx
  1053c7:	73 01                	jae    1053ca <k_queue_get+0x33>
  1053c9:	fb                   	sti    
		irq_unlock(key);
		return NULL;
  1053ca:	31 c0                	xor    %eax,%eax
  1053cc:	eb 24                	jmp    1053f2 <k_queue_get+0x5b>
	irq_unlock(key);

	return k_queue_poll(queue, timeout);

#else
	_pend_current_thread(&queue->wait_q, timeout);
  1053ce:	83 c2 08             	add    $0x8,%edx
  1053d1:	51                   	push   %ecx
  1053d2:	52                   	push   %edx
  1053d3:	e8 64 02 00 00       	call   10563c <_pend_current_thread>
  1053d8:	58                   	pop    %eax
  1053d9:	5a                   	pop    %edx
	_update_time_slice_before_swap();
  1053da:	e8 32 04 00 00       	call   105811 <_update_time_slice_before_swap>
	return __swap(key);
  1053df:	53                   	push   %ebx
  1053e0:	e8 f1 c1 ff ff       	call   1015d6 <__swap>
  1053e5:	59                   	pop    %ecx

	return _Swap(key) ? NULL : _current->base.swap_data;
  1053e6:	85 c0                	test   %eax,%eax
  1053e8:	75 e0                	jne    1053ca <k_queue_get+0x33>
  1053ea:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
  1053ef:	8b 40 0c             	mov    0xc(%eax),%eax
#endif /* CONFIG_POLL */
}
  1053f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1053f5:	c9                   	leave  
  1053f6:	c3                   	ret    

001053f7 <_get_highest_ready_prio>:
{
  1053f7:	55                   	push   %ebp
  1053f8:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
  1053fa:	0f bc 05 b8 9f 10 00 	bsf    0x109fb8,%eax
  105401:	75 05                	jne    105408 <_get_highest_ready_prio+0x11>
  105403:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	return abs_prio - _NUM_COOP_PRIO;
  105408:	83 e8 10             	sub    $0x10,%eax
}
  10540b:	5d                   	pop    %ebp
  10540c:	c3                   	ret    

0010540d <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
  10540d:	55                   	push   %ebp
  10540e:	89 e5                	mov    %esp,%ebp
  105410:	56                   	push   %esi
  105411:	53                   	push   %ebx
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  105412:	bb 01 00 00 00       	mov    $0x1,%ebx
  105417:	8b 45 08             	mov    0x8(%ebp),%eax
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  10541a:	0f be 50 0a          	movsbl 0xa(%eax),%edx
	return prio + _NUM_COOP_PRIO;
  10541e:	8d 4a 10             	lea    0x10(%edx),%ecx
	sys_dlist_t *q = &_ready_q.q[q_index];
  105421:	83 c2 12             	add    $0x12,%edx
	return (prio + _NUM_COOP_PRIO) >> 5;
  105424:	89 ce                	mov    %ecx,%esi
  105426:	c1 fe 05             	sar    $0x5,%esi
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  105429:	d3 e3                	shl    %cl,%ebx
  10542b:	8d 0c d5 ac 9f 10 00 	lea    0x109fac(,%edx,8),%ecx
	*bmap |= _get_ready_q_prio_bit(prio);
  105432:	09 1c b5 b8 9f 10 00 	or     %ebx,0x109fb8(,%esi,4)
	sys_dlist_t *q = &_ready_q.q[q_index];
  105439:	89 08                	mov    %ecx,(%eax)
	node->prev = list->tail;
  10543b:	8b 0c d5 b0 9f 10 00 	mov    0x109fb0(,%edx,8),%ecx
  105442:	89 48 04             	mov    %ecx,0x4(%eax)
	list->tail->next = node;
  105445:	8b 0c d5 b0 9f 10 00 	mov    0x109fb0(,%edx,8),%ecx
  10544c:	89 01                	mov    %eax,(%ecx)
	list->tail = node;
  10544e:	89 04 d5 b0 9f 10 00 	mov    %eax,0x109fb0(,%edx,8)
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
  105455:	8b 15 b4 9f 10 00    	mov    0x109fb4,%edx
  10545b:	8a 5a 0a             	mov    0xa(%edx),%bl
  10545e:	38 58 0a             	cmp    %bl,0xa(%eax)
  105461:	7c 02                	jl     105465 <_add_thread_to_ready_q+0x58>
  105463:	89 d0                	mov    %edx,%eax
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
  105465:	5b                   	pop    %ebx
	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
  105466:	a3 b4 9f 10 00       	mov    %eax,0x109fb4
}
  10546b:	5e                   	pop    %esi
  10546c:	5d                   	pop    %ebp
  10546d:	c3                   	ret    

0010546e <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
  10546e:	8a 50 09             	mov    0x9(%eax),%dl
  105471:	88 d1                	mov    %dl,%cl
  105473:	83 e1 fb             	and    $0xfffffffb,%ecx
	return !(_is_thread_prevented_from_running(thread) ||
  105476:	80 e2 1b             	and    $0x1b,%dl
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105479:	88 48 09             	mov    %cl,0x9(%eax)
	return !(_is_thread_prevented_from_running(thread) ||
  10547c:	75 11                	jne    10548f <_ready_thread+0x21>
  10547e:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  105482:	75 0b                	jne    10548f <_ready_thread+0x21>
{
  105484:	55                   	push   %ebp
  105485:	89 e5                	mov    %esp,%ebp
		_add_thread_to_ready_q(thread);
  105487:	50                   	push   %eax
  105488:	e8 80 ff ff ff       	call   10540d <_add_thread_to_ready_q>
  10548d:	58                   	pop    %eax
}
  10548e:	c9                   	leave  
  10548f:	c3                   	ret    

00105490 <_add_timeout>:

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
  105490:	55                   	push   %ebp
  105491:	89 e5                	mov    %esp,%ebp
  105493:	53                   	push   %ebx
	__ASSERT(timeout_in_ticks >= 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
  105494:	89 42 08             	mov    %eax,0x8(%edx)
	timeout->wait_q = (sys_dlist_t *)wait_q;
  105497:	89 4a 0c             	mov    %ecx,0xc(%edx)
{
  10549a:	8b 5d 08             	mov    0x8(%ebp),%ebx
	timeout->delta_ticks_from_prev = timeout_in_ticks;
  10549d:	89 5a 10             	mov    %ebx,0x10(%edx)
	/* If timer is submitted to expire ASAP with
	 * timeout_in_ticks (duration) as zero value,
	 * then handle timeout immedately without going
	 * through timeout queue.
	 */
	if (!timeout_in_ticks) {
  1054a0:	85 db                	test   %ebx,%ebx
  1054a2:	75 4e                	jne    1054f2 <_add_timeout+0x62>
	__asm__ volatile (
  1054a4:	9c                   	pushf  
  1054a5:	fa                   	cli    
  1054a6:	5b                   	pop    %ebx
	timeout->delta_ticks_from_prev = _INACTIVE;
  1054a7:	c7 42 10 ff ff ff ff 	movl   $0xffffffff,0x10(%edx)
	if (thread) {
  1054ae:	85 c0                	test   %eax,%eax
  1054b0:	74 2b                	je     1054dd <_add_timeout+0x4d>
	if (timeout_obj->wait_q) {
  1054b2:	83 7a 0c 00          	cmpl   $0x0,0xc(%edx)
  1054b6:	74 17                	je     1054cf <_add_timeout+0x3f>
	node->prev->next = node->next;
  1054b8:	8b 50 04             	mov    0x4(%eax),%edx
  1054bb:	8b 08                	mov    (%eax),%ecx
  1054bd:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  1054bf:	8b 08                	mov    (%eax),%ecx
  1054c1:	89 51 04             	mov    %edx,0x4(%ecx)
		thread->base.timeout.wait_q = NULL;
  1054c4:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
	thread->base.thread_state &= ~_THREAD_PENDING;
  1054cb:	80 60 09 fd          	andb   $0xfd,0x9(%eax)
		_ready_thread(thread);
  1054cf:	e8 9a ff ff ff       	call   10546e <_ready_thread>
  1054d4:	0f ba e3 09          	bt     $0x9,%ebx
  1054d8:	73 79                	jae    105553 <_add_timeout+0xc3>
	__asm__ volatile (
  1054da:	fb                   	sti    
  1054db:	eb 76                	jmp    105553 <_add_timeout+0xc3>
  1054dd:	0f ba e3 09          	bt     $0x9,%ebx
  1054e1:	73 01                	jae    1054e4 <_add_timeout+0x54>
  1054e3:	fb                   	sti    
		if (timeout->func) {
  1054e4:	8b 42 14             	mov    0x14(%edx),%eax
  1054e7:	85 c0                	test   %eax,%eax
  1054e9:	74 68                	je     105553 <_add_timeout+0xc3>
			timeout->func(timeout);
  1054eb:	89 55 08             	mov    %edx,0x8(%ebp)
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
  1054ee:	5b                   	pop    %ebx
  1054ef:	5d                   	pop    %ebp
			timeout->func(timeout);
  1054f0:	ff e0                	jmp    *%eax
	return list->head == list;
  1054f2:	a1 ac 9f 10 00       	mov    0x109fac,%eax
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  1054f7:	85 c0                	test   %eax,%eax
  1054f9:	74 07                	je     105502 <_add_timeout+0x72>
  1054fb:	3d ac 9f 10 00       	cmp    $0x109fac,%eax
  105500:	75 1d                	jne    10551f <_add_timeout+0x8f>
	node->next = list;
  105502:	c7 02 ac 9f 10 00    	movl   $0x109fac,(%edx)
	node->prev = list->tail;
  105508:	a1 b0 9f 10 00       	mov    0x109fb0,%eax
  10550d:	89 42 04             	mov    %eax,0x4(%edx)
	list->tail->next = node;
  105510:	a1 b0 9f 10 00       	mov    0x109fb0,%eax
  105515:	89 10                	mov    %edx,(%eax)
	list->tail = node;
  105517:	89 15 b0 9f 10 00    	mov    %edx,0x109fb0
  10551d:	eb 34                	jmp    105553 <_add_timeout+0xc3>
		if (*delta <= in_q->delta_ticks_from_prev) {
  10551f:	8b 4a 10             	mov    0x10(%edx),%ecx
  105522:	8b 58 10             	mov    0x10(%eax),%ebx
  105525:	39 d9                	cmp    %ebx,%ecx
  105527:	7f 17                	jg     105540 <_add_timeout+0xb0>
			in_q->delta_ticks_from_prev -= *delta;
  105529:	29 cb                	sub    %ecx,%ebx
		node->prev = insert_point->prev;
  10552b:	8b 48 04             	mov    0x4(%eax),%ecx
  10552e:	89 58 10             	mov    %ebx,0x10(%eax)
  105531:	89 4a 04             	mov    %ecx,0x4(%edx)
		node->next = insert_point;
  105534:	89 02                	mov    %eax,(%edx)
		insert_point->prev->next = node;
  105536:	8b 48 04             	mov    0x4(%eax),%ecx
  105539:	89 11                	mov    %edx,(%ecx)
		insert_point->prev = node;
  10553b:	89 50 04             	mov    %edx,0x4(%eax)
  10553e:	eb 13                	jmp    105553 <_add_timeout+0xc3>
		*delta -= in_q->delta_ticks_from_prev;
  105540:	29 d9                	sub    %ebx,%ecx
  105542:	89 4a 10             	mov    %ecx,0x10(%edx)
	return (node == list->tail) ? NULL : node->next;
  105545:	3b 05 b0 9f 10 00    	cmp    0x109fb0,%eax
  10554b:	74 b5                	je     105502 <_add_timeout+0x72>
  10554d:	8b 00                	mov    (%eax),%eax
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  10554f:	85 c0                	test   %eax,%eax
  105551:	eb ad                	jmp    105500 <_add_timeout+0x70>
}
  105553:	5b                   	pop    %ebx
  105554:	5d                   	pop    %ebp
  105555:	c3                   	ret    

00105556 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
  105556:	55                   	push   %ebp
  105557:	89 e5                	mov    %esp,%ebp
  105559:	53                   	push   %ebx
  10555a:	8b 45 08             	mov    0x8(%ebp),%eax
	node->prev->next = node->next;
  10555d:	8b 48 04             	mov    0x4(%eax),%ecx
  105560:	8b 18                	mov    (%eax),%ebx
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
  105562:	0f be 50 0a          	movsbl 0xa(%eax),%edx
  105566:	89 19                	mov    %ebx,(%ecx)
	node->next->prev = node->prev;
  105568:	8b 18                	mov    (%eax),%ebx
  10556a:	89 4b 04             	mov    %ecx,0x4(%ebx)
	sys_dlist_t *q = &_ready_q.q[q_index];
  10556d:	8d 0c d5 3c a0 10 00 	lea    0x10a03c(,%edx,8),%ecx

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
  105574:	3b 0c d5 3c a0 10 00 	cmp    0x10a03c(,%edx,8),%ecx
  10557b:	75 1c                	jne    105599 <_remove_thread_from_ready_q+0x43>
		_clear_ready_q_prio_bit(thread->base.prio);
  10557d:	0f be 48 0a          	movsbl 0xa(%eax),%ecx
	return (prio + _NUM_COOP_PRIO) >> 5;
  105581:	83 c1 10             	add    $0x10,%ecx
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  105584:	ba 01 00 00 00       	mov    $0x1,%edx
	return (prio + _NUM_COOP_PRIO) >> 5;
  105589:	89 cb                	mov    %ecx,%ebx
  10558b:	c1 fb 05             	sar    $0x5,%ebx
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
  10558e:	d3 e2                	shl    %cl,%edx
	*bmap &= ~_get_ready_q_prio_bit(prio);
  105590:	f7 d2                	not    %edx
  105592:	21 14 9d b8 9f 10 00 	and    %edx,0x109fb8(,%ebx,4)
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  105599:	8b 15 b4 9f 10 00    	mov    0x109fb4,%edx
  10559f:	39 d0                	cmp    %edx,%eax
  1055a1:	75 0c                	jne    1055af <_remove_thread_from_ready_q+0x59>
	int prio = _get_highest_ready_prio();
  1055a3:	e8 4f fe ff ff       	call   1053f7 <_get_highest_ready_prio>
  1055a8:	8b 14 c5 3c a0 10 00 	mov    0x10a03c(,%eax,8),%edx
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
  1055af:	5b                   	pop    %ebx
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  1055b0:	89 15 b4 9f 10 00    	mov    %edx,0x109fb4
}
  1055b6:	5d                   	pop    %ebp
  1055b7:	c3                   	ret    

001055b8 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
  1055b8:	55                   	push   %ebp
  1055b9:	89 e5                	mov    %esp,%ebp
  1055bb:	57                   	push   %edi
  1055bc:	56                   	push   %esi
  1055bd:	53                   	push   %ebx
  1055be:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1055c1:	8b 75 08             	mov    0x8(%ebp),%esi
  1055c4:	8b 45 10             	mov    0x10(%ebp),%eax
	return list->head == list;
  1055c7:	8b 19                	mov    (%ecx),%ebx
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
  1055c9:	85 db                	test   %ebx,%ebx
  1055cb:	74 04                	je     1055d1 <_pend_thread+0x19>
  1055cd:	39 d9                	cmp    %ebx,%ecx
  1055cf:	75 0f                	jne    1055e0 <_pend_thread+0x28>
  1055d1:	31 db                	xor    %ebx,%ebx
  1055d3:	eb 0b                	jmp    1055e0 <_pend_thread+0x28>
	return (node == list->tail) ? NULL : node->next;
  1055d5:	3b 59 04             	cmp    0x4(%ecx),%ebx
  1055d8:	74 24                	je     1055fe <_pend_thread+0x46>
  1055da:	8b 1b                	mov    (%ebx),%ebx
  1055dc:	85 db                	test   %ebx,%ebx
  1055de:	74 1e                	je     1055fe <_pend_thread+0x46>
  1055e0:	85 db                	test   %ebx,%ebx
  1055e2:	74 1a                	je     1055fe <_pend_thread+0x46>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
  1055e4:	8a 53 0a             	mov    0xa(%ebx),%dl
  1055e7:	38 56 0a             	cmp    %dl,0xa(%esi)
  1055ea:	7d e9                	jge    1055d5 <_pend_thread+0x1d>
		node->prev = insert_point->prev;
  1055ec:	8b 53 04             	mov    0x4(%ebx),%edx
		node->next = insert_point;
  1055ef:	89 1e                	mov    %ebx,(%esi)
		node->prev = insert_point->prev;
  1055f1:	89 56 04             	mov    %edx,0x4(%esi)
		insert_point->prev->next = node;
  1055f4:	8b 53 04             	mov    0x4(%ebx),%edx
  1055f7:	89 32                	mov    %esi,(%edx)
		insert_point->prev = node;
  1055f9:	89 73 04             	mov    %esi,0x4(%ebx)
  1055fc:	eb 10                	jmp    10560e <_pend_thread+0x56>
	node->next = list;
  1055fe:	89 0e                	mov    %ecx,(%esi)
	node->prev = list->tail;
  105600:	8b 51 04             	mov    0x4(%ecx),%edx
  105603:	89 56 04             	mov    %edx,0x4(%esi)
	list->tail->next = node;
  105606:	8b 51 04             	mov    0x4(%ecx),%edx
  105609:	89 32                	mov    %esi,(%edx)
	list->tail = node;
  10560b:	89 71 04             	mov    %esi,0x4(%ecx)
	thread->base.thread_state |= _THREAD_PENDING;
  10560e:	80 4e 09 02          	orb    $0x2,0x9(%esi)
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
  105612:	83 f8 ff             	cmp    $0xffffffff,%eax
  105615:	74 20                	je     105637 <_pend_thread+0x7f>
#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
extern s32_t _ms_to_ticks(s32_t ms);
#else
static ALWAYS_INLINE s32_t _ms_to_ticks(s32_t ms)
{
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
  105617:	bf 0a 00 00 00       	mov    $0xa,%edi
  10561c:	83 c0 09             	add    $0x9,%eax
  10561f:	31 d2                	xor    %edx,%edx

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
  105621:	8d 5e 10             	lea    0x10(%esi),%ebx
  105624:	f7 f7                	div    %edi
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
  105626:	40                   	inc    %eax
  105627:	89 da                	mov    %ebx,%edx
  105629:	89 45 08             	mov    %eax,0x8(%ebp)
  10562c:	89 f0                	mov    %esi,%eax

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
  10562e:	5b                   	pop    %ebx
  10562f:	5e                   	pop    %esi
  105630:	5f                   	pop    %edi
  105631:	5d                   	pop    %ebp
  105632:	e9 59 fe ff ff       	jmp    105490 <_add_timeout>
  105637:	5b                   	pop    %ebx
  105638:	5e                   	pop    %esi
  105639:	5f                   	pop    %edi
  10563a:	5d                   	pop    %ebp
  10563b:	c3                   	ret    

0010563c <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
  10563c:	55                   	push   %ebp
  10563d:	89 e5                	mov    %esp,%ebp
	_remove_thread_from_ready_q(_current);
  10563f:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  105645:	e8 0c ff ff ff       	call   105556 <_remove_thread_from_ready_q>
  10564a:	58                   	pop    %eax
	_pend_thread(_current, wait_q, timeout);
  10564b:	ff 75 0c             	pushl  0xc(%ebp)
  10564e:	ff 75 08             	pushl  0x8(%ebp)
  105651:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  105657:	e8 5c ff ff ff       	call   1055b8 <_pend_thread>
  10565c:	83 c4 0c             	add    $0xc,%esp
}
  10565f:	c9                   	leave  
  105660:	c3                   	ret    

00105661 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
  105661:	55                   	push   %ebp

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
  105662:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
{
  105667:	89 e5                	mov    %esp,%ebp
	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
  105669:	0f be 50 0a          	movsbl 0xa(%eax),%edx
  10566d:	e8 85 fd ff ff       	call   1053f7 <_get_highest_ready_prio>
#else
	return 0;
#endif
}
  105672:	5d                   	pop    %ebp
	return prio1 < prio2;
  105673:	39 c2                	cmp    %eax,%edx
  105675:	0f 9f c0             	setg   %al
  105678:	0f b6 c0             	movzbl %al,%eax
  10567b:	c3                   	ret    

0010567c <_reschedule_threads>:
{
  10567c:	55                   	push   %ebp
	return _is_preempt(_current) && __must_switch_threads();
  10567d:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
  105682:	89 e5                	mov    %esp,%ebp
  105684:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  105689:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10568c:	77 09                	ja     105697 <_reschedule_threads+0x1b>
  10568e:	e8 ce ff ff ff       	call   105661 <__must_switch_threads>
  105693:	85 c0                	test   %eax,%eax
  105695:	75 09                	jne    1056a0 <_reschedule_threads+0x24>
  105697:	0f ba e1 09          	bt     $0x9,%ecx
  10569b:	73 16                	jae    1056b3 <_reschedule_threads+0x37>
  10569d:	fb                   	sti    
}
  10569e:	eb 13                	jmp    1056b3 <_reschedule_threads+0x37>
  1056a0:	89 4d 08             	mov    %ecx,0x8(%ebp)
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
  1056a3:	c7 05 e4 a1 10 00 00 	movl   $0x0,0x10a1e4
  1056aa:	00 00 00 
}
  1056ad:	5d                   	pop    %ebp
  1056ae:	e9 23 bf ff ff       	jmp    1015d6 <__swap>
  1056b3:	5d                   	pop    %ebp
  1056b4:	c3                   	ret    

001056b5 <k_sched_unlock>:
{
  1056b5:	55                   	push   %ebp
  1056b6:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
  1056b8:	9c                   	pushf  
  1056b9:	fa                   	cli    
  1056ba:	5a                   	pop    %edx
	++_current->base.sched_locked;
  1056bb:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
  1056c0:	fe 40 0b             	incb   0xb(%eax)
	_reschedule_threads(key);
  1056c3:	52                   	push   %edx
  1056c4:	e8 b3 ff ff ff       	call   10567c <_reschedule_threads>
  1056c9:	58                   	pop    %eax
}
  1056ca:	c9                   	leave  
  1056cb:	c3                   	ret    

001056cc <_move_thread_to_end_of_prio_q>:
{
  1056cc:	55                   	push   %ebp
  1056cd:	89 e5                	mov    %esp,%ebp
  1056cf:	56                   	push   %esi
  1056d0:	53                   	push   %ebx
  1056d1:	8b 45 08             	mov    0x8(%ebp),%eax
	int q_index = _get_ready_q_q_index(thread->base.prio);
  1056d4:	0f be 50 0a          	movsbl 0xa(%eax),%edx
	sys_dlist_t *q = &_ready_q.q[q_index];
  1056d8:	83 c2 12             	add    $0x12,%edx
  1056db:	8d 0c d5 ac 9f 10 00 	lea    0x109fac(,%edx,8),%ecx
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
  1056e2:	3b 41 04             	cmp    0x4(%ecx),%eax
  1056e5:	74 44                	je     10572b <_move_thread_to_end_of_prio_q+0x5f>
	node->prev->next = node->next;
  1056e7:	8b 58 04             	mov    0x4(%eax),%ebx
  1056ea:	8b 30                	mov    (%eax),%esi
  1056ec:	89 33                	mov    %esi,(%ebx)
	node->next->prev = node->prev;
  1056ee:	8b 30                	mov    (%eax),%esi
  1056f0:	89 5e 04             	mov    %ebx,0x4(%esi)
	node->next = list;
  1056f3:	89 08                	mov    %ecx,(%eax)
	node->prev = list->tail;
  1056f5:	8b 0c d5 b0 9f 10 00 	mov    0x109fb0(,%edx,8),%ecx
  1056fc:	89 48 04             	mov    %ecx,0x4(%eax)
	list->tail->next = node;
  1056ff:	8b 0c d5 b0 9f 10 00 	mov    0x109fb0(,%edx,8),%ecx
  105706:	89 01                	mov    %eax,(%ecx)
	list->tail = node;
  105708:	89 04 d5 b0 9f 10 00 	mov    %eax,0x109fb0(,%edx,8)
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  10570f:	8b 15 b4 9f 10 00    	mov    0x109fb4,%edx
  105715:	39 d0                	cmp    %edx,%eax
  105717:	75 0c                	jne    105725 <_move_thread_to_end_of_prio_q+0x59>
	int prio = _get_highest_ready_prio();
  105719:	e8 d9 fc ff ff       	call   1053f7 <_get_highest_ready_prio>
  10571e:	8b 14 c5 3c a0 10 00 	mov    0x10a03c(,%eax,8),%edx
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
  105725:	89 15 b4 9f 10 00    	mov    %edx,0x109fb4
}
  10572b:	5b                   	pop    %ebx
  10572c:	5e                   	pop    %esi
  10572d:	5d                   	pop    %ebp
  10572e:	c3                   	ret    

0010572f <_impl_k_yield>:
{
  10572f:	55                   	push   %ebp
  105730:	89 e5                	mov    %esp,%ebp
  105732:	53                   	push   %ebx
  105733:	9c                   	pushf  
  105734:	fa                   	cli    
  105735:	5b                   	pop    %ebx
	_move_thread_to_end_of_prio_q(_current);
  105736:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  10573c:	e8 8b ff ff ff       	call   1056cc <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
  105741:	a1 b4 9f 10 00       	mov    0x109fb4,%eax
	_move_thread_to_end_of_prio_q(_current);
  105746:	5a                   	pop    %edx
	if (_current == _get_next_ready_thread()) {
  105747:	39 05 a8 9f 10 00    	cmp    %eax,0x109fa8
  10574d:	75 09                	jne    105758 <_impl_k_yield+0x29>
  10574f:	0f ba e3 09          	bt     $0x9,%ebx
  105753:	73 14                	jae    105769 <_impl_k_yield+0x3a>
	__asm__ volatile (
  105755:	fb                   	sti    
  105756:	eb 11                	jmp    105769 <_impl_k_yield+0x3a>
  105758:	53                   	push   %ebx
	_time_slice_elapsed = 0;
  105759:	c7 05 e4 a1 10 00 00 	movl   $0x0,0x10a1e4
  105760:	00 00 00 
  105763:	e8 6e be ff ff       	call   1015d6 <__swap>
  105768:	58                   	pop    %eax
}
  105769:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10576c:	c9                   	leave  
  10576d:	c3                   	ret    

0010576e <_impl_k_sleep>:
{
  10576e:	55                   	push   %ebp
  10576f:	89 e5                	mov    %esp,%ebp
  105771:	53                   	push   %ebx
  105772:	52                   	push   %edx
  105773:	8b 45 08             	mov    0x8(%ebp),%eax
	if (duration == 0) {
  105776:	85 c0                	test   %eax,%eax
  105778:	75 07                	jne    105781 <_impl_k_sleep+0x13>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
  10577a:	e8 b0 ff ff ff       	call   10572f <_impl_k_yield>
  10577f:	eb 46                	jmp    1057c7 <_impl_k_sleep+0x59>
  105781:	83 c0 09             	add    $0x9,%eax
  105784:	b9 0a 00 00 00       	mov    $0xa,%ecx
  105789:	31 d2                	xor    %edx,%edx
  10578b:	f7 f1                	div    %ecx
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
  10578d:	40                   	inc    %eax
  10578e:	89 45 f8             	mov    %eax,-0x8(%ebp)
	__asm__ volatile (
  105791:	9c                   	pushf  
  105792:	fa                   	cli    
  105793:	5b                   	pop    %ebx
	_remove_thread_from_ready_q(_current);
  105794:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  10579a:	e8 b7 fd ff ff       	call   105556 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
  10579f:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
  1057a4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1057a7:	8d 50 10             	lea    0x10(%eax),%edx
  1057aa:	89 0c 24             	mov    %ecx,(%esp)
  1057ad:	31 c9                	xor    %ecx,%ecx
  1057af:	e8 dc fc ff ff       	call   105490 <_add_timeout>
  1057b4:	89 1c 24             	mov    %ebx,(%esp)
	_time_slice_elapsed = 0;
  1057b7:	c7 05 e4 a1 10 00 00 	movl   $0x0,0x10a1e4
  1057be:	00 00 00 
  1057c1:	e8 10 be ff ff       	call   1015d6 <__swap>
  1057c6:	58                   	pop    %eax
}
  1057c7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1057ca:	c9                   	leave  
  1057cb:	c3                   	ret    

001057cc <_impl_k_current_get>:
{
  1057cc:	55                   	push   %ebp
}
  1057cd:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
{
  1057d2:	89 e5                	mov    %esp,%ebp
}
  1057d4:	5d                   	pop    %ebp
  1057d5:	c3                   	ret    

001057d6 <_is_thread_time_slicing>:
{
  1057d6:	55                   	push   %ebp
		return 0;
  1057d7:	31 c0                	xor    %eax,%eax
{
  1057d9:	89 e5                	mov    %esp,%ebp
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
  1057db:	83 3d c0 a0 10 00 00 	cmpl   $0x0,0x10a0c0
{
  1057e2:	8b 55 08             	mov    0x8(%ebp),%edx
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
  1057e5:	7e 28                	jle    10580f <_is_thread_time_slicing+0x39>
  1057e7:	3b 15 a4 87 10 00    	cmp    0x1087a4,%edx
  1057ed:	74 20                	je     10580f <_is_thread_time_slicing+0x39>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
  1057ef:	0f be 52 0a          	movsbl 0xa(%edx),%edx
  1057f3:	39 15 bc a0 10 00    	cmp    %edx,0x10a0bc
  1057f9:	7f 14                	jg     10580f <_is_thread_time_slicing+0x39>
	return list->head != list->tail;
  1057fb:	8b 04 d5 40 a0 10 00 	mov    0x10a040(,%edx,8),%eax
  105802:	39 04 d5 3c a0 10 00 	cmp    %eax,0x10a03c(,%edx,8)
  105809:	0f 95 c0             	setne  %al
  10580c:	0f b6 c0             	movzbl %al,%eax
}
  10580f:	5d                   	pop    %ebp
  105810:	c3                   	ret    

00105811 <_update_time_slice_before_swap>:
{
  105811:	55                   	push   %ebp
	_time_slice_elapsed = 0;
  105812:	c7 05 e4 a1 10 00 00 	movl   $0x0,0x10a1e4
  105819:	00 00 00 
{
  10581c:	89 e5                	mov    %esp,%ebp
}
  10581e:	5d                   	pop    %ebp
  10581f:	c3                   	ret    

00105820 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105820:	8a 50 09             	mov    0x9(%eax),%dl
  105823:	88 d1                	mov    %dl,%cl
  105825:	83 e1 fb             	and    $0xfffffffb,%ecx
	return !(_is_thread_prevented_from_running(thread) ||
  105828:	80 e2 1b             	and    $0x1b,%dl
	thread->base.thread_state &= ~_THREAD_PRESTART;
  10582b:	88 48 09             	mov    %cl,0x9(%eax)
	return !(_is_thread_prevented_from_running(thread) ||
  10582e:	75 11                	jne    105841 <_ready_thread+0x21>
  105830:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  105834:	75 0b                	jne    105841 <_ready_thread+0x21>
{
  105836:	55                   	push   %ebp
  105837:	89 e5                	mov    %esp,%ebp
		_add_thread_to_ready_q(thread);
  105839:	50                   	push   %eax
  10583a:	e8 ce fb ff ff       	call   10540d <_add_thread_to_ready_q>
  10583f:	58                   	pop    %eax
}
  105840:	c9                   	leave  
  105841:	c3                   	ret    

00105842 <_unpend_first_thread>:
{
  105842:	55                   	push   %ebp
	if (_handling_timeouts) {
  105843:	8b 15 e0 a1 10 00    	mov    0x10a1e0,%edx
{
  105849:	89 e5                	mov    %esp,%ebp
	if (_handling_timeouts) {
  10584b:	85 d2                	test   %edx,%edx
  10584d:	8b 08                	mov    (%eax),%ecx
  10584f:	74 1f                	je     105870 <_unpend_first_thread+0x2e>
	return list->head == list;
  105851:	89 ca                	mov    %ecx,%edx
	return sys_dlist_is_empty(list) ? NULL : list->head;
  105853:	39 c8                	cmp    %ecx,%eax
  105855:	75 11                	jne    105868 <_unpend_first_thread+0x26>
  105857:	31 d2                	xor    %edx,%edx
  105859:	eb 0d                	jmp    105868 <_unpend_first_thread+0x26>
			if (_is_thread_timeout_expired(thread)) {
  10585b:	83 7a 20 fe          	cmpl   $0xfffffffe,0x20(%edx)
  10585f:	75 1b                	jne    10587c <_unpend_first_thread+0x3a>
	return (node == list->tail) ? NULL : node->next;
  105861:	3b 50 04             	cmp    0x4(%eax),%edx
  105864:	74 06                	je     10586c <_unpend_first_thread+0x2a>
  105866:	8b 12                	mov    (%edx),%edx
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
  105868:	85 d2                	test   %edx,%edx
  10586a:	75 ef                	jne    10585b <_unpend_first_thread+0x19>
  10586c:	31 d2                	xor    %edx,%edx
  10586e:	eb 1c                	jmp    10588c <_unpend_first_thread+0x4a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  105870:	31 d2                	xor    %edx,%edx
  105872:	39 c8                	cmp    %ecx,%eax
  105874:	74 16                	je     10588c <_unpend_first_thread+0x4a>
	if (thread) {
  105876:	85 c9                	test   %ecx,%ecx
  105878:	74 12                	je     10588c <_unpend_first_thread+0x4a>
  10587a:	89 ca                	mov    %ecx,%edx
	node->prev->next = node->next;
  10587c:	8b 42 04             	mov    0x4(%edx),%eax
  10587f:	8b 0a                	mov    (%edx),%ecx
  105881:	89 08                	mov    %ecx,(%eax)
	node->next->prev = node->prev;
  105883:	8b 0a                	mov    (%edx),%ecx
  105885:	89 41 04             	mov    %eax,0x4(%ecx)
	thread->base.thread_state &= ~_THREAD_PENDING;
  105888:	80 62 09 fd          	andb   $0xfd,0x9(%edx)
}
  10588c:	89 d0                	mov    %edx,%eax
  10588e:	5d                   	pop    %ebp
  10588f:	c3                   	ret    

00105890 <_abort_timeout>:
{
  105890:	55                   	push   %ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  105891:	8b 48 10             	mov    0x10(%eax),%ecx
{
  105894:	89 e5                	mov    %esp,%ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  105896:	83 f9 ff             	cmp    $0xffffffff,%ecx
  105899:	74 24                	je     1058bf <_abort_timeout+0x2f>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  10589b:	3b 05 b0 9f 10 00    	cmp    0x109fb0,%eax
  1058a1:	74 05                	je     1058a8 <_abort_timeout+0x18>
	return (node == list->tail) ? NULL : node->next;
  1058a3:	8b 10                	mov    (%eax),%edx
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  1058a5:	01 4a 10             	add    %ecx,0x10(%edx)
	node->prev->next = node->next;
  1058a8:	8b 50 04             	mov    0x4(%eax),%edx
  1058ab:	8b 08                	mov    (%eax),%ecx
  1058ad:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  1058af:	8b 08                	mov    (%eax),%ecx
  1058b1:	89 51 04             	mov    %edx,0x4(%ecx)
	timeout->delta_ticks_from_prev = _INACTIVE;
  1058b4:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
	return 0;
  1058bb:	31 c0                	xor    %eax,%eax
  1058bd:	eb 03                	jmp    1058c2 <_abort_timeout+0x32>
		return _INACTIVE;
  1058bf:	83 c8 ff             	or     $0xffffffff,%eax
}
  1058c2:	5d                   	pop    %ebp
  1058c3:	c3                   	ret    

001058c4 <_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void _impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
  1058c4:	55                   	push   %ebp
  1058c5:	89 e5                	mov    %esp,%ebp
  1058c7:	8b 45 08             	mov    0x8(%ebp),%eax
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
  1058ca:	8b 55 0c             	mov    0xc(%ebp),%edx
  1058cd:	89 50 08             	mov    %edx,0x8(%eax)
	sem->limit = limit;
  1058d0:	8b 55 10             	mov    0x10(%ebp),%edx
  1058d3:	89 50 0c             	mov    %edx,0xc(%eax)
	list->head = (sys_dnode_t *)list;
  1058d6:	89 00                	mov    %eax,(%eax)
	list->tail = (sys_dnode_t *)list;
  1058d8:	89 40 04             	mov    %eax,0x4(%eax)
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
  1058db:	5d                   	pop    %ebp
  1058dc:	c3                   	ret    

001058dd <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
  1058dd:	55                   	push   %ebp
  1058de:	89 e5                	mov    %esp,%ebp
  1058e0:	57                   	push   %edi
  1058e1:	56                   	push   %esi
  1058e2:	53                   	push   %ebx
  1058e3:	8b 75 08             	mov    0x8(%ebp),%esi
  1058e6:	9c                   	pushf  
  1058e7:	fa                   	cli    
  1058e8:	5f                   	pop    %edi
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
  1058e9:	89 f0                	mov    %esi,%eax
  1058eb:	e8 52 ff ff ff       	call   105842 <_unpend_first_thread>
	if (!thread) {
  1058f0:	85 c0                	test   %eax,%eax
  1058f2:	75 12                	jne    105906 <_impl_k_sem_give+0x29>
	sem->count += (sem->count != sem->limit);
  1058f4:	8b 56 08             	mov    0x8(%esi),%edx
  1058f7:	31 c0                	xor    %eax,%eax
  1058f9:	39 56 0c             	cmp    %edx,0xc(%esi)
  1058fc:	0f 95 c0             	setne  %al
  1058ff:	01 d0                	add    %edx,%eax
  105901:	89 46 08             	mov    %eax,0x8(%esi)
  105904:	eb 49                	jmp    10594f <_impl_k_sem_give+0x72>
  105906:	89 c3                	mov    %eax,%ebx
	return _abort_timeout(&thread->base.timeout);
  105908:	8d 40 10             	lea    0x10(%eax),%eax
  10590b:	e8 80 ff ff ff       	call   105890 <_abort_timeout>
	_ready_thread(thread);
  105910:	89 d8                	mov    %ebx,%eax
  105912:	e8 09 ff ff ff       	call   105820 <_ready_thread>
  105917:	8b 43 28             	mov    0x28(%ebx),%eax
  10591a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return !_is_in_isr() && _must_switch_threads();
  105920:	83 3d a0 9f 10 00 00 	cmpl   $0x0,0x109fa0
  105927:	75 26                	jne    10594f <_impl_k_sem_give+0x72>
	return _is_preempt(_current) && __must_switch_threads();
  105929:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
  10592e:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  105933:	77 1a                	ja     10594f <_impl_k_sem_give+0x72>
  105935:	e8 27 fd ff ff       	call   105661 <__must_switch_threads>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
  10593a:	85 c0                	test   %eax,%eax
  10593c:	74 11                	je     10594f <_impl_k_sem_give+0x72>
	_update_time_slice_before_swap();
  10593e:	e8 ce fe ff ff       	call   105811 <_update_time_slice_before_swap>
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
  105943:	5b                   	pop    %ebx
	return __swap(key);
  105944:	89 7d 08             	mov    %edi,0x8(%ebp)
  105947:	5e                   	pop    %esi
  105948:	5f                   	pop    %edi
  105949:	5d                   	pop    %ebp
  10594a:	e9 87 bc ff ff       	jmp    1015d6 <__swap>
  10594f:	0f ba e7 09          	bt     $0x9,%edi
  105953:	73 01                	jae    105956 <_impl_k_sem_give+0x79>
	__asm__ volatile (
  105955:	fb                   	sti    
  105956:	5b                   	pop    %ebx
  105957:	5e                   	pop    %esi
  105958:	5f                   	pop    %edi
  105959:	5d                   	pop    %ebp
  10595a:	c3                   	ret    

0010595b <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
  10595b:	55                   	push   %ebp
  10595c:	89 e5                	mov    %esp,%ebp
  10595e:	53                   	push   %ebx
  10595f:	8b 55 08             	mov    0x8(%ebp),%edx
  105962:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	__asm__ volatile (
  105965:	9c                   	pushf  
  105966:	fa                   	cli    
  105967:	5b                   	pop    %ebx
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
  105968:	8b 42 08             	mov    0x8(%edx),%eax
  10596b:	85 c0                	test   %eax,%eax
  10596d:	74 08                	je     105977 <_impl_k_sem_take+0x1c>
		sem->count--;
  10596f:	48                   	dec    %eax
  105970:	89 42 08             	mov    %eax,0x8(%edx)
		irq_unlock(key);
		return 0;
  105973:	31 c0                	xor    %eax,%eax
  105975:	eb 09                	jmp    105980 <_impl_k_sem_take+0x25>
	}

	if (timeout == K_NO_WAIT) {
  105977:	85 c9                	test   %ecx,%ecx
  105979:	75 0e                	jne    105989 <_impl_k_sem_take+0x2e>
		irq_unlock(key);
		return -EBUSY;
  10597b:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  105980:	0f ba e3 09          	bt     $0x9,%ebx
  105984:	73 1d                	jae    1059a3 <_impl_k_sem_take+0x48>
	__asm__ volatile (
  105986:	fb                   	sti    
  105987:	eb 1a                	jmp    1059a3 <_impl_k_sem_take+0x48>
	}

	_pend_current_thread(&sem->wait_q, timeout);
  105989:	51                   	push   %ecx
  10598a:	52                   	push   %edx
  10598b:	e8 ac fc ff ff       	call   10563c <_pend_current_thread>
  105990:	58                   	pop    %eax
  105991:	5a                   	pop    %edx
	_update_time_slice_before_swap();
  105992:	e8 7a fe ff ff       	call   105811 <_update_time_slice_before_swap>
	return __swap(key);
  105997:	89 5d 08             	mov    %ebx,0x8(%ebp)

	return _Swap(key);
}
  10599a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10599d:	c9                   	leave  
  10599e:	e9 33 bc ff ff       	jmp    1015d6 <__swap>
  1059a3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1059a6:	c9                   	leave  
  1059a7:	c3                   	ret    

001059a8 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
  1059a8:	55                   	push   %ebp
  1059a9:	89 e5                	mov    %esp,%ebp
  1059ab:	57                   	push   %edi
  1059ac:	56                   	push   %esi
  1059ad:	53                   	push   %ebx
  1059ae:	83 ec 08             	sub    $0x8,%esp
  1059b1:	8b 75 08             	mov    0x8(%ebp),%esi
	__asm__ volatile (
  1059b4:	9c                   	pushf  
  1059b5:	fa                   	cli    
  1059b6:	5f                   	pop    %edi

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
  1059b7:	8b 0d e8 a1 10 00    	mov    0x10a1e8,%ecx
  1059bd:	89 f0                	mov    %esi,%eax
  1059bf:	8b 1d ec a1 10 00    	mov    0x10a1ec,%ebx
  1059c5:	99                   	cltd   
  1059c6:	01 c8                	add    %ecx,%eax
  1059c8:	11 da                	adc    %ebx,%edx
  1059ca:	a3 e8 a1 10 00       	mov    %eax,0x10a1e8
  1059cf:	0f ba e7 09          	bt     $0x9,%edi
  1059d3:	89 15 ec a1 10 00    	mov    %edx,0x10a1ec
  1059d9:	73 01                	jae    1059dc <_nano_sys_clock_tick_announce+0x34>
	__asm__ volatile (
  1059db:	fb                   	sti    
	list->head = (sys_dnode_t *)list;
  1059dc:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  1059df:	89 4d ec             	mov    %ecx,-0x14(%ebp)
	list->tail = (sys_dnode_t *)list;
  1059e2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
	__asm__ volatile (
  1059e5:	9c                   	pushf  
  1059e6:	fa                   	cli    
  1059e7:	5b                   	pop    %ebx
	return list->head == list;
  1059e8:	a1 ac 9f 10 00       	mov    0x109fac,%eax
  1059ed:	89 da                	mov    %ebx,%edx
	if (!head) {
  1059ef:	85 c0                	test   %eax,%eax
  1059f1:	74 07                	je     1059fa <_nano_sys_clock_tick_announce+0x52>
  1059f3:	3d ac 9f 10 00       	cmp    $0x109fac,%eax
  1059f8:	75 09                	jne    105a03 <_nano_sys_clock_tick_announce+0x5b>
  1059fa:	0f ba e3 09          	bt     $0x9,%ebx
  1059fe:	73 70                	jae    105a70 <_nano_sys_clock_tick_announce+0xc8>
	__asm__ volatile (
  105a00:	fb                   	sti    
  105a01:	eb 6d                	jmp    105a70 <_nano_sys_clock_tick_announce+0xc8>
	head->delta_ticks_from_prev -= ticks;
  105a03:	29 70 10             	sub    %esi,0x10(%eax)
	_handling_timeouts = 1;
  105a06:	c7 05 e0 a1 10 00 01 	movl   $0x1,0x10a1e0
  105a0d:	00 00 00 
	while (timeout && timeout->delta_ticks_from_prev == 0) {
  105a10:	83 78 10 00          	cmpl   $0x0,0x10(%eax)
  105a14:	75 3e                	jne    105a54 <_nano_sys_clock_tick_announce+0xac>
	node->prev->next = node->next;
  105a16:	8b 58 04             	mov    0x4(%eax),%ebx
  105a19:	8b 38                	mov    (%eax),%edi
  105a1b:	0f ba e2 09          	bt     $0x9,%edx
  105a1f:	89 3b                	mov    %edi,(%ebx)
	node->next->prev = node->prev;
  105a21:	8b 38                	mov    (%eax),%edi
  105a23:	89 5f 04             	mov    %ebx,0x4(%edi)
	node->next = list->head;
  105a26:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  105a29:	89 18                	mov    %ebx,(%eax)
	node->prev = list;
  105a2b:	89 48 04             	mov    %ecx,0x4(%eax)
	list->head->prev = node;
  105a2e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
	list->head = node;
  105a31:	89 45 ec             	mov    %eax,-0x14(%ebp)
	list->head->prev = node;
  105a34:	89 43 04             	mov    %eax,0x4(%ebx)
		timeout->delta_ticks_from_prev = _EXPIRED;
  105a37:	c7 40 10 fe ff ff ff 	movl   $0xfffffffe,0x10(%eax)
  105a3e:	73 01                	jae    105a41 <_nano_sys_clock_tick_announce+0x99>
  105a40:	fb                   	sti    
	__asm__ volatile (
  105a41:	9c                   	pushf  
  105a42:	fa                   	cli    
  105a43:	5a                   	pop    %edx
	return list->head == list;
  105a44:	a1 ac 9f 10 00       	mov    0x109fac,%eax
	return sys_dlist_is_empty(list) ? NULL : list->head;
  105a49:	3d ac 9f 10 00       	cmp    $0x109fac,%eax
  105a4e:	74 04                	je     105a54 <_nano_sys_clock_tick_announce+0xac>
	while (timeout && timeout->delta_ticks_from_prev == 0) {
  105a50:	85 c0                	test   %eax,%eax
  105a52:	75 bc                	jne    105a10 <_nano_sys_clock_tick_announce+0x68>
  105a54:	0f ba e2 09          	bt     $0x9,%edx
  105a58:	73 01                	jae    105a5b <_nano_sys_clock_tick_announce+0xb3>
	__asm__ volatile (
  105a5a:	fb                   	sti    
	return list->head == list;
  105a5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
  105a5e:	39 c8                	cmp    %ecx,%eax
  105a60:	74 04                	je     105a66 <_nano_sys_clock_tick_announce+0xbe>
  105a62:	85 c0                	test   %eax,%eax
  105a64:	75 62                	jne    105ac8 <_nano_sys_clock_tick_announce+0x120>
	_handling_timeouts = 0;
  105a66:	c7 05 e0 a1 10 00 00 	movl   $0x0,0x10a1e0
  105a6d:	00 00 00 
	if (!_is_thread_time_slicing(_current)) {
  105a70:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  105a76:	e8 5b fd ff ff       	call   1057d6 <_is_thread_time_slicing>
  105a7b:	59                   	pop    %ecx
  105a7c:	85 c0                	test   %eax,%eax
  105a7e:	0f 84 e3 00 00 00    	je     105b67 <_nano_sys_clock_tick_announce+0x1bf>
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NON_OPTIMIZED_TICKS_PER_SEC
	return (MSEC_PER_SEC * (u64_t)ticks) / sys_clock_ticks_per_sec;
#else
	return (u64_t)ticks * _ms_per_tick;
  105a84:	6b f6 0a             	imul   $0xa,%esi,%esi
	_time_slice_elapsed += __ticks_to_ms(ticks);
  105a87:	03 35 e4 a1 10 00    	add    0x10a1e4,%esi
  105a8d:	89 35 e4 a1 10 00    	mov    %esi,0x10a1e4
	if (_time_slice_elapsed >= _time_slice_duration) {
  105a93:	3b 35 c0 a0 10 00    	cmp    0x10a0c0,%esi
  105a99:	0f 8c c8 00 00 00    	jl     105b67 <_nano_sys_clock_tick_announce+0x1bf>
		_time_slice_elapsed = 0;
  105a9f:	c7 05 e4 a1 10 00 00 	movl   $0x0,0x10a1e4
  105aa6:	00 00 00 
	__asm__ volatile (
  105aa9:	9c                   	pushf  
  105aaa:	fa                   	cli    
  105aab:	5b                   	pop    %ebx
		_move_thread_to_end_of_prio_q(_current);
  105aac:	ff 35 a8 9f 10 00    	pushl  0x109fa8
  105ab2:	e8 15 fc ff ff       	call   1056cc <_move_thread_to_end_of_prio_q>
  105ab7:	5a                   	pop    %edx
  105ab8:	0f ba e3 09          	bt     $0x9,%ebx
  105abc:	0f 83 a5 00 00 00    	jae    105b67 <_nano_sys_clock_tick_announce+0x1bf>
	__asm__ volatile (
  105ac2:	fb                   	sti    
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
  105ac3:	e9 9f 00 00 00       	jmp    105b67 <_nano_sys_clock_tick_announce+0x1bf>
  105ac8:	31 db                	xor    %ebx,%ebx
	return (node == list->tail) ? NULL : node->next;
  105aca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  105acd:	74 54                	je     105b23 <_nano_sys_clock_tick_announce+0x17b>
  105acf:	8b 18                	mov    (%eax),%ebx
  105ad1:	eb 50                	jmp    105b23 <_nano_sys_clock_tick_announce+0x17b>
	if (timeout_obj->wait_q) {
  105ad3:	83 78 0c 00          	cmpl   $0x0,0xc(%eax)
  105ad7:	74 17                	je     105af0 <_nano_sys_clock_tick_announce+0x148>
	node->prev->next = node->next;
  105ad9:	8b 42 04             	mov    0x4(%edx),%eax
  105adc:	8b 0a                	mov    (%edx),%ecx
  105ade:	89 08                	mov    %ecx,(%eax)
	node->next->prev = node->prev;
  105ae0:	8b 0a                	mov    (%edx),%ecx
  105ae2:	89 41 04             	mov    %eax,0x4(%ecx)
		thread->base.timeout.wait_q = NULL;
  105ae5:	c7 42 1c 00 00 00 00 	movl   $0x0,0x1c(%edx)
	thread->base.thread_state &= ~_THREAD_PENDING;
  105aec:	80 62 09 fd          	andb   $0xfd,0x9(%edx)
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105af0:	8a 42 09             	mov    0x9(%edx),%al
  105af3:	88 c1                	mov    %al,%cl
  105af5:	83 e1 fb             	and    $0xfffffffb,%ecx
	return !(_is_thread_prevented_from_running(thread) ||
  105af8:	a8 1b                	test   $0x1b,%al
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105afa:	88 4a 09             	mov    %cl,0x9(%edx)
	return !(_is_thread_prevented_from_running(thread) ||
  105afd:	74 43                	je     105b42 <_nano_sys_clock_tick_announce+0x19a>
  105aff:	0f ba e7 09          	bt     $0x9,%edi
  105b03:	73 01                	jae    105b06 <_nano_sys_clock_tick_announce+0x15e>
  105b05:	fb                   	sti    
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
  105b06:	85 db                	test   %ebx,%ebx
  105b08:	0f 84 58 ff ff ff    	je     105a66 <_nano_sys_clock_tick_announce+0xbe>
  105b0e:	31 d2                	xor    %edx,%edx
	return (node == list->tail) ? NULL : node->next;
  105b10:	39 5d f0             	cmp    %ebx,-0x10(%ebp)
  105b13:	74 02                	je     105b17 <_nano_sys_clock_tick_announce+0x16f>
  105b15:	8b 13                	mov    (%ebx),%edx
  105b17:	85 db                	test   %ebx,%ebx
  105b19:	0f 84 47 ff ff ff    	je     105a66 <_nano_sys_clock_tick_announce+0xbe>
  105b1f:	89 d8                	mov    %ebx,%eax
  105b21:	89 d3                	mov    %edx,%ebx
	node->prev->next = node->next;
  105b23:	8b 50 04             	mov    0x4(%eax),%edx
  105b26:	8b 08                	mov    (%eax),%ecx
  105b28:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  105b2a:	8b 08                	mov    (%eax),%ecx
  105b2c:	89 51 04             	mov    %edx,0x4(%ecx)
	struct k_thread *thread = timeout->thread;
  105b2f:	8b 50 08             	mov    0x8(%eax),%edx
	__asm__ volatile (
  105b32:	9c                   	pushf  
  105b33:	fa                   	cli    
  105b34:	5f                   	pop    %edi
	timeout->delta_ticks_from_prev = _INACTIVE;
  105b35:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
	if (thread) {
  105b3c:	85 d2                	test   %edx,%edx
  105b3e:	75 93                	jne    105ad3 <_nano_sys_clock_tick_announce+0x12b>
  105b40:	eb 08                	jmp    105b4a <_nano_sys_clock_tick_announce+0x1a2>
  105b42:	83 7a 20 ff          	cmpl   $0xffffffff,0x20(%edx)
  105b46:	75 b7                	jne    105aff <_nano_sys_clock_tick_announce+0x157>
  105b48:	eb 14                	jmp    105b5e <_nano_sys_clock_tick_announce+0x1b6>
  105b4a:	0f ba e7 09          	bt     $0x9,%edi
  105b4e:	73 01                	jae    105b51 <_nano_sys_clock_tick_announce+0x1a9>
	__asm__ volatile (
  105b50:	fb                   	sti    
		if (timeout->func) {
  105b51:	8b 50 14             	mov    0x14(%eax),%edx
  105b54:	85 d2                	test   %edx,%edx
  105b56:	74 ae                	je     105b06 <_nano_sys_clock_tick_announce+0x15e>
			timeout->func(timeout);
  105b58:	50                   	push   %eax
  105b59:	ff d2                	call   *%edx
  105b5b:	5f                   	pop    %edi
  105b5c:	eb a8                	jmp    105b06 <_nano_sys_clock_tick_announce+0x15e>
		_add_thread_to_ready_q(thread);
  105b5e:	52                   	push   %edx
  105b5f:	e8 a9 f8 ff ff       	call   10540d <_add_thread_to_ready_q>
  105b64:	58                   	pop    %eax
  105b65:	eb 98                	jmp    105aff <_nano_sys_clock_tick_announce+0x157>
  105b67:	8d 65 f4             	lea    -0xc(%ebp),%esp
  105b6a:	5b                   	pop    %ebx
  105b6b:	5e                   	pop    %esi
  105b6c:	5f                   	pop    %edi
  105b6d:	5d                   	pop    %ebp
  105b6e:	c3                   	ret    

00105b6f <_is_thread_ready>:
{
  105b6f:	55                   	push   %ebp
  105b70:	89 e5                	mov    %esp,%ebp
	return !(_is_thread_prevented_from_running(thread) ||
  105b72:	f6 40 09 1f          	testb  $0x1f,0x9(%eax)
  105b76:	75 09                	jne    105b81 <_is_thread_ready+0x12>
  105b78:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  105b7c:	0f 94 c0             	sete   %al
  105b7f:	eb 02                	jmp    105b83 <_is_thread_ready+0x14>
  105b81:	31 c0                	xor    %eax,%eax
  105b83:	0f b6 c0             	movzbl %al,%eax
}
  105b86:	5d                   	pop    %ebp
  105b87:	c3                   	ret    

00105b88 <_abort_timeout>:
{
  105b88:	55                   	push   %ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  105b89:	8b 48 10             	mov    0x10(%eax),%ecx
{
  105b8c:	89 e5                	mov    %esp,%ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  105b8e:	83 f9 ff             	cmp    $0xffffffff,%ecx
  105b91:	74 24                	je     105bb7 <_abort_timeout+0x2f>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  105b93:	3b 05 b0 9f 10 00    	cmp    0x109fb0,%eax
  105b99:	74 05                	je     105ba0 <_abort_timeout+0x18>
	return (node == list->tail) ? NULL : node->next;
  105b9b:	8b 10                	mov    (%eax),%edx
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  105b9d:	01 4a 10             	add    %ecx,0x10(%edx)
	node->prev->next = node->next;
  105ba0:	8b 50 04             	mov    0x4(%eax),%edx
  105ba3:	8b 08                	mov    (%eax),%ecx
  105ba5:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  105ba7:	8b 08                	mov    (%eax),%ecx
  105ba9:	89 51 04             	mov    %edx,0x4(%ecx)
	timeout->delta_ticks_from_prev = _INACTIVE;
  105bac:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
	return 0;
  105bb3:	31 c0                	xor    %eax,%eax
  105bb5:	eb 03                	jmp    105bba <_abort_timeout+0x32>
		return _INACTIVE;
  105bb7:	83 c8 ff             	or     $0xffffffff,%eax
}
  105bba:	5d                   	pop    %ebp
  105bbb:	c3                   	ret    

00105bbc <k_is_in_isr>:
	     thread_data < _static_thread_data_list_end; \
	     thread_data++)


int k_is_in_isr(void)
{
  105bbc:	55                   	push   %ebp
	return _is_in_isr();
  105bbd:	31 c0                	xor    %eax,%eax
{
  105bbf:	89 e5                	mov    %esp,%ebp
}
  105bc1:	5d                   	pop    %ebp
	return _is_in_isr();
  105bc2:	83 3d a0 9f 10 00 00 	cmpl   $0x0,0x109fa0
  105bc9:	0f 95 c0             	setne  %al
}
  105bcc:	c3                   	ret    

00105bcd <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
  105bcd:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
{
  105bd2:	55                   	push   %ebp
  105bd3:	89 e5                	mov    %esp,%ebp
}
  105bd5:	5d                   	pop    %ebp
	return _current->base.user_options & K_ESSENTIAL;
  105bd6:	8a 40 08             	mov    0x8(%eax),%al
  105bd9:	83 e0 01             	and    $0x1,%eax
}
  105bdc:	c3                   	ret    

00105bdd <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
  105bdd:	55                   	push   %ebp
  105bde:	89 e5                	mov    %esp,%ebp
	entry(p1, p2, p3);
  105be0:	ff 75 14             	pushl  0x14(%ebp)
  105be3:	ff 75 10             	pushl  0x10(%ebp)
  105be6:	ff 75 0c             	pushl  0xc(%ebp)
  105be9:	ff 55 08             	call   *0x8(%ebp)
  105bec:	83 c4 0c             	add    $0xc,%esp
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
  105bef:	e8 d8 fb ff ff       	call   1057cc <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
  105bf4:	50                   	push   %eax
  105bf5:	e8 5a 02 00 00       	call   105e54 <_impl_k_thread_abort>
  105bfa:	58                   	pop    %eax

00105bfb <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
  105bfb:	55                   	push   %ebp
  105bfc:	89 e5                	mov    %esp,%ebp
  105bfe:	53                   	push   %ebx
  105bff:	8b 55 08             	mov    0x8(%ebp),%edx
	__asm__ volatile (
  105c02:	9c                   	pushf  
  105c03:	fa                   	cli    
  105c04:	5b                   	pop    %ebx
  105c05:	8a 42 09             	mov    0x9(%edx),%al
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
  105c08:	a8 04                	test   $0x4,%al
  105c0a:	74 11                	je     105c1d <_impl_k_thread_start+0x22>
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105c0c:	83 e0 fb             	and    $0xfffffffb,%eax
  105c0f:	88 42 09             	mov    %al,0x9(%edx)
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
  105c12:	89 d0                	mov    %edx,%eax
  105c14:	e8 56 ff ff ff       	call   105b6f <_is_thread_ready>
  105c19:	85 c0                	test   %eax,%eax
  105c1b:	75 09                	jne    105c26 <_impl_k_thread_start+0x2b>
  105c1d:	0f ba e3 09          	bt     $0x9,%ebx
  105c21:	73 30                	jae    105c53 <_impl_k_thread_start+0x58>
	__asm__ volatile (
  105c23:	fb                   	sti    
  105c24:	eb 2d                	jmp    105c53 <_impl_k_thread_start+0x58>
		_add_thread_to_ready_q(thread);
  105c26:	52                   	push   %edx
  105c27:	e8 e1 f7 ff ff       	call   10540d <_add_thread_to_ready_q>
  105c2c:	58                   	pop    %eax
	return _is_preempt(_current) && __must_switch_threads();
  105c2d:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
  105c32:	66 83 78 0a 7f       	cmpw   $0x7f,0xa(%eax)
  105c37:	77 e4                	ja     105c1d <_impl_k_thread_start+0x22>
  105c39:	e8 23 fa ff ff       	call   105661 <__must_switch_threads>
  105c3e:	85 c0                	test   %eax,%eax
  105c40:	74 db                	je     105c1d <_impl_k_thread_start+0x22>
	_update_time_slice_before_swap();
  105c42:	e8 ca fb ff ff       	call   105811 <_update_time_slice_before_swap>
	return __swap(key);
  105c47:	89 5d 08             	mov    %ebx,0x8(%ebp)
			return;
		}
	}

	irq_unlock(key);
}
  105c4a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105c4d:	c9                   	leave  
  105c4e:	e9 83 b9 ff ff       	jmp    1015d6 <__swap>
  105c53:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105c56:	c9                   	leave  
  105c57:	c3                   	ret    

00105c58 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
  105c58:	55                   	push   %ebp
  105c59:	89 e5                	mov    %esp,%ebp

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
  105c5b:	5d                   	pop    %ebp
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
  105c5c:	e9 02 ba ff ff       	jmp    101663 <_new_thread>

00105c61 <schedule_new_thread>:
{
  105c61:	55                   	push   %ebp
	if (delay == 0) {
  105c62:	85 d2                	test   %edx,%edx
{
  105c64:	89 e5                	mov    %esp,%ebp
  105c66:	57                   	push   %edi
  105c67:	56                   	push   %esi
  105c68:	53                   	push   %ebx
  105c69:	51                   	push   %ecx
  105c6a:	89 c1                	mov    %eax,%ecx
	if (delay == 0) {
  105c6c:	75 0c                	jne    105c7a <schedule_new_thread+0x19>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
  105c6e:	50                   	push   %eax
  105c6f:	e8 87 ff ff ff       	call   105bfb <_impl_k_thread_start>
  105c74:	58                   	pop    %eax
  105c75:	e9 8c 00 00 00       	jmp    105d06 <schedule_new_thread+0xa5>
	__asm__ volatile (
  105c7a:	9c                   	pushf  
  105c7b:	fa                   	cli    
  105c7c:	8f 45 f0             	popl   -0x10(%ebp)
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
  105c7f:	be 0a 00 00 00       	mov    $0xa,%esi
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
  105c84:	8d 58 10             	lea    0x10(%eax),%ebx
  105c87:	8d 42 09             	lea    0x9(%edx),%eax
  105c8a:	31 d2                	xor    %edx,%edx
  105c8c:	f7 f6                	div    %esi
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
  105c8e:	40                   	inc    %eax
	timeout->thread = thread;
  105c8f:	89 49 18             	mov    %ecx,0x18(%ecx)
  105c92:	89 41 20             	mov    %eax,0x20(%ecx)
	return list->head == list;
  105c95:	a1 ac 9f 10 00       	mov    0x109fac,%eax
	timeout->wait_q = (sys_dlist_t *)wait_q;
  105c9a:	c7 41 1c 00 00 00 00 	movl   $0x0,0x1c(%ecx)
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  105ca1:	85 c0                	test   %eax,%eax
  105ca3:	74 0d                	je     105cb2 <schedule_new_thread+0x51>
  105ca5:	8b 3d b0 9f 10 00    	mov    0x109fb0,%edi
  105cab:	3d ac 9f 10 00       	cmp    $0x109fac,%eax
  105cb0:	75 19                	jne    105ccb <schedule_new_thread+0x6a>
	node->next = list;
  105cb2:	c7 41 10 ac 9f 10 00 	movl   $0x109fac,0x10(%ecx)
	node->prev = list->tail;
  105cb9:	a1 b0 9f 10 00       	mov    0x109fb0,%eax
  105cbe:	89 41 14             	mov    %eax,0x14(%ecx)
	list->tail->next = node;
  105cc1:	89 18                	mov    %ebx,(%eax)
	list->tail = node;
  105cc3:	89 1d b0 9f 10 00    	mov    %ebx,0x109fb0
  105cc9:	eb 31                	jmp    105cfc <schedule_new_thread+0x9b>
		if (*delta <= in_q->delta_ticks_from_prev) {
  105ccb:	8b 51 20             	mov    0x20(%ecx),%edx
  105cce:	8b 70 10             	mov    0x10(%eax),%esi
  105cd1:	39 f2                	cmp    %esi,%edx
  105cd3:	7f 18                	jg     105ced <schedule_new_thread+0x8c>
			in_q->delta_ticks_from_prev -= *delta;
  105cd5:	29 d6                	sub    %edx,%esi
		node->prev = insert_point->prev;
  105cd7:	8b 50 04             	mov    0x4(%eax),%edx
  105cda:	89 70 10             	mov    %esi,0x10(%eax)
  105cdd:	89 51 14             	mov    %edx,0x14(%ecx)
		node->next = insert_point;
  105ce0:	89 41 10             	mov    %eax,0x10(%ecx)
		insert_point->prev->next = node;
  105ce3:	8b 50 04             	mov    0x4(%eax),%edx
  105ce6:	89 1a                	mov    %ebx,(%edx)
		insert_point->prev = node;
  105ce8:	89 58 04             	mov    %ebx,0x4(%eax)
  105ceb:	eb 0f                	jmp    105cfc <schedule_new_thread+0x9b>
		*delta -= in_q->delta_ticks_from_prev;
  105ced:	29 f2                	sub    %esi,%edx
	return (node == list->tail) ? NULL : node->next;
  105cef:	39 f8                	cmp    %edi,%eax
  105cf1:	89 51 20             	mov    %edx,0x20(%ecx)
  105cf4:	74 bc                	je     105cb2 <schedule_new_thread+0x51>
  105cf6:	8b 00                	mov    (%eax),%eax
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  105cf8:	85 c0                	test   %eax,%eax
  105cfa:	eb b4                	jmp    105cb0 <schedule_new_thread+0x4f>
  105cfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105cff:	0f ba e0 09          	bt     $0x9,%eax
  105d03:	73 01                	jae    105d06 <schedule_new_thread+0xa5>
	__asm__ volatile (
  105d05:	fb                   	sti    
}
  105d06:	8d 65 f4             	lea    -0xc(%ebp),%esp
  105d09:	5b                   	pop    %ebx
  105d0a:	5e                   	pop    %esi
  105d0b:	5f                   	pop    %edi
  105d0c:	5d                   	pop    %ebp
  105d0d:	c3                   	ret    

00105d0e <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
  105d0e:	55                   	push   %ebp
  105d0f:	89 e5                	mov    %esp,%ebp
  105d11:	53                   	push   %ebx
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
  105d12:	ff 75 28             	pushl  0x28(%ebp)
  105d15:	ff 75 24             	pushl  0x24(%ebp)
  105d18:	ff 75 20             	pushl  0x20(%ebp)
  105d1b:	ff 75 1c             	pushl  0x1c(%ebp)
  105d1e:	ff 75 18             	pushl  0x18(%ebp)
  105d21:	ff 75 14             	pushl  0x14(%ebp)
  105d24:	ff 75 10             	pushl  0x10(%ebp)
  105d27:	ff 75 0c             	pushl  0xc(%ebp)
{
  105d2a:	8b 5d 08             	mov    0x8(%ebp),%ebx
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
  105d2d:	53                   	push   %ebx
  105d2e:	e8 30 b9 ff ff       	call   101663 <_new_thread>
  105d33:	83 c4 24             	add    $0x24,%esp
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
  105d36:	83 7d 2c ff          	cmpl   $0xffffffff,0x2c(%ebp)
  105d3a:	74 0a                	je     105d46 <_impl_k_thread_create+0x38>
		schedule_new_thread(new_thread, delay);
  105d3c:	8b 55 2c             	mov    0x2c(%ebp),%edx
  105d3f:	89 d8                	mov    %ebx,%eax
  105d41:	e8 1b ff ff ff       	call   105c61 <schedule_new_thread>
	}
	return new_thread;
}
  105d46:	89 d8                	mov    %ebx,%eax
  105d48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105d4b:	c9                   	leave  
  105d4c:	c3                   	ret    

00105d4d <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
  105d4d:	55                   	push   %ebp
  105d4e:	89 e5                	mov    %esp,%ebp
  105d50:	53                   	push   %ebx
  105d51:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (thread->fn_abort != NULL) {
  105d54:	8b 43 30             	mov    0x30(%ebx),%eax
  105d57:	85 c0                	test   %eax,%eax
  105d59:	74 02                	je     105d5d <_k_thread_single_abort+0x10>
		thread->fn_abort();
  105d5b:	ff d0                	call   *%eax
	}

	if (_is_thread_ready(thread)) {
  105d5d:	89 d8                	mov    %ebx,%eax
  105d5f:	e8 0b fe ff ff       	call   105b6f <_is_thread_ready>
  105d64:	85 c0                	test   %eax,%eax
  105d66:	74 09                	je     105d71 <_k_thread_single_abort+0x24>
		_remove_thread_from_ready_q(thread);
  105d68:	53                   	push   %ebx
  105d69:	e8 e8 f7 ff ff       	call   105556 <_remove_thread_from_ready_q>
  105d6e:	58                   	pop    %eax
  105d6f:	eb 24                	jmp    105d95 <_k_thread_single_abort+0x48>
	} else {
		if (_is_thread_pending(thread)) {
  105d71:	f6 43 09 02          	testb  $0x2,0x9(%ebx)
  105d75:	74 10                	je     105d87 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
  105d77:	8b 43 04             	mov    0x4(%ebx),%eax
  105d7a:	8b 13                	mov    (%ebx),%edx
  105d7c:	89 10                	mov    %edx,(%eax)
	node->next->prev = node->prev;
  105d7e:	8b 13                	mov    (%ebx),%edx
  105d80:	89 42 04             	mov    %eax,0x4(%edx)
	thread->base.thread_state &= ~_THREAD_PENDING;
  105d83:	80 63 09 fd          	andb   $0xfd,0x9(%ebx)
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
  105d87:	83 7b 20 ff          	cmpl   $0xffffffff,0x20(%ebx)
  105d8b:	74 08                	je     105d95 <_k_thread_single_abort+0x48>
	return _abort_timeout(&thread->base.timeout);
  105d8d:	8d 43 10             	lea    0x10(%ebx),%eax
  105d90:	e8 f3 fd ff ff       	call   105b88 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
  105d95:	80 4b 09 08          	orb    $0x8,0x9(%ebx)
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
  105d99:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105d9c:	c9                   	leave  
  105d9d:	c3                   	ret    

00105d9e <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
  105d9e:	55                   	push   %ebp
  105d9f:	89 e5                	mov    %esp,%ebp
  105da1:	56                   	push   %esi
  105da2:	53                   	push   %ebx
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
  105da3:	bb fc ba 10 00       	mov    $0x10bafc,%ebx
  105da8:	81 fb fc ba 10 00    	cmp    $0x10bafc,%ebx
  105dae:	73 2c                	jae    105ddc <_init_static_threads+0x3e>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
  105db0:	ff 73 20             	pushl  0x20(%ebx)
  105db3:	ff 73 1c             	pushl  0x1c(%ebx)
  105db6:	ff 73 18             	pushl  0x18(%ebx)
  105db9:	ff 73 14             	pushl  0x14(%ebx)
  105dbc:	ff 73 10             	pushl  0x10(%ebx)
  105dbf:	ff 73 0c             	pushl  0xc(%ebx)
  105dc2:	ff 73 08             	pushl  0x8(%ebx)
  105dc5:	ff 73 04             	pushl  0x4(%ebx)
  105dc8:	ff 33                	pushl  (%ebx)
  105dca:	e8 94 b8 ff ff       	call   101663 <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
  105dcf:	8b 03                	mov    (%ebx),%eax
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
  105dd1:	83 c4 24             	add    $0x24,%esp
		thread_data->init_thread->init_data = thread_data;
  105dd4:	89 58 2c             	mov    %ebx,0x2c(%eax)
	_FOREACH_STATIC_THREAD(thread_data) {
  105dd7:	83 c3 30             	add    $0x30,%ebx
  105dda:	eb cc                	jmp    105da8 <_init_static_threads+0xa>
	--_current->base.sched_locked;
  105ddc:	a1 a8 9f 10 00       	mov    0x109fa8,%eax
  105de1:	fe 48 0b             	decb   0xb(%eax)
	__asm__ volatile (
  105de4:	9c                   	pushf  
  105de5:	fa                   	cli    
  105de6:	5e                   	pop    %esi
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
  105de7:	bb fc ba 10 00       	mov    $0x10bafc,%ebx
  105dec:	81 fb fc ba 10 00    	cmp    $0x10bafc,%ebx
  105df2:	73 14                	jae    105e08 <_init_static_threads+0x6a>
		if (thread_data->init_delay != K_FOREVER) {
  105df4:	8b 53 24             	mov    0x24(%ebx),%edx
  105df7:	83 fa ff             	cmp    $0xffffffff,%edx
  105dfa:	74 07                	je     105e03 <_init_static_threads+0x65>
			schedule_new_thread(thread_data->init_thread,
  105dfc:	8b 03                	mov    (%ebx),%eax
  105dfe:	e8 5e fe ff ff       	call   105c61 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
  105e03:	83 c3 30             	add    $0x30,%ebx
  105e06:	eb e4                	jmp    105dec <_init_static_threads+0x4e>
  105e08:	0f ba e6 09          	bt     $0x9,%esi
  105e0c:	73 01                	jae    105e0f <_init_static_threads+0x71>
	__asm__ volatile (
  105e0e:	fb                   	sti    
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
  105e0f:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105e12:	5b                   	pop    %ebx
  105e13:	5e                   	pop    %esi
  105e14:	5d                   	pop    %ebp
	k_sched_unlock();
  105e15:	e9 9b f8 ff ff       	jmp    1056b5 <k_sched_unlock>

00105e1a <_init_thread_base>:
#endif

void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
  105e1a:	55                   	push   %ebp
  105e1b:	89 e5                	mov    %esp,%ebp
  105e1d:	8b 45 08             	mov    0x8(%ebp),%eax
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
  105e20:	8b 55 14             	mov    0x14(%ebp),%edx
  105e23:	88 50 08             	mov    %dl,0x8(%eax)
	thread_base->thread_state = (u8_t)initial_state;
  105e26:	8b 55 10             	mov    0x10(%ebp),%edx
  105e29:	88 50 09             	mov    %dl,0x9(%eax)

	thread_base->prio = priority;
  105e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
  105e2f:	88 50 0a             	mov    %dl,0xa(%eax)

	thread_base->sched_locked = 0;
  105e32:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	t->delta_ticks_from_prev = _INACTIVE;
  105e36:	c7 40 20 ff ff ff ff 	movl   $0xffffffff,0x20(%eax)
	t->wait_q = NULL;
  105e3d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
	t->thread = NULL;
  105e44:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	t->func = func;
  105e4b:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
  105e52:	5d                   	pop    %ebp
  105e53:	c3                   	ret    

00105e54 <_impl_k_thread_abort>:

extern void _k_thread_single_abort(struct k_thread *thread);

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void _impl_k_thread_abort(k_tid_t thread)
{
  105e54:	55                   	push   %ebp
  105e55:	89 e5                	mov    %esp,%ebp
  105e57:	56                   	push   %esi
  105e58:	53                   	push   %ebx
  105e59:	8b 75 08             	mov    0x8(%ebp),%esi
	__asm__ volatile (
  105e5c:	9c                   	pushf  
  105e5d:	fa                   	cli    
  105e5e:	5b                   	pop    %ebx
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
  105e5f:	56                   	push   %esi
  105e60:	e8 e8 fe ff ff       	call   105d4d <_k_thread_single_abort>
  105e65:	5a                   	pop    %edx
	_thread_monitor_exit(thread);

	if (_current == thread) {
  105e66:	3b 35 a8 9f 10 00    	cmp    0x109fa8,%esi
  105e6c:	75 0c                	jne    105e7a <_impl_k_thread_abort+0x26>
	_update_time_slice_before_swap();
  105e6e:	e8 9e f9 ff ff       	call   105811 <_update_time_slice_before_swap>
	return __swap(key);
  105e73:	53                   	push   %ebx
  105e74:	e8 5d b7 ff ff       	call   1015d6 <__swap>
  105e79:	58                   	pop    %eax
		_Swap(key);
		CODE_UNREACHABLE;
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
  105e7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
  105e7d:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105e80:	5b                   	pop    %ebx
  105e81:	5e                   	pop    %esi
  105e82:	5d                   	pop    %ebp
	_reschedule_threads(key);
  105e83:	e9 f4 f7 ff ff       	jmp    10567c <_reschedule_threads>

00105e88 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105e88:	8a 50 09             	mov    0x9(%eax),%dl
  105e8b:	88 d1                	mov    %dl,%cl
  105e8d:	83 e1 fb             	and    $0xfffffffb,%ecx
	return !(_is_thread_prevented_from_running(thread) ||
  105e90:	80 e2 1b             	and    $0x1b,%dl
	thread->base.thread_state &= ~_THREAD_PRESTART;
  105e93:	88 48 09             	mov    %cl,0x9(%eax)
	return !(_is_thread_prevented_from_running(thread) ||
  105e96:	75 11                	jne    105ea9 <_ready_thread+0x21>
  105e98:	83 78 20 ff          	cmpl   $0xffffffff,0x20(%eax)
  105e9c:	75 0b                	jne    105ea9 <_ready_thread+0x21>
{
  105e9e:	55                   	push   %ebp
  105e9f:	89 e5                	mov    %esp,%ebp
		_add_thread_to_ready_q(thread);
  105ea1:	50                   	push   %eax
  105ea2:	e8 66 f5 ff ff       	call   10540d <_add_thread_to_ready_q>
  105ea7:	58                   	pop    %eax
}
  105ea8:	c9                   	leave  
  105ea9:	c3                   	ret    

00105eaa <_unpend_thread>:
	node->prev->next = node->next;
  105eaa:	8b 50 04             	mov    0x4(%eax),%edx
  105ead:	8b 08                	mov    (%eax),%ecx
{
  105eaf:	55                   	push   %ebp
  105eb0:	89 0a                	mov    %ecx,(%edx)
  105eb2:	89 e5                	mov    %esp,%ebp
	node->next->prev = node->prev;
  105eb4:	8b 08                	mov    (%eax),%ecx
  105eb6:	89 51 04             	mov    %edx,0x4(%ecx)
	thread->base.thread_state &= ~_THREAD_PENDING;
  105eb9:	80 60 09 fd          	andb   $0xfd,0x9(%eax)
}
  105ebd:	5d                   	pop    %ebp
  105ebe:	c3                   	ret    

00105ebf <_abort_timeout>:
{
  105ebf:	55                   	push   %ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  105ec0:	8b 48 10             	mov    0x10(%eax),%ecx
{
  105ec3:	89 e5                	mov    %esp,%ebp
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
  105ec5:	83 f9 ff             	cmp    $0xffffffff,%ecx
  105ec8:	74 24                	je     105eee <_abort_timeout+0x2f>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
  105eca:	3b 05 b0 9f 10 00    	cmp    0x109fb0,%eax
  105ed0:	74 05                	je     105ed7 <_abort_timeout+0x18>
	return (node == list->tail) ? NULL : node->next;
  105ed2:	8b 10                	mov    (%eax),%edx
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
  105ed4:	01 4a 10             	add    %ecx,0x10(%edx)
	node->prev->next = node->next;
  105ed7:	8b 50 04             	mov    0x4(%eax),%edx
  105eda:	8b 08                	mov    (%eax),%ecx
  105edc:	89 0a                	mov    %ecx,(%edx)
	node->next->prev = node->prev;
  105ede:	8b 08                	mov    (%eax),%ecx
  105ee0:	89 51 04             	mov    %edx,0x4(%ecx)
	timeout->delta_ticks_from_prev = _INACTIVE;
  105ee3:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
	return 0;
  105eea:	31 c0                	xor    %eax,%eax
  105eec:	eb 03                	jmp    105ef1 <_abort_timeout+0x32>
		return _INACTIVE;
  105eee:	83 c8 ff             	or     $0xffffffff,%eax
}
  105ef1:	5d                   	pop    %ebp
  105ef2:	c3                   	ret    

00105ef3 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
  105ef3:	55                   	push   %ebp
	if (!timeout_in_ticks) {
  105ef4:	85 c9                	test   %ecx,%ecx
static inline void _add_timeout(struct k_thread *thread,
  105ef6:	89 e5                	mov    %esp,%ebp
  105ef8:	53                   	push   %ebx
	timeout->delta_ticks_from_prev = timeout_in_ticks;
  105ef9:	89 48 10             	mov    %ecx,0x10(%eax)
	timeout->thread = thread;
  105efc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	timeout->wait_q = (sys_dlist_t *)wait_q;
  105f03:	89 50 0c             	mov    %edx,0xc(%eax)
	if (!timeout_in_ticks) {
  105f06:	75 1e                	jne    105f26 <_add_timeout.constprop.9+0x33>
  105f08:	9c                   	pushf  
  105f09:	fa                   	cli    
  105f0a:	5a                   	pop    %edx
  105f0b:	0f ba e2 09          	bt     $0x9,%edx
	timeout->delta_ticks_from_prev = _INACTIVE;
  105f0f:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
  105f16:	73 01                	jae    105f19 <_add_timeout.constprop.9+0x26>
	__asm__ volatile (
  105f18:	fb                   	sti    
		if (timeout->func) {
  105f19:	8b 50 14             	mov    0x14(%eax),%edx
  105f1c:	85 d2                	test   %edx,%edx
  105f1e:	74 6a                	je     105f8a <_add_timeout.constprop.9+0x97>
			timeout->func(timeout);
  105f20:	50                   	push   %eax
  105f21:	ff d2                	call   *%edx
  105f23:	58                   	pop    %eax
  105f24:	eb 64                	jmp    105f8a <_add_timeout.constprop.9+0x97>
	return list->head == list;
  105f26:	8b 15 ac 9f 10 00    	mov    0x109fac,%edx
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  105f2c:	85 d2                	test   %edx,%edx
  105f2e:	74 08                	je     105f38 <_add_timeout.constprop.9+0x45>
  105f30:	81 fa ac 9f 10 00    	cmp    $0x109fac,%edx
  105f36:	75 1e                	jne    105f56 <_add_timeout.constprop.9+0x63>
	node->next = list;
  105f38:	c7 00 ac 9f 10 00    	movl   $0x109fac,(%eax)
	node->prev = list->tail;
  105f3e:	8b 15 b0 9f 10 00    	mov    0x109fb0,%edx
  105f44:	89 50 04             	mov    %edx,0x4(%eax)
	list->tail->next = node;
  105f47:	8b 15 b0 9f 10 00    	mov    0x109fb0,%edx
  105f4d:	89 02                	mov    %eax,(%edx)
	list->tail = node;
  105f4f:	a3 b0 9f 10 00       	mov    %eax,0x109fb0
  105f54:	eb 34                	jmp    105f8a <_add_timeout.constprop.9+0x97>
		if (*delta <= in_q->delta_ticks_from_prev) {
  105f56:	8b 48 10             	mov    0x10(%eax),%ecx
  105f59:	8b 5a 10             	mov    0x10(%edx),%ebx
  105f5c:	39 d9                	cmp    %ebx,%ecx
  105f5e:	7f 17                	jg     105f77 <_add_timeout.constprop.9+0x84>
			in_q->delta_ticks_from_prev -= *delta;
  105f60:	29 cb                	sub    %ecx,%ebx
		node->prev = insert_point->prev;
  105f62:	8b 4a 04             	mov    0x4(%edx),%ecx
  105f65:	89 5a 10             	mov    %ebx,0x10(%edx)
  105f68:	89 48 04             	mov    %ecx,0x4(%eax)
		node->next = insert_point;
  105f6b:	89 10                	mov    %edx,(%eax)
		insert_point->prev->next = node;
  105f6d:	8b 4a 04             	mov    0x4(%edx),%ecx
  105f70:	89 01                	mov    %eax,(%ecx)
		insert_point->prev = node;
  105f72:	89 42 04             	mov    %eax,0x4(%edx)
  105f75:	eb 13                	jmp    105f8a <_add_timeout.constprop.9+0x97>
		*delta -= in_q->delta_ticks_from_prev;
  105f77:	29 d9                	sub    %ebx,%ecx
  105f79:	89 48 10             	mov    %ecx,0x10(%eax)
	return (node == list->tail) ? NULL : node->next;
  105f7c:	3b 15 b0 9f 10 00    	cmp    0x109fb0,%edx
  105f82:	74 b4                	je     105f38 <_add_timeout.constprop.9+0x45>
  105f84:	8b 12                	mov    (%edx),%edx
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
  105f86:	85 d2                	test   %edx,%edx
  105f88:	eb ac                	jmp    105f36 <_add_timeout.constprop.9+0x43>
}
  105f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  105f8d:	c9                   	leave  
  105f8e:	c3                   	ret    

00105f8f <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
  105f8f:	55                   	push   %ebp
  105f90:	89 e5                	mov    %esp,%ebp
  105f92:	56                   	push   %esi
  105f93:	53                   	push   %ebx
  105f94:	8b 5d 08             	mov    0x8(%ebp),%ebx

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
  105f97:	83 7b 28 00          	cmpl   $0x0,0x28(%ebx)
  105f9b:	7e 17                	jle    105fb4 <_timer_expiration_handler+0x25>
	__asm__ volatile (
  105f9d:	9c                   	pushf  
  105f9e:	fa                   	cli    
  105f9f:	5e                   	pop    %esi
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
  105fa0:	8b 4b 28             	mov    0x28(%ebx),%ecx
  105fa3:	8d 53 18             	lea    0x18(%ebx),%edx
  105fa6:	89 d8                	mov    %ebx,%eax
  105fa8:	e8 46 ff ff ff       	call   105ef3 <_add_timeout.constprop.9>
  105fad:	0f ba e6 09          	bt     $0x9,%esi
  105fb1:	73 01                	jae    105fb4 <_timer_expiration_handler+0x25>
	__asm__ volatile (
  105fb3:	fb                   	sti    

	/* update timer's status */
	timer->status += 1;

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
  105fb4:	8b 43 20             	mov    0x20(%ebx),%eax
	timer->status += 1;
  105fb7:	ff 43 2c             	incl   0x2c(%ebx)
	if (timer->expiry_fn) {
  105fba:	85 c0                	test   %eax,%eax
  105fbc:	74 04                	je     105fc2 <_timer_expiration_handler+0x33>
		timer->expiry_fn(timer);
  105fbe:	53                   	push   %ebx
  105fbf:	ff d0                	call   *%eax
  105fc1:	58                   	pop    %eax
	return list->head == list;
  105fc2:	8b 73 18             	mov    0x18(%ebx),%esi
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
  105fc5:	85 f6                	test   %esi,%esi
  105fc7:	74 28                	je     105ff1 <_timer_expiration_handler+0x62>
	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
  105fc9:	83 c3 18             	add    $0x18,%ebx
	if (!thread) {
  105fcc:	39 de                	cmp    %ebx,%esi
  105fce:	74 21                	je     105ff1 <_timer_expiration_handler+0x62>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
  105fd0:	89 f0                	mov    %esi,%eax
  105fd2:	e8 d3 fe ff ff       	call   105eaa <_unpend_thread>
	__asm__ volatile (
  105fd7:	9c                   	pushf  
  105fd8:	fa                   	cli    
  105fd9:	5b                   	pop    %ebx

	key = irq_lock();
	_ready_thread(thread);
  105fda:	89 f0                	mov    %esi,%eax
  105fdc:	e8 a7 fe ff ff       	call   105e88 <_ready_thread>
  105fe1:	0f ba e3 09          	bt     $0x9,%ebx
  105fe5:	73 01                	jae    105fe8 <_timer_expiration_handler+0x59>
	__asm__ volatile (
  105fe7:	fb                   	sti    
  105fe8:	8b 46 28             	mov    0x28(%esi),%eax
  105feb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	irq_unlock(key);

	_set_thread_return_value(thread, 0);
}
  105ff1:	8d 65 f8             	lea    -0x8(%ebp),%esp
  105ff4:	5b                   	pop    %ebx
  105ff5:	5e                   	pop    %esi
  105ff6:	5d                   	pop    %ebp
  105ff7:	c3                   	ret    

00105ff8 <k_timer_init>:


void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
  105ff8:	55                   	push   %ebp
  105ff9:	89 e5                	mov    %esp,%ebp
  105ffb:	8b 45 08             	mov    0x8(%ebp),%eax
	timer->expiry_fn = expiry_fn;
  105ffe:	8b 55 0c             	mov    0xc(%ebp),%edx
  106001:	89 50 20             	mov    %edx,0x20(%eax)
	timer->stop_fn = stop_fn;
  106004:	8b 55 10             	mov    0x10(%ebp),%edx
  106007:	89 50 24             	mov    %edx,0x24(%eax)
	timer->status = 0;

	sys_dlist_init(&timer->wait_q);
  10600a:	8d 50 18             	lea    0x18(%eax),%edx
	timer->status = 0;
  10600d:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
	list->head = (sys_dnode_t *)list;
  106014:	89 50 18             	mov    %edx,0x18(%eax)
	list->tail = (sys_dnode_t *)list;
  106017:	89 50 1c             	mov    %edx,0x1c(%eax)
	t->delta_ticks_from_prev = _INACTIVE;
  10601a:	c7 40 10 ff ff ff ff 	movl   $0xffffffff,0x10(%eax)
	t->wait_q = NULL;
  106021:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	t->thread = NULL;
  106028:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	t->func = func;
  10602f:	c7 40 14 8f 5f 10 00 	movl   $0x105f8f,0x14(%eax)
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
  106036:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)

	_k_object_init(timer);
}
  10603d:	5d                   	pop    %ebp
  10603e:	c3                   	ret    

0010603f <_impl_k_timer_start>:


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
  10603f:	55                   	push   %ebp
  106040:	b9 0a 00 00 00       	mov    $0xa,%ecx
  106045:	89 e5                	mov    %esp,%ebp
  106047:	56                   	push   %esi
  106048:	53                   	push   %ebx
  106049:	31 d2                	xor    %edx,%edx
  10604b:	83 ec 08             	sub    $0x8,%esp
  10604e:	8b 45 10             	mov    0x10(%ebp),%eax
  106051:	8b 5d 08             	mov    0x8(%ebp),%ebx
  106054:	83 c0 09             	add    $0x9,%eax
  106057:	f7 f1                	div    %ecx
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
  106059:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10605c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10605f:	83 c0 09             	add    $0x9,%eax
  106062:	31 d2                	xor    %edx,%edx
  106064:	f7 f1                	div    %ecx
	duration_in_ticks = _ms_to_ticks(duration);
  106066:	89 45 f4             	mov    %eax,-0xc(%ebp)
	__asm__ volatile (
  106069:	9c                   	pushf  
  10606a:	fa                   	cli    
  10606b:	5e                   	pop    %esi

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
  10606c:	83 7b 10 ff          	cmpl   $0xffffffff,0x10(%ebx)
  106070:	74 07                	je     106079 <_impl_k_timer_start+0x3a>
		_abort_timeout(&timer->timeout);
  106072:	89 d8                	mov    %ebx,%eax
  106074:	e8 46 fe ff ff       	call   105ebf <_abort_timeout>
	}

	timer->period = period_in_ticks;
  106079:	8b 45 f0             	mov    -0x10(%ebp),%eax
	timer->status = 0;
  10607c:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%ebx)
	timer->period = period_in_ticks;
  106083:	89 43 28             	mov    %eax,0x28(%ebx)
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
  106086:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106089:	8d 53 18             	lea    0x18(%ebx),%edx
  10608c:	89 d8                	mov    %ebx,%eax
  10608e:	e8 60 fe ff ff       	call   105ef3 <_add_timeout.constprop.9>
  106093:	0f ba e6 09          	bt     $0x9,%esi
  106097:	73 01                	jae    10609a <_impl_k_timer_start+0x5b>
	__asm__ volatile (
  106099:	fb                   	sti    
	irq_unlock(key);
}
  10609a:	58                   	pop    %eax
  10609b:	5a                   	pop    %edx
  10609c:	5b                   	pop    %ebx
  10609d:	5e                   	pop    %esi
  10609e:	5d                   	pop    %ebp
  10609f:	c3                   	ret    

001060a0 <_impl_k_timer_status_sync>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_get, K_OBJ_TIMER, struct k_timer *);
#endif

u32_t _impl_k_timer_status_sync(struct k_timer *timer)
{
  1060a0:	55                   	push   %ebp
  1060a1:	89 e5                	mov    %esp,%ebp
  1060a3:	56                   	push   %esi
  1060a4:	53                   	push   %ebx
  1060a5:	8b 75 08             	mov    0x8(%ebp),%esi
	__asm__ volatile (
  1060a8:	9c                   	pushf  
  1060a9:	fa                   	cli    
  1060aa:	5b                   	pop    %ebx
	__ASSERT(!_is_in_isr(), "");

	unsigned int key = irq_lock();
	u32_t result = timer->status;
  1060ab:	8b 46 2c             	mov    0x2c(%esi),%eax

	if (result == 0) {
  1060ae:	85 c0                	test   %eax,%eax
  1060b0:	75 25                	jne    1060d7 <_impl_k_timer_status_sync+0x37>
		if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
  1060b2:	83 7e 10 ff          	cmpl   $0xffffffff,0x10(%esi)
  1060b6:	74 1f                	je     1060d7 <_impl_k_timer_status_sync+0x37>
			/* wait for timer to expire or stop */
			_pend_current_thread(&timer->wait_q, K_FOREVER);
  1060b8:	8d 46 18             	lea    0x18(%esi),%eax
  1060bb:	6a ff                	push   $0xffffffff
  1060bd:	50                   	push   %eax
  1060be:	e8 79 f5 ff ff       	call   10563c <_pend_current_thread>
  1060c3:	58                   	pop    %eax
  1060c4:	5a                   	pop    %edx
	_update_time_slice_before_swap();
  1060c5:	e8 47 f7 ff ff       	call   105811 <_update_time_slice_before_swap>
	return __swap(key);
  1060ca:	53                   	push   %ebx
  1060cb:	e8 06 b5 ff ff       	call   1015d6 <__swap>
  1060d0:	59                   	pop    %ecx
  1060d1:	9c                   	pushf  
  1060d2:	fa                   	cli    
  1060d3:	5b                   	pop    %ebx
			_Swap(key);

			/* get updated timer status */
			key = irq_lock();
			result = timer->status;
  1060d4:	8b 46 2c             	mov    0x2c(%esi),%eax
  1060d7:	0f ba e3 09          	bt     $0x9,%ebx
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0;
  1060db:	c7 46 2c 00 00 00 00 	movl   $0x0,0x2c(%esi)
  1060e2:	73 01                	jae    1060e5 <_impl_k_timer_status_sync+0x45>
	__asm__ volatile (
  1060e4:	fb                   	sti    
	irq_unlock(key);

	return result;
}
  1060e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1060e8:	5b                   	pop    %ebx
  1060e9:	5e                   	pop    %esi
  1060ea:	5d                   	pop    %ebp
  1060eb:	c3                   	ret    

001060ec <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
  1060ec:	55                   	push   %ebp
  1060ed:	89 e5                	mov    %esp,%ebp
	__asm__ volatile (
  1060ef:	9c                   	pushf  
  1060f0:	fa                   	cli    
  1060f1:	58                   	pop    %eax
	k_cpu_idle();
  1060f2:	e8 2a b4 ff ff       	call   101521 <k_cpu_idle>
  1060f7:	eb f6                	jmp    1060ef <idle+0x3>

001060f9 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
  1060f9:	55                   	push   %ebp
  1060fa:	89 e5                	mov    %esp,%ebp

GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(ISR_LIST));
GEN_ABSOLUTE_SYM(__MMU_REGION_SIZEOF, sizeof(struct mmu_region));


GEN_ABS_SYM_END
  1060fc:	5d                   	pop    %ebp
  1060fd:	c3                   	ret    

001060fe <_handle_exc_0_vector_0_stub>:
  1060fe:	6a 00                	push   $0x0
  106100:	68 1d 18 10 00       	push   $0x10181d
  106105:	e9 1e b4 ff ff       	jmp    101528 <_exception_enter>

0010610a <_handle_exc_2_vector_2_stub>:
  10610a:	6a 00                	push   $0x0
  10610c:	68 2a 18 10 00       	push   $0x10182a
  106111:	e9 12 b4 ff ff       	jmp    101528 <_exception_enter>

00106116 <_handle_exc_4_vector_4_stub>:
  106116:	6a 00                	push   $0x0
  106118:	68 3a 18 10 00       	push   $0x10183a
  10611d:	e9 06 b4 ff ff       	jmp    101528 <_exception_enter>

00106122 <_handle_exc_5_vector_5_stub>:
  106122:	6a 00                	push   $0x0
  106124:	68 4a 18 10 00       	push   $0x10184a
  106129:	e9 fa b3 ff ff       	jmp    101528 <_exception_enter>

0010612e <_handle_exc_6_vector_6_stub>:
  10612e:	6a 00                	push   $0x0
  106130:	68 5a 18 10 00       	push   $0x10185a
  106135:	e9 ee b3 ff ff       	jmp    101528 <_exception_enter>

0010613a <_handle_exc_7_vector_7_stub>:
  10613a:	6a 00                	push   $0x0
  10613c:	68 6a 18 10 00       	push   $0x10186a
  106141:	e9 e2 b3 ff ff       	jmp    101528 <_exception_enter>

00106146 <_handle_exc_8_vector_8_stub>:
  106146:	6a 00                	push   $0x0
  106148:	68 7a 18 10 00       	push   $0x10187a
  10614d:	e9 d6 b3 ff ff       	jmp    101528 <_exception_enter>

00106152 <_handle_exc_10_vector_10_stub>:
  106152:	68 8a 18 10 00       	push   $0x10188a
  106157:	e9 cc b3 ff ff       	jmp    101528 <_exception_enter>

0010615c <_handle_exc_11_vector_11_stub>:
  10615c:	68 9a 18 10 00       	push   $0x10189a
  106161:	e9 c2 b3 ff ff       	jmp    101528 <_exception_enter>

00106166 <_handle_exc_12_vector_12_stub>:
  106166:	68 aa 18 10 00       	push   $0x1018aa
  10616b:	e9 b8 b3 ff ff       	jmp    101528 <_exception_enter>

00106170 <_handle_exc_13_vector_13_stub>:
  106170:	68 ba 18 10 00       	push   $0x1018ba
  106175:	e9 ae b3 ff ff       	jmp    101528 <_exception_enter>

0010617a <_handle_exc_16_vector_16_stub>:
  10617a:	6a 00                	push   $0x0
  10617c:	68 ca 18 10 00       	push   $0x1018ca
  106181:	e9 a2 b3 ff ff       	jmp    101528 <_exception_enter>

00106186 <_handle_exc_17_vector_17_stub>:
  106186:	68 da 18 10 00       	push   $0x1018da
  10618b:	e9 98 b3 ff ff       	jmp    101528 <_exception_enter>

00106190 <_handle_exc_18_vector_18_stub>:
  106190:	6a 00                	push   $0x0
  106192:	68 ea 18 10 00       	push   $0x1018ea
  106197:	e9 8c b3 ff ff       	jmp    101528 <_exception_enter>

0010619c <_page_fault_handler_vector_14_stub>:
  10619c:	68 fa 18 10 00       	push   $0x1018fa
  1061a1:	e9 82 b3 ff ff       	jmp    101528 <_exception_enter>
